package com.rudyreyes.javacraft.controlador.analisis;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.javacraft.modelo.abstracto.Instruccion;
import com.rudyreyes.javacraft.modelo.simbolo.Tipo;
import com.rudyreyes.javacraft.modelo.simbolo.TipoDato;
import com.rudyreyes.javacraft.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.javacraft.modelo.expresiones.relacionales.*;
//instrucciones
import com.rudyreyes.javacraft.modelo.instrucciones.Println;

//expresiones
import com.rudyreyes.javacraft.modelo.expresiones.Nativo;

// parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}
    
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la linea " +
        (s.left) + " y columna " + (s.right) +
        ". No se esperaba el componente: " + (s.value) + ".");
    }

    public void unrecovered_syntax_error (Symbol s){
        System.out.println("Error Sintactico no recuperable en la linea" +
        (s.left) + " y columna " + (s.right) +
        ". No se esperaba el componente: " + (s.value) + ".");
    }

:}

action code
{:
:}

//terminales
terminal String CADENA, ENTERO, DECIMAL;
terminal FINCADENA, IMPRIMIR;
terminal PAR1, PAR2, MAS, MENOS, UMENOS, MULT, DIV, MOD, POTENCIA;
terminal DOBLEIGUAL, DIFERENTE, MENOR, MENORIGUAL, MAYOR, MAYORIGUAL;
terminal String BOOLEAN, CARACTER;

//no terminales
nonterminal LinkedList<Instruccion> inicio, instrucciones;
nonterminal Instruccion instruccion;
nonterminal Instruccion expresion, expresionAritmetica, expresionRelacional;

precedence left MAS, MENOS;
precedence left MULT, DIV, MOD, POTENCIA;
precedence right DOBLEIGUAL, DIFERENTE, MENOR, MENORIGUAL,MAYOR,  MAYORIGUAL;
precedence right UMENOS;

start with inicio;

inicio ::= instrucciones:a      {:   RESULT = a;   :}
;

instrucciones ::= instrucciones:a instruccion:b     {: RESULT = a; RESULT.add(b); :}
                | instruccion:a                   {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

instruccion ::= IMPRIMIR PAR1 expresion:a PAR2 FINCADENA      {:   RESULT = new Println(a, aleft, aright);   :}
;

expresion ::=  expresionAritmetica:a {: RESULT = a; :}
            | expresionRelacional: a {: RESULT = a; :}
            | ENTERO:a      {:   RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright );   :}
            | DECIMAL:a     {:   RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright );   :}
            | CADENA:a      {:   RESULT = new Nativo(a, new Tipo(TipoDato.CADENA), aleft, aright );   :}
            | CARACTER:a    {:   RESULT = new Nativo(a, new Tipo(TipoDato.CARACTER), aleft, aright );   :}
            | BOOLEAN:a     {:   RESULT = new Nativo(a, new Tipo(TipoDato.BOOLEANO), aleft, aright );   :}
            
;


expresionAritmetica ::= MENOS expresion:a             {:   RESULT = new OperacionNegacionU(a, aleft, aright);   :} %prec UMENOS
            | expresion:a MAS expresion:b   {:   RESULT = new OperacionSuma(a, b, aleft, aright);   :}
            | expresion:a MENOS expresion:b   {:  RESULT = new OperacionResta(a, b, aleft, aright);  :}
            | expresion:a MULT expresion:b    {:   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   :}
            | expresion:a DIV expresion:b     {:  RESULT = new OperacionDivision (a, b, aleft, aright);   :}
            | expresion:a MOD expresion:b     {:  RESULT = new OperacionModulo (a, b, aleft, aright);   :}
            | expresion:a POTENCIA expresion:b     {:  RESULT = new OperacionPotencia (a, b, aleft, aright);   :}
            | PAR1 expresion:a PAR2           {:   RESULT = a;   :}
;

expresionRelacional ::= expresion:a DOBLEIGUAL expresion:b   {:   RESULT = new Igualacion(a, b, aleft, aright);   :} %prec DOBLEIGUAL
                    | expresion:a DIFERENTE expresion:b   {:   RESULT = new Diferenciacion(a, b, aleft, aright);   :} %prec DIFERENTE
                    | expresion:a MENOR expresion:b   {:   RESULT = new MenorQue(a, b, aleft, aright);   :} %prec MENOR
                    | expresion:a MENORIGUAL expresion:b   {:   RESULT = new MenorIgualQue(a, b, aleft, aright);   :} %prec MENORIGUAL
                    | expresion:a MAYOR expresion:b   {:   RESULT = new MayorQue(a, b, aleft, aright);   :} %prec MAYOR
                    | expresion:a MAYORIGUAL expresion:b   {:   RESULT = new MayorIgualQue(a, b, aleft, aright);   :} %prec MAYORIGUAL

;