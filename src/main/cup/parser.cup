package com.rudyreyes.javacraft.controlador.analisis;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.javacraft.modelo.abstracto.Instruccion;
import com.rudyreyes.javacraft.modelo.simbolo.*;

//instrucciones
import com.rudyreyes.javacraft.modelo.instrucciones.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciaControl.*;

//expresiones
import com.rudyreyes.javacraft.modelo.expresiones.Nativo;
import com.rudyreyes.javacraft.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.javacraft.modelo.expresiones.relacionales.*;
import com.rudyreyes.javacraft.modelo.expresiones.logicas.*;
import com.rudyreyes.javacraft.modelo.expresiones.casteos.*;
import com.rudyreyes.javacraft.modelo.expresiones.variables.*;
import com.rudyreyes.javacraft.modelo.errores.*;

// parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

:}

action code
{:
:}

//terminales
terminal String CADENA, ENTERO, DECIMAL, ID;
terminal FINCADENA, IMPRIMIR;
terminal PAR1, PAR2, MAS, MENOS, UMENOS, MULT, DIV, MOD, POTENCIA;
terminal LLAVE1, LLAVE2, IF, ELSE;
terminal DOBLEIGUAL, DIFERENTE, MENOR, MENORIGUAL, MAYOR, MAYORIGUAL;
terminal NOT, XOR, OR, AND;
terminal INT, CHAR, DOUBLE, STRING, BOOL;
terminal DOSPUNTOS, IGUAL;
terminal CONST, VAR;
terminal String BOOLEAN, CARACTER;

//no terminales
nonterminal LinkedList<Instruccion> inicio, instrucciones;
nonterminal Instruccion instruccion;
nonterminal Instruccion expresion, expresionAritmetica, expresionRelacional, expresionLogica;
nonterminal Instruccion castearExpresion, println, declaracion_variable, asignacion_variable;
nonterminal Instruccion inicializar_variable, incremento_variable, decremento_variable;
nonterminal Instruccion sentencia_if;
nonterminal Tipo tipos_variable;
nonterminal Boolean  mutabilidad;

precedence left OR;
precedence left AND;
precedence left XOR;
precedence right NOT;
precedence left DOBLEIGUAL, DIFERENTE, MENOR, MENORIGUAL,MAYOR,  MAYORIGUAL;
precedence right INT, CHAR, DOUBLE;
precedence left MAS, MENOS;
precedence left MULT, DIV, MOD, POTENCIA;
precedence right UMENOS;

start with inicio;

inicio ::= instrucciones:a      {:   RESULT = a;   :}
;

instrucciones ::= instrucciones:a instruccion:b     {: RESULT = a; RESULT.add(b); :}
                | instruccion:a                   {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

instruccion ::= println:a {: RESULT= a; :}
             | declaracion_variable:a {: RESULT= a; :}
             | asignacion_variable:a {: RESULT= a; :}
             | incremento_variable: a {: RESULT= a; :}
             | decremento_variable: a {: RESULT= a; :}
             | sentencia_if : a {: RESULT= a; :}
             | error FINCADENA
             | error 
;

println ::= IMPRIMIR PAR1 expresion:a PAR2 FINCADENA      {:   RESULT = new Println(a, aleft, aright);   :}
;

declaracion_variable ::= mutabilidad:e ID:b DOSPUNTOS tipos_variable:a  inicializar_variable:c    {: RESULT = new DeclaracionVariable(e, b, c, a, aleft, aright);   :}
                    
;

inicializar_variable ::= IGUAL expresion:c FINCADENA {:RESULT = c; :}
                    | FINCADENA {:RESULT = null; :}
;

asignacion_variable ::= ID:a IGUAL expresion:b FINCADENA  {:   RESULT=new AsignacionVariable(a, b, aleft, aright);  :}
;

incremento_variable ::= ID:a MAS MAS FINCADENA 
{: RESULT=new IncrementoDecreVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  :}
;

decremento_variable ::= ID:a MENOS MENOS FINCADENA 
{: RESULT=new IncrementoDecreVariable(a, new OperacionResta(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  :}
;

sentencia_if ::= IF PAR1 expresion:a PAR2 LLAVE1 instrucciones:b LLAVE2  {:   RESULT = new SentenciaIf(a, b, aleft, aright);   :}
                | IF PAR1 expresion:a PAR2 LLAVE1 instrucciones:b LLAVE2 ELSE LLAVE1 instrucciones:c LLAVE2 {:   RESULT = new SentenciaIfElse(a, b, c, aleft, aright);   :}
                | IF PAR1 expresion:a PAR2 LLAVE1 instrucciones:b LLAVE2 ELSE sentencia_if:c {:   RESULT = new SentenciaElseIF(a, b, c, aleft, aright);   :}
;


tipos_variable ::= INT       {:   RESULT=new Tipo(TipoDato.ENTERO);   :}
                | DOUBLE    {:   RESULT=new Tipo(TipoDato.DECIMAL);   :}
                | STRING    {:   RESULT=new Tipo(TipoDato.CADENA);   :}
                | CHAR      {:   RESULT=new Tipo(TipoDato.CARACTER);   :}
                | BOOL      {:   RESULT=new Tipo(TipoDato.BOOLEANO);   :}
;

mutabilidad ::= CONST {: RESULT = Boolean.FALSE; :}
            | VAR {: RESULT = Boolean.TRUE; :}
;

expresion ::=  expresionAritmetica:a {: RESULT = a; :}
            | expresionRelacional: a {: RESULT = a; :}
            | expresionLogica: a {: RESULT = a; :}
            | castearExpresion: a {: RESULT =a; :}
            | ENTERO:a      {:   RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright );   :}
            | DECIMAL:a     {:   RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright );   :}
            | CADENA:a      {:   RESULT = new Nativo(a, new Tipo(TipoDato.CADENA), aleft, aright );   :}
            | CARACTER:a    {:   RESULT = new Nativo(a, new Tipo(TipoDato.CARACTER), aleft, aright );   :}
            | BOOLEAN:a     {:   RESULT = new Nativo(a, new Tipo(TipoDato.BOOLEANO), aleft, aright );   :}
            | ID:a          {:   RESULT = new AccesoVariable(a, aleft, aright);   :}
            
;


expresionAritmetica ::= MENOS expresion:a             {:   RESULT = new OperacionNegacionU(a, aleft, aright);   :} %prec UMENOS
            | expresion:a MAS expresion:b   {:   RESULT = new OperacionSuma(a, b, aleft, aright);   :}
            | expresion:a MENOS expresion:b   {:  RESULT = new OperacionResta(a, b, aleft, aright);  :}
            | expresion:a MULT expresion:b    {:   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   :}
            | expresion:a DIV expresion:b     {:  RESULT = new OperacionDivision (a, b, aleft, aright);   :}
            | expresion:a MOD expresion:b     {:  RESULT = new OperacionModulo (a, b, aleft, aright);   :}
            | expresion:a POTENCIA expresion:b     {:  RESULT = new OperacionPotencia (a, b, aleft, aright);   :}
            | PAR1 expresion:a PAR2           {:   RESULT = a;   :}
;

expresionRelacional ::= expresion:a DOBLEIGUAL expresion:b   {:   RESULT = new Igualacion(a, b, aleft, aright);   :} %prec DOBLEIGUAL
                    | expresion:a DIFERENTE expresion:b   {:   RESULT = new Diferenciacion(a, b, aleft, aright);   :} %prec DIFERENTE
                    | expresion:a MENOR expresion:b   {:   RESULT = new MenorQue(a, b, aleft, aright);   :} %prec MENOR
                    | expresion:a MENORIGUAL expresion:b   {:   RESULT = new MenorIgualQue(a, b, aleft, aright);   :} %prec MENORIGUAL
                    | expresion:a MAYOR expresion:b   {:   RESULT = new MayorQue(a, b, aleft, aright);   :} %prec MAYOR
                    | expresion:a MAYORIGUAL expresion:b   {:   RESULT = new MayorIgualQue(a, b, aleft, aright);   :} %prec MAYORIGUAL

;

expresionLogica ::= NOT expresion:a   {:   RESULT = new OperadorNot(a, aleft, aright);   :} %prec NOT
                | expresion:a XOR expresion:b   {:   RESULT = new OperadorXor(a, b, aleft, aright);   :} %prec XOR
                | expresion:a AND expresion:b   {:   RESULT = new OperadorAnd(a, b, aleft, aright);   :} %prec AND
                | expresion:a OR expresion:b   {:   RESULT = new OperadorOr(a, b, aleft, aright);   :} %prec OR

;

castearExpresion ::= PAR1 INT PAR2 expresion:a {:   RESULT = new Casteo(a, TipoCasteo.ENTERO, aleft, aright);   :} %prec INT
                | PAR1 DOUBLE PAR2 expresion:a {:   RESULT = new Casteo(a, TipoCasteo.DECIMAL, aleft, aright);   :} %prec DOUBLE
                | PAR1 CHAR PAR2 expresion:a {:   RESULT = new Casteo(a, TipoCasteo.CARACTER, aleft, aright);   :} %prec CHAR
;