package com.rudyreyes.javacraft.controlador.analisis;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.javacraft.modelo.abstracto.Instruccion;
import com.rudyreyes.javacraft.modelo.simbolo.*;
import java.util.HashMap;

//instrucciones
import com.rudyreyes.javacraft.modelo.instrucciones.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciaControl.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciasTransferencia.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciasCiclicas.*;
import com.rudyreyes.javacraft.modelo.instrucciones.vectores.*;
import com.rudyreyes.javacraft.modelo.instrucciones.listas.*;
import com.rudyreyes.javacraft.modelo.instrucciones.metodos.*;
import com.rudyreyes.javacraft.modelo.instrucciones.structs.*;
//expresiones
import com.rudyreyes.javacraft.modelo.expresiones.Nativo;
import com.rudyreyes.javacraft.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.javacraft.modelo.expresiones.relacionales.*;
import com.rudyreyes.javacraft.modelo.expresiones.logicas.*;
import com.rudyreyes.javacraft.modelo.expresiones.casteos.*;
import com.rudyreyes.javacraft.modelo.expresiones.variables.*;
import com.rudyreyes.javacraft.modelo.expresiones.accesovector.*;
import com.rudyreyes.javacraft.modelo.expresiones.funcionesNativas.*;
import com.rudyreyes.javacraft.modelo.expresiones.accesostruct.*;
import com.rudyreyes.javacraft.modelo.errores.*;


// parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

:}

action code
{:
:}

//terminales
terminal String CADENA, ENTERO, DECIMAL, ID;
terminal FINCADENA, IMPRIMIR;
terminal PAR1, PAR2, MAS, MENOS, UMENOS, MULT, DIV, MOD, POTENCIA;
terminal LLAVE1, LLAVE2, IF, ELSE, MATCH, FLECHA, DEFAULT, FOR, WHILE,DO;
terminal DOBLEIGUAL, DIFERENTE, MENOR, MENORIGUAL, MAYOR, MAYORIGUAL;
terminal NOT, XOR, OR, AND;
terminal INT, CHAR, DOUBLE, STRING, BOOL;
terminal DOSPUNTOS, IGUAL, CORCHETE1, CORCHETE2, COMA;
terminal CONST, VAR, LIST, NEW, PUNTO, APPEND, REMOVE;
terminal ROUND, LENGTH, TOSTRING, FIND, STARTWITH, VOID, STRUCT;
terminal String BOOLEAN, CARACTER, BREAK, CONTINUE, RETURN;

//no terminales
nonterminal LinkedList<Instruccion> inicio, instrucciones;
nonterminal Instruccion instruccion;
nonterminal Instruccion expresion, expresionAritmetica, expresionRelacional, expresionLogica;
nonterminal Instruccion castearExpresion, println, declaracion_variable, asignacion_variable;
nonterminal Instruccion inicializar_variable, incremento_variable, decremento_variable;
nonterminal Instruccion sentencia_if, sentencia_match;
nonterminal Instruccion ciclo_for, ciclo_while, ciclo_dowhile, actualizar_for;
nonterminal Instruccion transferencia_break, transferencia_continue;
nonterminal Instruccion declaracion_vectores, asignacion_vector;
nonterminal Instruccion declaracion_lista, append_lista;
nonterminal Instruccion funciones_nativas;
nonterminal Tipo tipos_variable;
nonterminal Boolean  mutabilidad;
nonterminal CasoMatch caso_match;
nonterminal LinkedList<CasoMatch> casos_match;
nonterminal LinkedList<Instruccion> lista_vector_u;
nonterminal LinkedList<LinkedList<Instruccion>> lista_vector_d;

//METODOS Y FUNCIONES
nonterminal Instruccion metodo, declaracion_struct;
nonterminal LinkedList<HashMap> parametros_metodo, lista_struct;
nonterminal Instruccion instruccion_start;
nonterminal LinkedList<Instruccion> parametros_llamada, parametros_struct;
nonterminal Instruccion llamada_metodo, llamada_funcion, funcion_return, instancia_struct;
nonterminal Instruccion acceso_struct, asignacion_struct;
nonterminal Object tipo_struct;

precedence left OR;
precedence left AND;
precedence left XOR;
precedence right NOT;
precedence left DOBLEIGUAL, DIFERENTE, MENOR, MENORIGUAL,MAYOR,  MAYORIGUAL;
precedence right INT, CHAR, DOUBLE;
precedence left MAS, MENOS;
precedence left MULT, DIV, MOD, POTENCIA;
precedence right UMENOS;

start with inicio;

inicio ::= instrucciones:a      {:   RESULT = a;   :}
;

instrucciones ::= instrucciones:a instruccion:b     {: RESULT = a; RESULT.add(b); :}
                | instruccion:a                     {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

instruccion ::= println:a                   {: RESULT= a; :}
             | declaracion_variable:a       {: RESULT= a; :}
             | declaracion_vectores:a       {:RESULT = a; :}
             | declaracion_lista:a          {:RESULT = a; :}
             | append_lista:a               {:RESULT = a; :}
             | asignacion_variable:a        {: RESULT= a; :}
             | asignacion_vector:a          {: RESULT= a; :}
             | incremento_variable:a        {: RESULT= a; :}
             | decremento_variable:a        {: RESULT= a; :}
             | sentencia_if :a              {: RESULT= a; :}
             | sentencia_match:a            {: RESULT= a; :}
             | ciclo_for:a                  {: RESULT= a; :}
             | ciclo_while:a                {: RESULT= a; :}
             | ciclo_dowhile:a              {: RESULT= a; :}
             | transferencia_break:a        {: RESULT= a; :}
             | transferencia_continue:a     {: RESULT= a; :}
             | metodo:a                     {: RESULT= a; :}
             | instruccion_start:a          {: RESULT= a; :}
             | llamada_metodo:a             {: RESULT= a; :}
             | declaracion_struct:a         {: RESULT= a; :}
             | instancia_struct:a           {: RESULT= a; :}
             | asignacion_struct:a          {: RESULT= a; :}
             | funcion_return:a             {: RESULT= a; :}
             | error FINCADENA
             | error 
;

println ::= IMPRIMIR PAR1 expresion:a PAR2 FINCADENA      {:   RESULT = new Println(a, aleft, aright);   :}
;

declaracion_variable ::= mutabilidad:e ID:b DOSPUNTOS tipos_variable:a  inicializar_variable:c    {: RESULT = new DeclaracionVariable(e, b, c, a, aleft, aright);   :}
                    
;

inicializar_variable ::= IGUAL expresion:c FINCADENA {:RESULT = c; :}
                    | FINCADENA {:RESULT = null; :}
;

asignacion_variable ::= ID:a IGUAL expresion:b FINCADENA  {:   RESULT=new AsignacionVariable(a, b, aleft, aright);  :}
;

incremento_variable ::= ID:a MAS MAS FINCADENA 
{: RESULT=new IncrementoDecreVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  :}
;

decremento_variable ::= ID:a MENOS MENOS FINCADENA 
{: RESULT=new IncrementoDecreVariable(a, new OperacionResta(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  :}
;

declaracion_vectores ::= mutabilidad:e ID:b DOSPUNTOS tipos_variable:a CORCHETE1 CORCHETE2 IGUAL CORCHETE1 lista_vector_u:c CORCHETE2 FINCADENA {: RESULT = new VectorUnaDimension(e,b, c, a, aleft, aright); :}
                    | mutabilidad:e ID:b DOSPUNTOS tipos_variable:a CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 lista_vector_d:c CORCHETE2 FINCADENA {: RESULT = new VectorDosDimensiones(e,b, c, a, aleft, aright); :}
;

lista_vector_u ::= lista_vector_u:a COMA expresion:b {:RESULT =a; RESULT.add(b); :}
		| expresion:a {: RESULT = new LinkedList<> (); RESULT.add(a); :}
;

lista_vector_d ::= lista_vector_d:a COMA CORCHETE1 lista_vector_u:b CORCHETE2 {:RESULT =a; RESULT.add(b); :}
                | CORCHETE1 lista_vector_u:a  CORCHETE2 {: RESULT = new LinkedList<> (); RESULT.add(a); :}
;

asignacion_vector ::= ID:a CORCHETE1 expresion:b CORCHETE2 IGUAL expresion:c FINCADENA {:   RESULT=new AsignacionVectorUnaDimension(a, b, c, aleft, aright);  :}
                    | ID:a CORCHETE1 expresion:b CORCHETE2 CORCHETE1 expresion:c CORCHETE2 IGUAL expresion:d FINCADENA {:   RESULT=new AsignacionVectorDosDimensiones(a, b, c, d, aleft, aright);  :}
;

declaracion_lista ::= LIST MENOR tipos_variable:a MAYOR ID:b IGUAL NEW LIST PAR1 PAR2 FINCADENA {:RESULT = new DeclaracionLista(b,a, aleft, aright ); :}

;


append_lista ::= ID:a PUNTO APPEND PAR1 expresion:b PAR2 FINCADENA {: RESULT = new AppendLista(a, b, aleft, aright);:}

;
sentencia_if ::= IF PAR1 expresion:a PAR2 LLAVE1 instrucciones:b LLAVE2  {:   RESULT = new SentenciaIf(a, b, aleft, aright);   :}
                | IF PAR1 expresion:a PAR2 LLAVE1 instrucciones:b LLAVE2 ELSE LLAVE1 instrucciones:c LLAVE2 {:   RESULT = new SentenciaIfElse(a, b, c, aleft, aright);   :}
                | IF PAR1 expresion:a PAR2 LLAVE1 instrucciones:b LLAVE2 ELSE sentencia_if:c {:   RESULT = new SentenciaElseIF(a, b, c, aleft, aright);   :}
;


sentencia_match ::= MATCH expresion:a LLAVE1 casos_match:b DEFAULT  FLECHA LLAVE1 instrucciones:c LLAVE2 LLAVE2 {:
    RESULT = new SentenciaMatch(a, b, c, aleft, aright);
 :}
                | MATCH expresion:a LLAVE1 casos_match:b  LLAVE2 {:
    RESULT = new SentenciaMatch(a, b, null, aleft, aright);
 :}

                | MATCH expresion:a LLAVE1 DEFAULT  FLECHA LLAVE1 instrucciones:c LLAVE2  LLAVE2 {:
    RESULT = new SentenciaMatch(a, null, c, aleft, aright);
 :}


;

casos_match ::= casos_match:a caso_match:b {:RESULT = a; RESULT.add(b);:}
            | caso_match:a {:RESULT = new LinkedList<>(); RESULT.add(a);:}
;

caso_match ::= expresion:a FLECHA LLAVE1 instrucciones:b LLAVE2  {:RESULT = new CasoMatch(a, b);:}
;

ciclo_for ::= FOR PAR1 asignacion_variable:a expresion:b FINCADENA actualizar_for:c PAR2 LLAVE1 instrucciones:d LLAVE2     
{:   RESULT = new SentenciaFor(a, b, c, d, aleft, aright);   :}

;

actualizar_for ::= ID:a IGUAL expresion:b  {:   RESULT=new AsignacionVariable(a, b, aleft, aright);  :}
                |ID:a MAS MAS  
{: RESULT=new IncrementoDecreVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  :}
                | ID:a MENOS MENOS 
{: RESULT=new IncrementoDecreVariable(a, new OperacionResta(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  :}

;


ciclo_while ::= WHILE PAR1 expresion:a PAR2 LLAVE1 instrucciones:b LLAVE2  {:   RESULT = new SentenciaWhile(a, b, aleft, aright);   :}
;

ciclo_dowhile ::= DO LLAVE1  instrucciones:b  LLAVE2 WHILE PAR1 expresion:a PAR2  FINCADENA {:   RESULT = new SentenciaDoWhile(a, b, aleft, aright);   :}
;


transferencia_break::=  BREAK:a FINCADENA      {:    RESULT = new SentenciaBreak(aleft, aright);     :}
;

transferencia_continue::=  CONTINUE:a FINCADENA      {:    RESULT = new SentenciaContinue(aleft, aright);     :}
;

metodo ::= tipos_variable:a ID:b PAR1 parametros_metodo:p PAR2 LLAVE1 instrucciones:c LLAVE2    {:   RESULT= new Metodo(b, p, c, a, aleft, aright );   :}
        |  tipos_variable:a ID:b PAR1 PAR2 LLAVE1 instrucciones:c LLAVE2             {:   RESULT= new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright );   :}
    
;

parametros_metodo ::= parametros_metodo:a COMA tipos_variable:b ID:c   {:  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        :}
        | tipos_variable:a ID:b                  {:  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        :}
;

declaracion_struct ::= STRUCT LLAVE1 lista_struct:b LLAVE2 ID:a FINCADENA {:RESULT = new DeclaracionStruct(a,b,  aleft, aright); :}
;

lista_struct ::= lista_struct:a ID:b DOSPUNTOS tipo_struct:c FINCADENA {:  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", b);
                                            hm2.put("tipo", c);
                                            hm2.put ("valor", null);
                                            RESULT.add(hm2);
                                        :}
                |ID:a DOSPUNTOS tipo_struct:b FINCADENA {:  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",a);
                                            hm.put("tipo", b);
                                            hm.put ("valor", null);
                                            RESULT.add(hm);
                                        :}
;

tipo_struct ::= tipos_variable:a {:RESULT = a; :}
            | ID:a {:RESULT = a; :}

;

instancia_struct ::=  mutabilidad:a ID:b DOSPUNTOS ID:c IGUAL LLAVE1 parametros_struct:d LLAVE2 FINCADENA 
                        {: RESULT = new InstanciaStruct(a,b,c,d, aleft, aright);:}

;

parametros_struct ::= parametros_struct:a COMA ID:b DOSPUNTOS expresion:c {:  RESULT = a;
                                                    RESULT.add(c);
                                                :}
                    | ID:b DOSPUNTOS expresion:c {:  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(c);
                                                :}

;

asignacion_struct ::= ID:a PUNTO ID:b IGUAL expresion:c FINCADENA {: RESULT = new AsignacionBasicaStruct(a,b,c, aleft, aright); :}
                    | ID:a PUNTO ID:b PUNTO ID:c IGUAL expresion:d FINCADENA {: RESULT = new AsignacionStructAnidado(a,b,c, d, aleft, aright); :}
;

instruccion_start ::=  STARTWITH ID:a PAR1 parametros_llamada:b PAR2 FINCADENA     {:   RESULT = new StartWith(a, b, aleft, aright );   :}
            | STARTWITH ID:a PAR1 PAR2 FINCADENA                  {:   RESULT = new StartWith(a, new LinkedList<Instruccion>(), aleft, aright );   :}

;

llamada_metodo ::= ID:a PAR1 parametros_llamada:b PAR2 FINCADENA    {: RESULT= new LlamadaMetodo(a,b, aleft, aright); :}
                | ID:a PAR1 PAR2 FINCADENA                          {:RESULT= new LlamadaMetodo(a, new LinkedList<Instruccion>(), aleft, aright); :}
;

llamada_funcion ::= ID:a PAR1 parametros_llamada:b PAR2     {: RESULT= new LlamadaMetodo(a,b, aleft, aright); :}
                | ID:a PAR1 PAR2                           {:RESULT= new LlamadaMetodo(a, new LinkedList<Instruccion>(), aleft, aright); :}
;


parametros_llamada ::=  parametros_llamada:a COMA expresion:e    {:  RESULT = a;
                                                    RESULT.add(e);
                                                :}
            | expresion:a                       {:  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                :}

;

funcion_return ::= RETURN expresion:a FINCADENA {:RESULT = new FuncionReturn(a, aleft, aright); :}
                | RETURN:a FINCADENA {:RESULT = new FuncionReturn(aleft, aright); :}
;


tipos_variable ::= INT       {:   RESULT=new Tipo(TipoDato.ENTERO);   :}
                | DOUBLE    {:   RESULT=new Tipo(TipoDato.DECIMAL);   :}
                | STRING    {:   RESULT=new Tipo(TipoDato.CADENA);   :}
                | CHAR      {:   RESULT=new Tipo(TipoDato.CARACTER);   :}
                | BOOL      {:   RESULT=new Tipo(TipoDato.BOOLEANO);   :}
                | VOID      {:   RESULT=new Tipo(TipoDato.VOID);   :}
;

mutabilidad ::= CONST {: RESULT = Boolean.FALSE; :}
            | VAR {: RESULT = Boolean.TRUE; :}
;

expresion ::=  expresionAritmetica:a        {: RESULT = a; :}
            | expresionRelacional: a        {: RESULT = a; :}
            | expresionLogica: a            {: RESULT = a; :}
            | funciones_nativas: a          {: RESULT = a; :}
            | castearExpresion: a           {: RESULT =a; :}
            | llamada_funcion :a            {: RESULT= a; :}
            | acceso_struct:a               {: RESULT= a; :}
            | ENTERO:a                      {:   RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright );   :}
            | DECIMAL:a                     {:   RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright );   :}
            | CADENA:a                      {:   RESULT = new Nativo(a, new Tipo(TipoDato.CADENA), aleft, aright );   :}
            | CARACTER:a                    {:   RESULT = new Nativo(a, new Tipo(TipoDato.CARACTER), aleft, aright );   :}
            | BOOLEAN:a                     {:   RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(TipoDato.BOOLEANO), aleft, aright );   :}
            | ID:a                          {:   RESULT = new AccesoVariable(a, aleft, aright);   :}
            | ID:a CORCHETE1 expresion:b CORCHETE2 {: RESULT = new AccesoVectorUnaDimension(a, b, aleft, aright );:}
            | ID:a CORCHETE1 expresion:b CORCHETE2 CORCHETE1 expresion:c CORCHETE2 {: RESULT = new AccesoVectorDosDimensiones(a, b, c, aleft, aright );:}
            | ID:a PUNTO REMOVE PAR1 expresion:b PAR2 {:RESULT = new RemoveLista(a, b, aleft, aright);  :}
;


expresionAritmetica ::= MENOS expresion:a             {:   RESULT = new OperacionNegacionU(a, aleft, aright);   :} %prec UMENOS
            | expresion:a MAS expresion:b           {:   RESULT = new OperacionSuma(a, b, aleft, aright);   :}
            | expresion:a MENOS expresion:b         {:  RESULT = new OperacionResta(a, b, aleft, aright);  :}
            | expresion:a MULT expresion:b          {:   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   :}
            | expresion:a DIV expresion:b           {:  RESULT = new OperacionDivision (a, b, aleft, aright);   :}
            | expresion:a MOD expresion:b           {:  RESULT = new OperacionModulo (a, b, aleft, aright);   :}
            | expresion:a POTENCIA expresion:b      {:  RESULT = new OperacionPotencia (a, b, aleft, aright);   :}
            | PAR1 expresion:a PAR2                 {:   RESULT = a;   :}
;

expresionRelacional ::= expresion:a DOBLEIGUAL expresion:b   {:   RESULT = new Igualacion(a, b, aleft, aright);   :} %prec DOBLEIGUAL
                    | expresion:a DIFERENTE expresion:b     {:   RESULT = new Diferenciacion(a, b, aleft, aright);   :} %prec DIFERENTE
                    | expresion:a MENOR expresion:b         {:   RESULT = new MenorQue(a, b, aleft, aright);   :} %prec MENOR
                    | expresion:a MENORIGUAL expresion:b    {:   RESULT = new MenorIgualQue(a, b, aleft, aright);   :} %prec MENORIGUAL
                    | expresion:a MAYOR expresion:b         {:   RESULT = new MayorQue(a, b, aleft, aright);   :} %prec MAYOR
                    | expresion:a MAYORIGUAL expresion:b    {:   RESULT = new MayorIgualQue(a, b, aleft, aright);   :} %prec MAYORIGUAL

;

expresionLogica ::= NOT expresion:a                 {:   RESULT = new OperadorNot(a, aleft, aright);   :} %prec NOT
                | expresion:a XOR expresion:b       {:   RESULT = new OperadorXor(a, b, aleft, aright);   :} %prec XOR
                | expresion:a AND expresion:b       {:   RESULT = new OperadorAnd(a, b, aleft, aright);   :} %prec AND
                | expresion:a OR expresion:b        {:   RESULT = new OperadorOr(a, b, aleft, aright);   :} %prec OR

;

funciones_nativas ::= ROUND PAR1 expresion:a PAR2               {:   RESULT = new FuncionRound(a, aleft, aright);   :}
                    | LENGTH PAR1 expresion:a PAR2              {:   RESULT = new FuncionLength(a, aleft, aright);   :}
                    | TOSTRING PAR1 expresion:a PAR2            {:   RESULT = new FuncionToString(a, aleft, aright);   :}
                    | ID:a PUNTO FIND PAR1 expresion:b PAR2     {:   RESULT = new FuncionFind(a, b, aleft, aright);   :}
;

castearExpresion ::= PAR1 INT PAR2 expresion:a      {:   RESULT = new Casteo(a, TipoCasteo.ENTERO, aleft, aright);   :} %prec INT
                | PAR1 DOUBLE PAR2 expresion:a      {:   RESULT = new Casteo(a, TipoCasteo.DECIMAL, aleft, aright);   :} %prec DOUBLE
                | PAR1 CHAR PAR2 expresion:a        {:   RESULT = new Casteo(a, TipoCasteo.CARACTER, aleft, aright);   :} %prec CHAR
;

acceso_struct ::= ID:a PUNTO ID:b {: RESULT = new AccesoStructBasico(a, b, aleft, aright);   :}
                | ID:a PUNTO ID:b PUNTO ID:c {: RESULT = new AccesoStructAnidado(a, b, c, aleft, aright);   :}
;