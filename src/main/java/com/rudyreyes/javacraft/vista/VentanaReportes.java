/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.rudyreyes.javacraft.vista;

import com.rudyreyes.javacraft.modelo.errores.Errores;
import com.rudyreyes.javacraft.modelo.simbolo.EntornoSimbolos;
import com.rudyreyes.javacraft.modelo.simbolo.Simbolo;
import com.rudyreyes.javacraft.modelo.simbolo.TipoDato;
import java.awt.Desktop;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author rudyo
 */
public class VentanaReportes extends javax.swing.JDialog {

    LinkedList<Errores> listaErrores;
    List<EntornoSimbolos> listaSimbolos;
    String insAST;
    /**
     * Creates new form VentanaReportes
     */
    public VentanaReportes(java.awt.Frame parent, boolean modal, LinkedList<Errores> lista, List<EntornoSimbolos> listaSimbolos, String ast) {
        super(parent, modal);
        this.listaErrores = lista;
        this.listaSimbolos = listaSimbolos;
        this.insAST = ast;
        initComponents();
        
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnTablaErrores = new javax.swing.JButton();
        btnTablaSimbolos = new javax.swing.JButton();
        btnGenerarAST = new javax.swing.JButton();
        scrollTablaReportes = new javax.swing.JScrollPane();
        tablaReportes = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reportes JavaCraft");

        jPanel1.setBackground(new java.awt.Color(153, 255, 204));

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Reportes");

        btnTablaErrores.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        btnTablaErrores.setText("Tabla de Errores");
        btnTablaErrores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTablaErroresActionPerformed(evt);
            }
        });

        btnTablaSimbolos.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        btnTablaSimbolos.setText("Tabla de Simbolos");
        btnTablaSimbolos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTablaSimbolosActionPerformed(evt);
            }
        });

        btnGenerarAST.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        btnGenerarAST.setText("Generar AST");
        btnGenerarAST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarASTActionPerformed(evt);
            }
        });

        scrollTablaReportes.setBackground(new java.awt.Color(255, 255, 255));

        tablaReportes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaReportes.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        tablaReportes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollTablaReportes.setViewportView(tablaReportes);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnTablaSimbolos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGenerarAST, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnTablaErrores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(scrollTablaReportes, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                .addGap(32, 32, 32))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnTablaErrores)
                        .addGap(61, 61, 61)
                        .addComponent(btnTablaSimbolos)
                        .addGap(60, 60, 60)
                        .addComponent(btnGenerarAST))
                    .addComponent(scrollTablaReportes, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTablaErroresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTablaErroresActionPerformed
        // TODO add your handling code here:
        String[] columnas = {"#", "Tipo", "Descripción", "Línea", "Columna"};
        DefaultTableModel modelo = new DefaultTableModel(columnas, 0);
        tablaReportes.setModel(modelo);
        
        TableColumnModel columnModel = tablaReportes.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(35); // Ancho preferido para la columna "#"
        columnModel.getColumn(1).setPreferredWidth(150); // Ancho preferido para la columna "Tipo"
        columnModel.getColumn(2).setPreferredWidth(300); // Ancho preferido para la columna "Descripción"
        columnModel.getColumn(3).setPreferredWidth(50); // Ancho preferido para la columna "Línea"
        columnModel.getColumn(4).setPreferredWidth(50); // Ancho preferido para la columna "Columna"
        
        int contador = 1;
        for(var i : listaErrores){
            modelo.addRow(new Object[]{
                   contador,
                   i.getTipo(),
                   i.getDescripcion(),
                   i.getLinea(),
                   i.getColumna()
                });
            
            contador++;
        }
        
        
    }//GEN-LAST:event_btnTablaErroresActionPerformed

    private void btnTablaSimbolosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTablaSimbolosActionPerformed
        // TODO add your handling code here:
         String[] columnas = {"#","Id", "Tipo","Tipo de Dato", "Entorno" ,"Valor", "Línea", "Columna"};
        DefaultTableModel modelo = new DefaultTableModel(columnas, 0);
        
        tablaReportes.setModel(modelo);

        int contador = 1;

        for (EntornoSimbolos entornoSimbolos : listaSimbolos) {
            //System.out.println("Entorno: " + entornoSimbolos.getNombreEntorno());
            if (!entornoSimbolos.getSimbolos().isEmpty()) {

                Collections.sort(entornoSimbolos.getSimbolos(), new Comparator<Simbolo>() {
                    @Override
                    public int compare(Simbolo s1, Simbolo s2) {
                        return Integer.compare(s1.getLinea(), s2.getLinea());
                    }
                });
                for (Simbolo simbolo : entornoSimbolos.getSimbolos()) {
                    //System.out.println(simbolo.imprimirSimbolo());

                    
                    modelo.addRow(new Object[]{
                        contador,
                        simbolo.getId(),
                        "Variable",
                        simbolo.getTipo().getTipo(),
                        entornoSimbolos.getNombreEntorno(),
                        this.obtenerValor(simbolo.getValor(),simbolo.getTipo().getTipo()),
                        simbolo.getLinea(),
                        simbolo.getColumna()
                    });

                    contador++;
                }

            }
        }
    }//GEN-LAST:event_btnTablaSimbolosActionPerformed

    private String obtenerValor(Object valor, TipoDato tipo){
        if(valor instanceof Object[]){
            Object [] resultado = (Object []) valor;
            String vector = "[";
            for(int i=0; i<resultado.length; i++){
                vector += resultado[(int)i] + ", ";
            }
            return vector+= "]"; 
        
        }else if(valor instanceof List && tipo==TipoDato.VOID){
            LinkedList<HashMap> acceso = (LinkedList<HashMap>) valor;
            String struct = "{";
            
            for(int i =0; i< acceso.size(); i++){
                String nombreC =(String) acceso.get(i).get("id");
                    var valorC =  acceso.get(i).get("valor");
                    
                    if(valorC instanceof List){
                        struct += nombreC +": {";
                        LinkedList<HashMap> acceso2 = (LinkedList<HashMap>) valorC;

                        for (int j = 0; j < acceso2.size(); j++) {
                                String nombreC2 = (String) acceso2.get(j).get("id");
                                var valorC2 = acceso2.get(j).get("valor");
                                struct += nombreC2 + ":"+valorC2 +",";
                        }
                        struct += " }";
                        
                    }else{
                        struct += nombreC + ":"+valorC +",";
                    }
                
                    
            }
            return struct += "}";
        
        }
        
        return valor.toString();
    }
    
    
    private void btnGenerarASTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarASTActionPerformed
        // TODO add your handling code here:
        if (insAST != null) {
            String dotFilePath = "ast.dot";
            String outputFormat = "ast.png";
            generarArchivoDOT(dotFilePath);
            generarImagenAST(dotFilePath, outputFormat);
            try {
                String imagePath;
                File imageFile = new File(outputFormat);
                Desktop desktop = Desktop.getDesktop();
                desktop.open(imageFile);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }else{
            JOptionPane.showMessageDialog(null, "No se pudo generar el ast");
        }
        
    }//GEN-LAST:event_btnGenerarASTActionPerformed

    public  void generarArchivoDOT(String dotFilePath) {
        try (FileWriter writer = new FileWriter(dotFilePath)) {
            writer.write(insAST);
            writer.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public static void generarImagenAST(String dotFilePath, String nombreImagen) {
        String command = "dot -T png -Gratio=fill -o " + nombreImagen + " " + dotFilePath;
        try {
            Process process = Runtime.getRuntime().exec(command);
            int exitCode = process.waitFor();
            if (exitCode == 0) {
                JOptionPane.showMessageDialog(null, "Imagen generada");
            } else {
                JOptionPane.showMessageDialog(null, "Error al generar la imagen");
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
    
    public String convertirValorAString(Object valor) {
        if (valor == null) {
            return "null";
        }
        if (valor instanceof String) {
            return (String) valor;
        }
        if (valor instanceof Integer) {
            return Integer.toString((Integer) valor);
        }
        if (valor instanceof Boolean) {
            return Boolean.toString((Boolean) valor);
        }
        if (valor instanceof Double) {
            return Double.toString((Double) valor);
        }
        if (valor instanceof Character) {
            return Character.toString((Character) valor);
        }
        // Agrega más condiciones según los tipos de tus objetos...
        return valor.toString();  // Valor por defecto si no se reconoce el tipo
    }
    
    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerarAST;
    private javax.swing.JButton btnTablaErrores;
    private javax.swing.JButton btnTablaSimbolos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane scrollTablaReportes;
    private javax.swing.JTable tablaReportes;
    // End of variables declaration//GEN-END:variables
}
