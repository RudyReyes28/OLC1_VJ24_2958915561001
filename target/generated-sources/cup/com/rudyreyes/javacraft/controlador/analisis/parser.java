
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.rudyreyes.javacraft.controlador.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.javacraft.modelo.abstracto.Instruccion;
import com.rudyreyes.javacraft.modelo.simbolo.*;
import java.util.HashMap;
import com.rudyreyes.javacraft.modelo.instrucciones.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciaControl.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciasTransferencia.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciasCiclicas.*;
import com.rudyreyes.javacraft.modelo.instrucciones.vectores.*;
import com.rudyreyes.javacraft.modelo.instrucciones.listas.*;
import com.rudyreyes.javacraft.modelo.instrucciones.metodos.*;
import com.rudyreyes.javacraft.modelo.instrucciones.structs.*;
import com.rudyreyes.javacraft.modelo.expresiones.Nativo;
import com.rudyreyes.javacraft.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.javacraft.modelo.expresiones.relacionales.*;
import com.rudyreyes.javacraft.modelo.expresiones.logicas.*;
import com.rudyreyes.javacraft.modelo.expresiones.casteos.*;
import com.rudyreyes.javacraft.modelo.expresiones.variables.*;
import com.rudyreyes.javacraft.modelo.expresiones.accesovector.*;
import com.rudyreyes.javacraft.modelo.expresiones.funcionesNativas.*;
import com.rudyreyes.javacraft.modelo.expresiones.accesostruct.*;
import com.rudyreyes.javacraft.modelo.errores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\012\007\000\002\013\007\000\002\015\005" +
    "\000\002\015\003\000\002\014\006\000\002\016\006\000" +
    "\002\017\006\000\002\030\015\000\002\030\017\000\002" +
    "\041\005\000\002\041\003\000\002\042\007\000\002\042" +
    "\005\000\002\031\011\000\002\031\014\000\002\032\015" +
    "\000\002\033\011\000\002\020\011\000\002\020\015\000" +
    "\002\020\013\000\002\021\014\000\002\021\007\000\002" +
    "\021\013\000\002\040\004\000\002\040\003\000\002\037" +
    "\007\000\002\022\014\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\023\011\000\002\024\013\000" +
    "\002\026\004\000\002\027\004\000\002\043\012\000\002" +
    "\043\011\000\002\045\006\000\002\045\004\000\002\044" +
    "\010\000\002\046\007\000\002\046\006\000\002\060\003" +
    "\000\002\060\003\000\002\055\013\000\002\051\007\000" +
    "\002\051\005\000\002\057\010\000\002\057\012\000\002" +
    "\047\010\000\002\047\007\000\002\052\007\000\002\052" +
    "\006\000\002\053\006\000\002\053\005\000\002\050\005" +
    "\000\002\050\003\000\002\054\005\000\002\054\004\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\036" +
    "\003\000\002\036\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\006\000\002\005\011" +
    "\000\002\005\010\000\002\006\004\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\010\004\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\034\006\000\002\034\006\000\002\034\006\000\002\034" +
    "\010\000\002\011\006\000\002\011\006\000\002\011\006" +
    "\000\002\056\005\000\002\056\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0167\000\056\003\037\007\032\011\011\025\031\027" +
    "\022\032\021\033\054\034\065\047\020\050\006\051\015" +
    "\052\061\053\026\061\007\062\064\063\055\074\036\075" +
    "\045\076\063\101\044\102\016\103\035\001\002\000\062" +
    "\002\uffea\003\uffea\007\uffea\011\uffea\024\uffea\025\uffea\027" +
    "\uffea\032\uffea\033\uffea\034\uffea\047\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\uffea\061\uffea\062\uffea\063\uffea\074\uffea\075" +
    "\uffea\076\uffea\101\uffea\102\uffea\103\uffea\001\002\000\062" +
    "\002\uffef\003\uffef\007\uffef\011\uffef\024\uffef\025\uffef\027" +
    "\uffef\032\uffef\033\uffef\034\uffef\047\uffef\050\uffef\051\uffef" +
    "\052\uffef\053\uffef\061\uffef\062\uffef\063\uffef\074\uffef\075" +
    "\uffef\076\uffef\101\uffef\102\uffef\103\uffef\001\002\000\014" +
    "\007\uffa7\010\uffa7\041\uffa7\055\uffa7\056\uffa7\001\002\000" +
    "\004\007\uffa4\001\002\000\062\002\uffe9\003\uffe9\007\uffe9" +
    "\011\uffe9\024\uffe9\025\uffe9\027\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\061\uffe9" +
    "\062\uffe9\063\uffe9\074\uffe9\075\uffe9\076\uffe9\101\uffe9\102" +
    "\uffe9\103\uffe9\001\002\000\004\012\u0166\001\002\000\062" +
    "\002\ufffb\003\ufffb\007\ufffb\011\ufffb\024\ufffb\025\ufffb\027" +
    "\ufffb\032\ufffb\033\ufffb\034\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\061\ufffb\062\ufffb\063\ufffb\074\ufffb\075" +
    "\ufffb\076\ufffb\101\ufffb\102\ufffb\103\ufffb\001\002\000\004" +
    "\007\u0156\001\002\000\060\002\000\003\037\007\032\011" +
    "\011\025\031\027\022\032\021\033\054\034\065\047\020" +
    "\050\006\051\015\052\061\053\026\061\007\062\064\063" +
    "\055\074\036\075\045\076\063\101\044\102\016\103\035" +
    "\001\002\000\014\007\uffa9\010\uffa9\041\uffa9\055\uffa9\056" +
    "\uffa9\001\002\000\004\010\u0155\001\002\000\062\002\uffe8" +
    "\003\uffe8\007\uffe8\011\uffe8\024\uffe8\025\uffe8\027\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\061\uffe8\062\uffe8\063\uffe8\074\uffe8\075\uffe8\076" +
    "\uffe8\101\uffe8\102\uffe8\103\uffe8\001\002\000\014\007\uffaa" +
    "\010\uffaa\041\uffaa\055\uffaa\056\uffaa\001\002\000\004\012" +
    "\u0144\001\002\000\032\004\077\005\116\006\100\007\106" +
    "\012\115\015\075\043\102\070\111\071\114\072\105\077" +
    "\112\100\110\001\002\000\062\002\uffee\003\uffee\007\uffee" +
    "\011\uffee\024\uffee\025\uffee\027\uffee\032\uffee\033\uffee\034" +
    "\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\061\uffee" +
    "\062\uffee\063\uffee\074\uffee\075\uffee\076\uffee\101\uffee\102" +
    "\uffee\103\uffee\001\002\000\004\002\u012c\001\002\000\062" +
    "\002\ufff4\003\ufff4\007\ufff4\011\ufff4\024\ufff4\025\ufff4\027" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\047\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\061\ufff4\062\ufff4\063\ufff4\074\ufff4\075" +
    "\ufff4\076\ufff4\101\ufff4\102\ufff4\103\ufff4\001\002\000\014" +
    "\007\uffa6\010\uffa6\041\uffa6\055\uffa6\056\uffa6\001\002\000" +
    "\062\002\uffec\003\uffec\007\uffec\011\uffec\024\uffec\025\uffec" +
    "\027\uffec\032\uffec\033\uffec\034\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\061\uffec\062\uffec\063\uffec\074\uffec" +
    "\075\uffec\076\uffec\101\uffec\102\uffec\103\uffec\001\002\000" +
    "\062\002\ufff3\003\ufff3\007\ufff3\011\ufff3\024\ufff3\025\ufff3" +
    "\027\ufff3\032\ufff3\033\ufff3\034\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\061\ufff3\062\ufff3\063\ufff3\074\ufff3" +
    "\075\ufff3\076\ufff3\101\ufff3\102\ufff3\103\ufff3\001\002\000" +
    "\004\012\u0121\001\002\000\016\012\374\014\371\015\373" +
    "\055\372\056\367\065\370\001\002\000\062\002\ufffe\003" +
    "\ufffe\007\ufffe\011\ufffe\024\ufffe\025\ufffe\027\ufffe\032\ufffe" +
    "\033\ufffe\034\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\074\ufffe\075\ufffe\076\ufffe" +
    "\101\ufffe\102\ufffe\103\ufffe\001\002\000\062\002\uffeb\003" +
    "\uffeb\007\uffeb\011\uffeb\024\uffeb\025\uffeb\027\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\061\uffeb\062\uffeb\063\uffeb\074\uffeb\075\uffeb\076\uffeb" +
    "\101\uffeb\102\uffeb\103\uffeb\001\002\000\034\004\077\005" +
    "\116\006\100\007\106\010\364\012\115\015\075\043\102" +
    "\070\111\071\114\072\105\077\112\100\110\001\002\000" +
    "\004\007\355\001\002\000\064\002\uffe5\003\uffe5\007\uffe5" +
    "\010\354\011\uffe5\024\uffe5\025\uffe5\027\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\074\uffe5\075\uffe5\076\uffe5\101" +
    "\uffe5\102\uffe5\103\uffe5\001\002\000\062\002\ufff0\003\ufff0" +
    "\007\ufff0\011\ufff0\024\ufff0\025\ufff0\027\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\061\ufff0\062\ufff0\063\ufff0\074\ufff0\075\ufff0\076\ufff0\101" +
    "\ufff0\102\ufff0\103\ufff0\001\002\000\062\002\uffed\003\uffed" +
    "\007\uffed\011\uffed\024\uffed\025\uffed\027\uffed\032\uffed\033" +
    "\uffed\034\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\061\uffed\062\uffed\063\uffed\074\uffed\075\uffed\076\uffed\101" +
    "\uffed\102\uffed\103\uffed\001\002\000\062\002\ufff8\003\ufff8" +
    "\007\ufff8\011\ufff8\024\ufff8\025\ufff8\027\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\061\ufff8\062\ufff8\063\ufff8\074\ufff8\075\ufff8\076\ufff8\101" +
    "\ufff8\102\ufff8\103\ufff8\001\002\000\062\002\ufffa\003\ufffa" +
    "\007\ufffa\011\ufffa\024\ufffa\025\ufffa\027\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa" +
    "\061\ufffa\062\ufffa\063\ufffa\074\ufffa\075\ufffa\076\ufffa\101" +
    "\ufffa\102\ufffa\103\ufffa\001\002\000\004\010\353\001\002" +
    "\000\014\007\uffa5\010\uffa5\041\uffa5\055\uffa5\056\uffa5\001" +
    "\002\000\004\007\276\001\002\000\062\002\ufff6\003\ufff6" +
    "\007\ufff6\011\ufff6\024\ufff6\025\ufff6\027\ufff6\032\ufff6\033" +
    "\ufff6\034\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\074\ufff6\075\ufff6\076\ufff6\101" +
    "\ufff6\102\ufff6\103\ufff6\001\002\000\062\002\ufff1\003\ufff1" +
    "\007\ufff1\011\ufff1\024\ufff1\025\ufff1\027\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\074\ufff1\075\ufff1\076\ufff1\101" +
    "\ufff1\102\ufff1\103\ufff1\001\002\000\062\002\ufffd\003\ufffd" +
    "\007\ufffd\011\ufffd\024\ufffd\025\ufffd\027\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\061\ufffd\062\ufffd\063\ufffd\074\ufffd\075\ufffd\076\ufffd\101" +
    "\ufffd\102\ufffd\103\ufffd\001\002\000\062\002\ufff9\003\ufff9" +
    "\007\ufff9\011\ufff9\024\ufff9\025\ufff9\027\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9" +
    "\061\ufff9\062\ufff9\063\ufff9\074\ufff9\075\ufff9\076\ufff9\101" +
    "\ufff9\102\ufff9\103\ufff9\001\002\000\062\002\uffe7\003\uffe7" +
    "\007\uffe7\011\uffe7\024\uffe7\025\uffe7\027\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\074\uffe7\075\uffe7\076\uffe7\101" +
    "\uffe7\102\uffe7\103\uffe7\001\002\000\004\012\270\001\002" +
    "\000\004\037\256\001\002\000\062\002\ufff2\003\ufff2\007" +
    "\ufff2\011\ufff2\024\ufff2\025\ufff2\027\ufff2\032\ufff2\033\ufff2" +
    "\034\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\074\ufff2\075\ufff2\076\ufff2\101\ufff2" +
    "\102\ufff2\103\ufff2\001\002\000\062\002\ufff5\003\ufff5\007" +
    "\ufff5\011\ufff5\024\ufff5\025\ufff5\027\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\061" +
    "\ufff5\062\ufff5\063\ufff5\074\ufff5\075\ufff5\076\ufff5\101\ufff5" +
    "\102\ufff5\103\ufff5\001\002\000\062\002\ufffc\003\ufffc\007" +
    "\ufffc\011\ufffc\024\ufffc\025\ufffc\027\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\061" +
    "\ufffc\062\ufffc\063\ufffc\074\ufffc\075\ufffc\076\ufffc\101\ufffc" +
    "\102\ufffc\103\ufffc\001\002\000\014\007\uffa8\010\uffa8\041" +
    "\uffa8\055\uffa8\056\uffa8\001\002\000\062\002\ufff7\003\ufff7" +
    "\007\ufff7\011\ufff7\024\ufff7\025\ufff7\027\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\061\ufff7\062\ufff7\063\ufff7\074\ufff7\075\ufff7\076\ufff7\101" +
    "\ufff7\102\ufff7\103\ufff7\001\002\000\004\023\237\001\002" +
    "\000\004\007\uffa3\001\002\000\004\023\066\001\002\000" +
    "\056\003\037\007\032\011\011\025\031\027\022\032\021" +
    "\033\054\034\065\047\020\050\006\051\015\052\061\053" +
    "\026\061\007\062\064\063\055\074\036\075\045\076\063" +
    "\101\044\102\016\103\035\001\002\000\060\003\037\007" +
    "\032\011\011\024\070\025\031\027\022\032\021\033\054" +
    "\034\065\047\020\050\006\051\015\052\061\053\026\061" +
    "\007\062\064\063\055\074\036\075\045\076\063\101\044" +
    "\102\016\103\035\001\002\000\004\033\072\001\002\000" +
    "\062\002\uffff\003\uffff\007\uffff\011\uffff\024\uffff\025\uffff" +
    "\027\uffff\032\uffff\033\uffff\034\uffff\047\uffff\050\uffff\051" +
    "\uffff\052\uffff\053\uffff\061\uffff\062\uffff\063\uffff\074\uffff" +
    "\075\uffff\076\uffff\101\uffff\102\uffff\103\uffff\001\002\000" +
    "\004\012\073\001\002\000\032\004\077\005\116\006\100" +
    "\007\106\012\115\015\075\043\102\070\111\071\114\072" +
    "\105\077\112\100\110\001\002\000\056\010\uffa1\013\uffa1" +
    "\014\uffa1\015\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\030\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\044\uffa1\045\uffa1\046\uffa1\057\uffa1\060" +
    "\uffa1\001\002\000\032\004\077\005\116\006\100\007\106" +
    "\012\115\015\075\043\102\070\111\071\114\072\105\077" +
    "\112\100\110\001\002\000\056\010\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024" +
    "\uffa0\030\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\044\uffa0\045\uffa0\046\uffa0\057\uffa0\060\uffa0\001" +
    "\002\000\056\010\uff99\013\uff99\014\uff99\015\uff99\017\uff99" +
    "\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\030\uff99\035" +
    "\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\044\uff99" +
    "\045\uff99\046\uff99\057\uff99\060\uff99\001\002\000\056\010" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\030\uff9a\035\uff9a\036\uff9a\037" +
    "\uff9a\040\uff9a\041\uff9a\042\uff9a\044\uff9a\045\uff9a\046\uff9a" +
    "\057\uff9a\060\uff9a\001\002\000\042\013\234\014\137\015" +
    "\131\017\135\020\141\021\134\022\132\035\136\036\143" +
    "\037\133\040\127\041\142\042\140\044\130\045\144\046" +
    "\126\001\002\000\032\004\077\005\116\006\100\007\106" +
    "\012\115\015\075\043\102\070\111\071\114\072\105\077" +
    "\112\100\110\001\002\000\056\010\uff9e\013\uff9e\014\uff9e" +
    "\015\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\030\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\044\uff9e\045\uff9e\046\uff9e\057\uff9e\060\uff9e\001" +
    "\002\000\056\010\uffa2\013\uffa2\014\uffa2\015\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\030\uffa2\035" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\044\uffa2" +
    "\045\uffa2\046\uffa2\057\uffa2\060\uffa2\001\002\000\004\012" +
    "\230\001\002\000\064\010\uff96\012\201\013\uff96\014\uff96" +
    "\015\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024" +
    "\uff96\030\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96" +
    "\042\uff96\044\uff96\045\uff96\046\uff96\056\177\057\uff96\060" +
    "\uff96\065\200\001\002\000\056\010\uff9c\013\uff9c\014\uff9c" +
    "\015\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024" +
    "\uff9c\030\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\044\uff9c\045\uff9c\046\uff9c\057\uff9c\060\uff9c\001" +
    "\002\000\056\010\uff98\013\uff98\014\uff98\015\uff98\017\uff98" +
    "\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\030\uff98\035" +
    "\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\044\uff98" +
    "\045\uff98\046\uff98\057\uff98\060\uff98\001\002\000\004\012" +
    "\174\001\002\000\056\010\uff97\013\uff97\014\uff97\015\uff97" +
    "\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\030" +
    "\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97" +
    "\044\uff97\045\uff97\046\uff97\057\uff97\060\uff97\001\002\000" +
    "\056\010\uff9d\013\uff9d\014\uff9d\015\uff9d\017\uff9d\020\uff9d" +
    "\021\uff9d\022\uff9d\023\uff9d\024\uff9d\030\uff9d\035\uff9d\036" +
    "\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\044\uff9d\045\uff9d" +
    "\046\uff9d\057\uff9d\060\uff9d\001\002\000\004\012\171\001" +
    "\002\000\040\004\077\005\116\006\100\007\106\012\115" +
    "\015\075\043\102\047\120\050\121\051\123\070\111\071" +
    "\114\072\105\077\112\100\110\001\002\000\056\010\uff9b" +
    "\013\uff9b\014\uff9b\015\uff9b\017\uff9b\020\uff9b\021\uff9b\022" +
    "\uff9b\023\uff9b\024\uff9b\030\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\041\uff9b\042\uff9b\044\uff9b\045\uff9b\046\uff9b\057" +
    "\uff9b\060\uff9b\001\002\000\056\010\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024" +
    "\uff9f\030\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\044\uff9f\045\uff9f\046\uff9f\057\uff9f\060\uff9f\001" +
    "\002\000\004\013\167\001\002\000\004\013\165\001\002" +
    "\000\042\013\164\014\137\015\131\017\135\020\141\021" +
    "\134\022\132\035\136\036\143\037\133\040\127\041\142" +
    "\042\140\044\130\045\144\046\126\001\002\000\004\013" +
    "\124\001\002\000\032\004\077\005\116\006\100\007\106" +
    "\012\115\015\075\043\102\070\111\071\114\072\105\077" +
    "\112\100\110\001\002\000\056\010\uff7b\013\uff7b\014\137" +
    "\015\131\017\135\020\141\021\134\022\132\023\uff7b\024" +
    "\uff7b\030\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b" +
    "\042\uff7b\044\uff7b\045\uff7b\046\uff7b\057\uff7b\060\uff7b\001" +
    "\002\000\032\004\077\005\116\006\100\007\106\012\115" +
    "\015\075\043\102\070\111\071\114\072\105\077\112\100" +
    "\110\001\002\000\032\004\077\005\116\006\100\007\106" +
    "\012\115\015\075\043\102\070\111\071\114\072\105\077" +
    "\112\100\110\001\002\000\032\004\077\005\116\006\100" +
    "\007\106\012\115\015\075\043\102\070\111\071\114\072" +
    "\105\077\112\100\110\001\002\000\032\004\077\005\116" +
    "\006\100\007\106\012\115\015\075\043\102\070\111\071" +
    "\114\072\105\077\112\100\110\001\002\000\032\004\077" +
    "\005\116\006\100\007\106\012\115\015\075\043\102\070" +
    "\111\071\114\072\105\077\112\100\110\001\002\000\032" +
    "\004\077\005\116\006\100\007\106\012\115\015\075\043" +
    "\102\070\111\071\114\072\105\077\112\100\110\001\002" +
    "\000\032\004\077\005\116\006\100\007\106\012\115\015" +
    "\075\043\102\070\111\071\114\072\105\077\112\100\110" +
    "\001\002\000\032\004\077\005\116\006\100\007\106\012" +
    "\115\015\075\043\102\070\111\071\114\072\105\077\112" +
    "\100\110\001\002\000\032\004\077\005\116\006\100\007" +
    "\106\012\115\015\075\043\102\070\111\071\114\072\105" +
    "\077\112\100\110\001\002\000\032\004\077\005\116\006" +
    "\100\007\106\012\115\015\075\043\102\070\111\071\114" +
    "\072\105\077\112\100\110\001\002\000\032\004\077\005" +
    "\116\006\100\007\106\012\115\015\075\043\102\070\111" +
    "\071\114\072\105\077\112\100\110\001\002\000\032\004" +
    "\077\005\116\006\100\007\106\012\115\015\075\043\102" +
    "\070\111\071\114\072\105\077\112\100\110\001\002\000" +
    "\032\004\077\005\116\006\100\007\106\012\115\015\075" +
    "\043\102\070\111\071\114\072\105\077\112\100\110\001" +
    "\002\000\032\004\077\005\116\006\100\007\106\012\115" +
    "\015\075\043\102\070\111\071\114\072\105\077\112\100" +
    "\110\001\002\000\032\004\077\005\116\006\100\007\106" +
    "\012\115\015\075\043\102\070\111\071\114\072\105\077" +
    "\112\100\110\001\002\000\056\010\uff81\013\uff81\014\137" +
    "\015\131\017\135\020\141\021\134\022\132\023\uff81\024" +
    "\uff81\030\uff81\035\136\036\143\037\133\040\127\041\142" +
    "\042\140\044\130\045\uff81\046\126\057\uff81\060\uff81\001" +
    "\002\000\056\010\uff89\013\uff89\014\137\015\131\017\135" +
    "\020\141\021\134\022\132\023\uff89\024\uff89\030\uff89\035" +
    "\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\044\uff89" +
    "\045\uff89\046\uff89\057\uff89\060\uff89\001\002\000\056\010" +
    "\uff86\013\uff86\014\137\015\131\017\135\020\141\021\134" +
    "\022\132\023\uff86\024\uff86\030\uff86\035\uff86\036\uff86\037" +
    "\uff86\040\uff86\041\uff86\042\uff86\044\uff86\045\uff86\046\uff86" +
    "\057\uff86\060\uff86\001\002\000\056\010\uff8e\013\uff8e\014" +
    "\uff8e\015\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e" +
    "\024\uff8e\030\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041" +
    "\uff8e\042\uff8e\044\uff8e\045\uff8e\046\uff8e\057\uff8e\060\uff8e" +
    "\001\002\000\056\010\uff85\013\uff85\014\137\015\131\017" +
    "\135\020\141\021\134\022\132\023\uff85\024\uff85\030\uff85" +
    "\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85\044" +
    "\uff85\045\uff85\046\uff85\057\uff85\060\uff85\001\002\000\056" +
    "\010\uff91\013\uff91\014\uff91\015\uff91\017\135\020\141\021" +
    "\134\022\132\023\uff91\024\uff91\030\uff91\035\uff91\036\uff91" +
    "\037\uff91\040\uff91\041\uff91\042\uff91\044\uff91\045\uff91\046" +
    "\uff91\057\uff91\060\uff91\001\002\000\056\010\uff8a\013\uff8a" +
    "\014\137\015\131\017\135\020\141\021\134\022\132\023" +
    "\uff8a\024\uff8a\030\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a" +
    "\041\uff8a\042\uff8a\044\uff8a\045\uff8a\046\uff8a\057\uff8a\060" +
    "\uff8a\001\002\000\056\010\uff8f\013\uff8f\014\uff8f\015\uff8f" +
    "\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\030" +
    "\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\044\uff8f\045\uff8f\046\uff8f\057\uff8f\060\uff8f\001\002\000" +
    "\056\010\uff8d\013\uff8d\014\uff8d\015\uff8d\017\uff8d\020\uff8d" +
    "\021\uff8d\022\uff8d\023\uff8d\024\uff8d\030\uff8d\035\uff8d\036" +
    "\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\044\uff8d\045\uff8d" +
    "\046\uff8d\057\uff8d\060\uff8d\001\002\000\056\010\uff88\013" +
    "\uff88\014\137\015\131\017\135\020\141\021\134\022\132" +
    "\023\uff88\024\uff88\030\uff88\035\uff88\036\uff88\037\uff88\040" +
    "\uff88\041\uff88\042\uff88\044\uff88\045\uff88\046\uff88\057\uff88" +
    "\060\uff88\001\002\000\056\010\uff8c\013\uff8c\014\uff8c\015" +
    "\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c" +
    "\030\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042" +
    "\uff8c\044\uff8c\045\uff8c\046\uff8c\057\uff8c\060\uff8c\001\002" +
    "\000\056\010\uff90\013\uff90\014\uff90\015\uff90\017\135\020" +
    "\141\021\134\022\132\023\uff90\024\uff90\030\uff90\035\uff90" +
    "\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\044\uff90\045" +
    "\uff90\046\uff90\057\uff90\060\uff90\001\002\000\056\010\uff83" +
    "\013\uff83\014\137\015\131\017\135\020\141\021\134\022" +
    "\132\023\uff83\024\uff83\030\uff83\035\136\036\143\037\133" +
    "\040\127\041\142\042\140\044\uff83\045\uff83\046\uff83\057" +
    "\uff83\060\uff83\001\002\000\056\010\uff87\013\uff87\014\137" +
    "\015\131\017\135\020\141\021\134\022\132\023\uff87\024" +
    "\uff87\030\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87" +
    "\042\uff87\044\uff87\045\uff87\046\uff87\057\uff87\060\uff87\001" +
    "\002\000\056\010\uff82\013\uff82\014\137\015\131\017\135" +
    "\020\141\021\134\022\132\023\uff82\024\uff82\030\uff82\035" +
    "\136\036\143\037\133\040\127\041\142\042\140\044\130" +
    "\045\uff82\046\uff82\057\uff82\060\uff82\001\002\000\056\010" +
    "\uff8b\013\uff8b\014\uff8b\015\uff8b\017\uff8b\020\uff8b\021\uff8b" +
    "\022\uff8b\023\uff8b\024\uff8b\030\uff8b\035\uff8b\036\uff8b\037" +
    "\uff8b\040\uff8b\041\uff8b\042\uff8b\044\uff8b\045\uff8b\046\uff8b" +
    "\057\uff8b\060\uff8b\001\002\000\032\004\077\005\116\006" +
    "\100\007\106\012\115\015\075\043\102\070\111\071\114" +
    "\072\105\077\112\100\110\001\002\000\056\010\uff7a\013" +
    "\uff7a\014\137\015\131\017\135\020\141\021\134\022\132" +
    "\023\uff7a\024\uff7a\030\uff7a\035\uff7a\036\uff7a\037\uff7a\040" +
    "\uff7a\041\uff7a\042\uff7a\044\uff7a\045\uff7a\046\uff7a\057\uff7a" +
    "\060\uff7a\001\002\000\032\004\077\005\116\006\100\007" +
    "\106\012\115\015\075\043\102\070\111\071\114\072\105" +
    "\077\112\100\110\001\002\000\056\010\uff7c\013\uff7c\014" +
    "\137\015\131\017\135\020\141\021\134\022\132\023\uff7c" +
    "\024\uff7c\030\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041" +
    "\uff7c\042\uff7c\044\uff7c\045\uff7c\046\uff7c\057\uff7c\060\uff7c" +
    "\001\002\000\032\004\077\005\116\006\100\007\106\012" +
    "\115\015\075\043\102\070\111\071\114\072\105\077\112" +
    "\100\110\001\002\000\042\013\173\014\137\015\131\017" +
    "\135\020\141\021\134\022\132\035\136\036\143\037\133" +
    "\040\127\041\142\042\140\044\130\045\144\046\126\001" +
    "\002\000\056\010\uff7f\013\uff7f\014\uff7f\015\uff7f\017\uff7f" +
    "\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\030\uff7f\035" +
    "\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\044\uff7f" +
    "\045\uff7f\046\uff7f\057\uff7f\060\uff7f\001\002\000\032\004" +
    "\077\005\116\006\100\007\106\012\115\015\075\043\102" +
    "\070\111\071\114\072\105\077\112\100\110\001\002\000" +
    "\042\013\176\014\137\015\131\017\135\020\141\021\134" +
    "\022\132\035\136\036\143\037\133\040\127\041\142\042" +
    "\140\044\130\045\144\046\126\001\002\000\056\010\uff80" +
    "\013\uff80\014\uff80\015\uff80\017\uff80\020\uff80\021\uff80\022" +
    "\uff80\023\uff80\024\uff80\030\uff80\035\uff80\036\uff80\037\uff80" +
    "\040\uff80\041\uff80\042\uff80\044\uff80\045\uff80\046\uff80\057" +
    "\uff80\060\uff80\001\002\000\032\004\077\005\116\006\100" +
    "\007\106\012\115\015\075\043\102\070\111\071\114\072" +
    "\105\077\112\100\110\001\002\000\010\007\210\067\212" +
    "\073\211\001\002\000\034\004\077\005\116\006\100\007" +
    "\106\012\115\013\204\015\075\043\102\070\111\071\114" +
    "\072\105\077\112\100\110\001\002\000\044\013\uffad\014" +
    "\137\015\131\017\135\020\141\021\134\022\132\035\136" +
    "\036\143\037\133\040\127\041\142\042\140\044\130\045" +
    "\144\046\126\060\uffad\001\002\000\006\013\206\060\205" +
    "\001\002\000\056\010\uffaf\013\uffaf\014\uffaf\015\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\030\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\057\uffaf\060\uffaf\001\002\000\032" +
    "\004\077\005\116\006\100\007\106\012\115\015\075\043" +
    "\102\070\111\071\114\072\105\077\112\100\110\001\002" +
    "\000\056\010\uffb0\013\uffb0\014\uffb0\015\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\030\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\057\uffb0\060\uffb0\001\002\000\044\013\uffae" +
    "\014\137\015\131\017\135\020\141\021\134\022\132\035" +
    "\136\036\143\037\133\040\127\041\142\042\140\044\130" +
    "\045\144\046\126\060\uffae\001\002\000\060\010\uff79\013" +
    "\uff79\014\uff79\015\uff79\017\uff79\020\uff79\021\uff79\022\uff79" +
    "\023\uff79\024\uff79\030\uff79\035\uff79\036\uff79\037\uff79\040" +
    "\uff79\041\uff79\042\uff79\044\uff79\045\uff79\046\uff79\057\uff79" +
    "\060\uff79\065\221\001\002\000\004\012\216\001\002\000" +
    "\004\012\213\001\002\000\032\004\077\005\116\006\100" +
    "\007\106\012\115\015\075\043\102\070\111\071\114\072" +
    "\105\077\112\100\110\001\002\000\042\013\215\014\137" +
    "\015\131\017\135\020\141\021\134\022\132\035\136\036" +
    "\143\037\133\040\127\041\142\042\140\044\130\045\144" +
    "\046\126\001\002\000\056\010\uff93\013\uff93\014\uff93\015" +
    "\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93" +
    "\030\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042" +
    "\uff93\044\uff93\045\uff93\046\uff93\057\uff93\060\uff93\001\002" +
    "\000\032\004\077\005\116\006\100\007\106\012\115\015" +
    "\075\043\102\070\111\071\114\072\105\077\112\100\110" +
    "\001\002\000\042\013\220\014\137\015\131\017\135\020" +
    "\141\021\134\022\132\035\136\036\143\037\133\040\127" +
    "\041\142\042\140\044\130\045\144\046\126\001\002\000" +
    "\056\010\uff7d\013\uff7d\014\uff7d\015\uff7d\017\uff7d\020\uff7d" +
    "\021\uff7d\022\uff7d\023\uff7d\024\uff7d\030\uff7d\035\uff7d\036" +
    "\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\044\uff7d\045\uff7d" +
    "\046\uff7d\057\uff7d\060\uff7d\001\002\000\004\007\222\001" +
    "\002\000\056\010\uff78\013\uff78\014\uff78\015\uff78\017\uff78" +
    "\020\uff78\021\uff78\022\uff78\023\uff78\024\uff78\030\uff78\035" +
    "\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78\044\uff78" +
    "\045\uff78\046\uff78\057\uff78\060\uff78\001\002\000\042\014" +
    "\137\015\131\017\135\020\141\021\134\022\132\035\136" +
    "\036\143\037\133\040\127\041\142\042\140\044\130\045" +
    "\144\046\126\057\224\001\002\000\060\010\uff95\013\uff95" +
    "\014\uff95\015\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023" +
    "\uff95\024\uff95\030\uff95\035\uff95\036\uff95\037\uff95\040\uff95" +
    "\041\uff95\042\uff95\044\uff95\045\uff95\046\uff95\056\225\057" +
    "\uff95\060\uff95\001\002\000\032\004\077\005\116\006\100" +
    "\007\106\012\115\015\075\043\102\070\111\071\114\072" +
    "\105\077\112\100\110\001\002\000\042\014\137\015\131" +
    "\017\135\020\141\021\134\022\132\035\136\036\143\037" +
    "\133\040\127\041\142\042\140\044\130\045\144\046\126" +
    "\057\227\001\002\000\056\010\uff94\013\uff94\014\uff94\015" +
    "\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94" +
    "\030\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042" +
    "\uff94\044\uff94\045\uff94\046\uff94\057\uff94\060\uff94\001\002" +
    "\000\032\004\077\005\116\006\100\007\106\012\115\015" +
    "\075\043\102\070\111\071\114\072\105\077\112\100\110" +
    "\001\002\000\042\013\232\014\137\015\131\017\135\020" +
    "\141\021\134\022\132\035\136\036\143\037\133\040\127" +
    "\041\142\042\140\044\130\045\144\046\126\001\002\000" +
    "\056\010\uff7e\013\uff7e\014\uff7e\015\uff7e\017\uff7e\020\uff7e" +
    "\021\uff7e\022\uff7e\023\uff7e\024\uff7e\030\uff7e\035\uff7e\036" +
    "\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\044\uff7e\045\uff7e" +
    "\046\uff7e\057\uff7e\060\uff7e\001\002\000\056\010\uff84\013" +
    "\uff84\014\137\015\131\017\135\020\141\021\134\022\132" +
    "\023\uff84\024\uff84\030\uff84\035\136\036\143\037\133\040" +
    "\127\041\142\042\140\044\uff84\045\uff84\046\uff84\057\uff84" +
    "\060\uff84\001\002\000\004\010\235\001\002\000\062\002" +
    "\uffc5\003\uffc5\007\uffc5\011\uffc5\024\uffc5\025\uffc5\027\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\061\uffc5\062\uffc5\063\uffc5\074\uffc5\075\uffc5" +
    "\076\uffc5\101\uffc5\102\uffc5\103\uffc5\001\002\000\056\010" +
    "\uff92\013\uff92\014\uff92\015\uff92\017\uff92\020\uff92\021\uff92" +
    "\022\uff92\023\uff92\024\uff92\030\uff92\035\uff92\036\uff92\037" +
    "\uff92\040\uff92\041\uff92\042\uff92\044\uff92\045\uff92\046\uff92" +
    "\057\uff92\060\uff92\001\002\000\004\007\240\001\002\000" +
    "\004\054\253\001\002\000\006\007\242\024\243\001\002" +
    "\000\004\054\246\001\002\000\004\007\244\001\002\000" +
    "\004\010\245\001\002\000\062\002\uffbe\003\uffbe\007\uffbe" +
    "\011\uffbe\024\uffbe\025\uffbe\027\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\074\uffbe\075\uffbe\076\uffbe\101\uffbe\102" +
    "\uffbe\103\uffbe\001\002\000\020\007\250\047\020\050\006" +
    "\051\015\052\061\053\026\075\045\001\002\000\004\010" +
    "\252\001\002\000\004\010\uffba\001\002\000\004\010\uffbb" +
    "\001\002\000\006\007\uffbd\024\uffbd\001\002\000\020\007" +
    "\250\047\020\050\006\051\015\052\061\053\026\075\045" +
    "\001\002\000\004\010\255\001\002\000\006\007\uffbc\024" +
    "\uffbc\001\002\000\016\047\020\050\006\051\015\052\061" +
    "\053\026\075\045\001\002\000\004\041\260\001\002\000" +
    "\004\007\261\001\002\000\004\055\262\001\002\000\004" +
    "\064\263\001\002\000\004\063\264\001\002\000\004\012" +
    "\265\001\002\000\004\013\266\001\002\000\004\010\267" +
    "\001\002\000\062\002\uffd5\003\uffd5\007\uffd5\011\uffd5\024" +
    "\uffd5\025\uffd5\027\uffd5\032\uffd5\033\uffd5\034\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\053\uffd5\061\uffd5\062\uffd5\063" +
    "\uffd5\074\uffd5\075\uffd5\076\uffd5\101\uffd5\102\uffd5\103\uffd5" +
    "\001\002\000\032\004\077\005\116\006\100\007\106\012" +
    "\115\015\075\043\102\070\111\071\114\072\105\077\112" +
    "\100\110\001\002\000\042\013\272\014\137\015\131\017" +
    "\135\020\141\021\134\022\132\035\136\036\143\037\133" +
    "\040\127\041\142\042\140\044\130\045\144\046\126\001" +
    "\002\000\004\023\273\001\002\000\056\003\037\007\032" +
    "\011\011\025\031\027\022\032\021\033\054\034\065\047" +
    "\020\050\006\051\015\052\061\053\026\061\007\062\064" +
    "\063\055\074\036\075\045\076\063\101\044\102\016\103" +
    "\035\001\002\000\060\003\037\007\032\011\011\024\275" +
    "\025\031\027\022\032\021\033\054\034\065\047\020\050" +
    "\006\051\015\052\061\053\026\061\007\062\064\063\055" +
    "\074\036\075\045\076\063\101\044\102\016\103\035\001" +
    "\002\000\062\002\uffc6\003\uffc6\007\uffc6\011\uffc6\024\uffc6" +
    "\025\uffc6\027\uffc6\032\uffc6\033\uffc6\034\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\074\uffc6\075\uffc6\076\uffc6\101\uffc6\102\uffc6\103\uffc6\001" +
    "\002\000\004\054\277\001\002\000\020\007\300\047\020" +
    "\050\006\051\015\052\061\053\026\075\045\001\002\000" +
    "\004\055\337\001\002\000\010\010\303\055\304\056\302" +
    "\001\002\000\004\057\310\001\002\000\062\002\uffe1\003" +
    "\uffe1\007\uffe1\011\uffe1\024\uffe1\025\uffe1\027\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\061\uffe1\062\uffe1\063\uffe1\074\uffe1\075\uffe1\076\uffe1" +
    "\101\uffe1\102\uffe1\103\uffe1\001\002\000\032\004\077\005" +
    "\116\006\100\007\106\012\115\015\075\043\102\070\111" +
    "\071\114\072\105\077\112\100\110\001\002\000\062\002" +
    "\uffe3\003\uffe3\007\uffe3\011\uffe3\024\uffe3\025\uffe3\027\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\061\uffe3\062\uffe3\063\uffe3\074\uffe3\075\uffe3" +
    "\076\uffe3\101\uffe3\102\uffe3\103\uffe3\001\002\000\042\010" +
    "\307\014\137\015\131\017\135\020\141\021\134\022\132" +
    "\035\136\036\143\037\133\040\127\041\142\042\140\044" +
    "\130\045\144\046\126\001\002\000\062\002\uffe2\003\uffe2" +
    "\007\uffe2\011\uffe2\024\uffe2\025\uffe2\027\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\061\uffe2\062\uffe2\063\uffe2\074\uffe2\075\uffe2\076\uffe2\101" +
    "\uffe2\102\uffe2\103\uffe2\001\002\000\006\055\312\056\311" +
    "\001\002\000\004\057\322\001\002\000\004\056\313\001" +
    "\002\000\032\004\077\005\116\006\100\007\106\012\115" +
    "\015\075\043\102\070\111\071\114\072\105\077\112\100" +
    "\110\001\002\000\006\057\317\060\316\001\002\000\044" +
    "\014\137\015\131\017\135\020\141\021\134\022\132\035" +
    "\136\036\143\037\133\040\127\041\142\042\140\044\130" +
    "\045\144\046\126\057\uffda\060\uffda\001\002\000\032\004" +
    "\077\005\116\006\100\007\106\012\115\015\075\043\102" +
    "\070\111\071\114\072\105\077\112\100\110\001\002\000" +
    "\004\010\320\001\002\000\062\002\uffdd\003\uffdd\007\uffdd" +
    "\011\uffdd\024\uffdd\025\uffdd\027\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\074\uffdd\075\uffdd\076\uffdd\101\uffdd\102" +
    "\uffdd\103\uffdd\001\002\000\044\014\137\015\131\017\135" +
    "\020\141\021\134\022\132\035\136\036\143\037\133\040" +
    "\127\041\142\042\140\044\130\045\144\046\126\057\uffdb" +
    "\060\uffdb\001\002\000\004\055\323\001\002\000\004\056" +
    "\324\001\002\000\004\056\325\001\002\000\032\004\077" +
    "\005\116\006\100\007\106\012\115\015\075\043\102\070" +
    "\111\071\114\072\105\077\112\100\110\001\002\000\006" +
    "\057\327\060\330\001\002\000\004\010\334\001\002\000" +
    "\004\056\331\001\002\000\032\004\077\005\116\006\100" +
    "\007\106\012\115\015\075\043\102\070\111\071\114\072" +
    "\105\077\112\100\110\001\002\000\006\057\333\060\316" +
    "\001\002\000\006\057\uffd9\060\uffd9\001\002\000\062\002" +
    "\uffdc\003\uffdc\007\uffdc\011\uffdc\024\uffdc\025\uffdc\027\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\061\uffdc\062\uffdc\063\uffdc\074\uffdc\075\uffdc" +
    "\076\uffdc\101\uffdc\102\uffdc\103\uffdc\001\002\000\006\057" +
    "\336\060\316\001\002\000\006\057\uffd8\060\uffd8\001\002" +
    "\000\004\023\340\001\002\000\004\007\341\001\002\000" +
    "\004\054\351\001\002\000\006\024\344\060\343\001\002" +
    "\000\004\007\346\001\002\000\004\010\345\001\002\000" +
    "\062\002\uffb9\003\uffb9\007\uffb9\011\uffb9\024\uffb9\025\uffb9" +
    "\027\uffb9\032\uffb9\033\uffb9\034\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\061\uffb9\062\uffb9\063\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\101\uffb9\102\uffb9\103\uffb9\001\002\000" +
    "\004\054\347\001\002\000\032\004\077\005\116\006\100" +
    "\007\106\012\115\015\075\043\102\070\111\071\114\072" +
    "\105\077\112\100\110\001\002\000\044\014\137\015\131" +
    "\017\135\020\141\021\134\022\132\024\uffb8\035\136\036" +
    "\143\037\133\040\127\041\142\042\140\044\130\045\144" +
    "\046\126\060\uffb8\001\002\000\032\004\077\005\116\006" +
    "\100\007\106\012\115\015\075\043\102\070\111\071\114" +
    "\072\105\077\112\100\110\001\002\000\044\014\137\015" +
    "\131\017\135\020\141\021\134\022\132\024\uffb7\035\136" +
    "\036\143\037\133\040\127\041\142\042\140\044\130\045" +
    "\144\046\126\060\uffb7\001\002\000\062\002\uffc4\003\uffc4" +
    "\007\uffc4\011\uffc4\024\uffc4\025\uffc4\027\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\061\uffc4\062\uffc4\063\uffc4\074\uffc4\075\uffc4\076\uffc4\101" +
    "\uffc4\102\uffc4\103\uffc4\001\002\000\062\002\uffe6\003\uffe6" +
    "\007\uffe6\011\uffe6\024\uffe6\025\uffe6\027\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\074\uffe6\075\uffe6\076\uffe6\101" +
    "\uffe6\102\uffe6\103\uffe6\001\002\000\004\012\356\001\002" +
    "\000\034\004\077\005\116\006\100\007\106\012\115\013" +
    "\360\015\075\043\102\070\111\071\114\072\105\077\112" +
    "\100\110\001\002\000\006\013\362\060\205\001\002\000" +
    "\004\010\361\001\002\000\062\002\uffb3\003\uffb3\007\uffb3" +
    "\011\uffb3\024\uffb3\025\uffb3\027\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\074\uffb3\075\uffb3\076\uffb3\101\uffb3\102" +
    "\uffb3\103\uffb3\001\002\000\004\010\363\001\002\000\062" +
    "\002\uffb4\003\uffb4\007\uffb4\011\uffb4\024\uffb4\025\uffb4\027" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\061\uffb4\062\uffb4\063\uffb4\074\uffb4\075" +
    "\uffb4\076\uffb4\101\uffb4\102\uffb4\103\uffb4\001\002\000\062" +
    "\002\uffab\003\uffab\007\uffab\011\uffab\024\uffab\025\uffab\027" +
    "\uffab\032\uffab\033\uffab\034\uffab\047\uffab\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\061\uffab\062\uffab\063\uffab\074\uffab\075" +
    "\uffab\076\uffab\101\uffab\102\uffab\103\uffab\001\002\000\042" +
    "\010\366\014\137\015\131\017\135\020\141\021\134\022" +
    "\132\035\136\036\143\037\133\040\127\041\142\042\140" +
    "\044\130\045\144\046\126\001\002\000\062\002\uffac\003" +
    "\uffac\007\uffac\011\uffac\024\uffac\025\uffac\027\uffac\032\uffac" +
    "\033\uffac\034\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053" +
    "\uffac\061\uffac\062\uffac\063\uffac\074\uffac\075\uffac\076\uffac" +
    "\101\uffac\102\uffac\103\uffac\001\002\000\032\004\077\005" +
    "\116\006\100\007\106\012\115\015\075\043\102\070\111" +
    "\071\114\072\105\077\112\100\110\001\002\000\006\007" +
    "\u0108\066\u0109\001\002\000\004\014\u0106\001\002\000\032" +
    "\004\077\005\116\006\100\007\106\012\115\015\075\043" +
    "\102\070\111\071\114\072\105\077\112\100\110\001\002" +
    "\000\004\015\u0102\001\002\000\034\004\077\005\116\006" +
    "\100\007\106\012\115\013\376\015\075\043\102\070\111" +
    "\071\114\072\105\077\112\100\110\001\002\000\006\013" +
    "\u0100\060\205\001\002\000\004\010\377\001\002\000\062" +
    "\002\uffb1\003\uffb1\007\uffb1\011\uffb1\024\uffb1\025\uffb1\027" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\061\uffb1\062\uffb1\063\uffb1\074\uffb1\075" +
    "\uffb1\076\uffb1\101\uffb1\102\uffb1\103\uffb1\001\002\000\004" +
    "\010\u0101\001\002\000\062\002\uffb2\003\uffb2\007\uffb2\011" +
    "\uffb2\024\uffb2\025\uffb2\027\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\074\uffb2\075\uffb2\076\uffb2\101\uffb2\102\uffb2" +
    "\103\uffb2\001\002\000\004\010\u0103\001\002\000\062\002" +
    "\uffde\003\uffde\007\uffde\011\uffde\024\uffde\025\uffde\027\uffde" +
    "\032\uffde\033\uffde\034\uffde\047\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\061\uffde\062\uffde\063\uffde\074\uffde\075\uffde" +
    "\076\uffde\101\uffde\102\uffde\103\uffde\001\002\000\042\010" +
    "\u0105\014\137\015\131\017\135\020\141\021\134\022\132" +
    "\035\136\036\143\037\133\040\127\041\142\042\140\044" +
    "\130\045\144\046\126\001\002\000\110\002\uffe0\003\uffe0" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\015" +
    "\uffe0\024\uffe0\025\uffe0\027\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\043\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\070\uffe0\071\uffe0\072\uffe0\074\uffe0" +
    "\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0\103" +
    "\uffe0\001\002\000\004\010\u0107\001\002\000\062\002\uffdf" +
    "\003\uffdf\007\uffdf\011\uffdf\024\uffdf\025\uffdf\027\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\061\uffdf\062\uffdf\063\uffdf\074\uffdf\075\uffdf\076" +
    "\uffdf\101\uffdf\102\uffdf\103\uffdf\001\002\000\006\055\u010f" +
    "\065\u010e\001\002\000\004\012\u010a\001\002\000\032\004" +
    "\077\005\116\006\100\007\106\012\115\015\075\043\102" +
    "\070\111\071\114\072\105\077\112\100\110\001\002\000" +
    "\042\013\u010c\014\137\015\131\017\135\020\141\021\134" +
    "\022\132\035\136\036\143\037\133\040\127\041\142\042" +
    "\140\044\130\045\144\046\126\001\002\000\004\010\u010d" +
    "\001\002\000\062\002\uffd4\003\uffd4\007\uffd4\011\uffd4\024" +
    "\uffd4\025\uffd4\027\uffd4\032\uffd4\033\uffd4\034\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\053\uffd4\061\uffd4\062\uffd4\063" +
    "\uffd4\074\uffd4\075\uffd4\076\uffd4\101\uffd4\102\uffd4\103\uffd4" +
    "\001\002\000\004\007\u0112\001\002\000\032\004\077\005" +
    "\116\006\100\007\106\012\115\015\075\043\102\070\111" +
    "\071\114\072\105\077\112\100\110\001\002\000\042\010" +
    "\u0111\014\137\015\131\017\135\020\141\021\134\022\132" +
    "\035\136\036\143\037\133\040\127\041\142\042\140\044" +
    "\130\045\144\046\126\001\002\000\062\002\uffb6\003\uffb6" +
    "\007\uffb6\011\uffb6\024\uffb6\025\uffb6\027\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\074\uffb6\075\uffb6\076\uffb6\101" +
    "\uffb6\102\uffb6\103\uffb6\001\002\000\004\055\u0113\001\002" +
    "\000\032\004\077\005\116\006\100\007\106\012\115\015" +
    "\075\043\102\070\111\071\114\072\105\077\112\100\110" +
    "\001\002\000\042\010\u0115\014\137\015\131\017\135\020" +
    "\141\021\134\022\132\035\136\036\143\037\133\040\127" +
    "\041\142\042\140\044\130\045\144\046\126\001\002\000" +
    "\062\002\uffb5\003\uffb5\007\uffb5\011\uffb5\024\uffb5\025\uffb5" +
    "\027\uffb5\032\uffb5\033\uffb5\034\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\061\uffb5\062\uffb5\063\uffb5\074\uffb5" +
    "\075\uffb5\076\uffb5\101\uffb5\102\uffb5\103\uffb5\001\002\000" +
    "\042\014\137\015\131\017\135\020\141\021\134\022\132" +
    "\035\136\036\143\037\133\040\127\041\142\042\140\044" +
    "\130\045\144\046\126\057\u0117\001\002\000\006\055\u0119" +
    "\056\u0118\001\002\000\032\004\077\005\116\006\100\007" +
    "\106\012\115\015\075\043\102\070\111\071\114\072\105" +
    "\077\112\100\110\001\002\000\032\004\077\005\116\006" +
    "\100\007\106\012\115\015\075\043\102\070\111\071\114" +
    "\072\105\077\112\100\110\001\002\000\042\010\u011b\014" +
    "\137\015\131\017\135\020\141\021\134\022\132\035\136" +
    "\036\143\037\133\040\127\041\142\042\140\044\130\045" +
    "\144\046\126\001\002\000\062\002\uffd7\003\uffd7\007\uffd7" +
    "\011\uffd7\024\uffd7\025\uffd7\027\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\061\uffd7" +
    "\062\uffd7\063\uffd7\074\uffd7\075\uffd7\076\uffd7\101\uffd7\102" +
    "\uffd7\103\uffd7\001\002\000\042\014\137\015\131\017\135" +
    "\020\141\021\134\022\132\035\136\036\143\037\133\040" +
    "\127\041\142\042\140\044\130\045\144\046\126\057\u011d" +
    "\001\002\000\004\055\u011e\001\002\000\032\004\077\005" +
    "\116\006\100\007\106\012\115\015\075\043\102\070\111" +
    "\071\114\072\105\077\112\100\110\001\002\000\042\010" +
    "\u0120\014\137\015\131\017\135\020\141\021\134\022\132" +
    "\035\136\036\143\037\133\040\127\041\142\042\140\044" +
    "\130\045\144\046\126\001\002\000\062\002\uffd6\003\uffd6" +
    "\007\uffd6\011\uffd6\024\uffd6\025\uffd6\027\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\061\uffd6\062\uffd6\063\uffd6\074\uffd6\075\uffd6\076\uffd6\101" +
    "\uffd6\102\uffd6\103\uffd6\001\002\000\032\004\077\005\116" +
    "\006\100\007\106\012\115\015\075\043\102\070\111\071" +
    "\114\072\105\077\112\100\110\001\002\000\042\013\u0123" +
    "\014\137\015\131\017\135\020\141\021\134\022\132\035" +
    "\136\036\143\037\133\040\127\041\142\042\140\044\130" +
    "\045\144\046\126\001\002\000\004\023\u0124\001\002\000" +
    "\056\003\037\007\032\011\011\025\031\027\022\032\021" +
    "\033\054\034\065\047\020\050\006\051\015\052\061\053" +
    "\026\061\007\062\064\063\055\074\036\075\045\076\063" +
    "\101\044\102\016\103\035\001\002\000\060\003\037\007" +
    "\032\011\011\024\u0126\025\031\027\022\032\021\033\054" +
    "\034\065\047\020\050\006\051\015\052\061\053\026\061" +
    "\007\062\064\063\055\074\036\075\045\076\063\101\044" +
    "\102\016\103\035\001\002\000\064\002\uffd3\003\uffd3\007" +
    "\uffd3\011\uffd3\024\uffd3\025\uffd3\026\u0127\027\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\074\uffd3\075\uffd3\076\uffd3" +
    "\101\uffd3\102\uffd3\103\uffd3\001\002\000\006\023\u0129\025" +
    "\031\001\002\000\062\002\uffd1\003\uffd1\007\uffd1\011\uffd1" +
    "\024\uffd1\025\uffd1\027\uffd1\032\uffd1\033\uffd1\034\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\061\uffd1\062\uffd1" +
    "\063\uffd1\074\uffd1\075\uffd1\076\uffd1\101\uffd1\102\uffd1\103" +
    "\uffd1\001\002\000\056\003\037\007\032\011\011\025\031" +
    "\027\022\032\021\033\054\034\065\047\020\050\006\051" +
    "\015\052\061\053\026\061\007\062\064\063\055\074\036" +
    "\075\045\076\063\101\044\102\016\103\035\001\002\000" +
    "\060\003\037\007\032\011\011\024\u012b\025\031\027\022" +
    "\032\021\033\054\034\065\047\020\050\006\051\015\052" +
    "\061\053\026\061\007\062\064\063\055\074\036\075\045" +
    "\076\063\101\044\102\016\103\035\001\002\000\062\002" +
    "\uffd2\003\uffd2\007\uffd2\011\uffd2\024\uffd2\025\uffd2\027\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\047\uffd2\050\uffd2\051\uffd2\052" +
    "\uffd2\053\uffd2\061\uffd2\062\uffd2\063\uffd2\074\uffd2\075\uffd2" +
    "\076\uffd2\101\uffd2\102\uffd2\103\uffd2\001\002\000\004\002" +
    "\001\001\002\000\042\014\137\015\131\017\135\020\141" +
    "\021\134\022\132\023\u012e\035\136\036\143\037\133\040" +
    "\127\041\142\042\140\044\130\045\144\046\126\001\002" +
    "\000\034\004\077\005\116\006\100\007\106\012\115\015" +
    "\075\031\u0132\043\102\070\111\071\114\072\105\077\112" +
    "\100\110\001\002\000\036\004\077\005\116\006\100\007" +
    "\106\012\115\015\075\024\u013d\031\u013e\043\102\070\111" +
    "\071\114\072\105\077\112\100\110\001\002\000\042\014" +
    "\137\015\131\017\135\020\141\021\134\022\132\030\u0138" +
    "\035\136\036\143\037\133\040\127\041\142\042\140\044" +
    "\130\045\144\046\126\001\002\000\036\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\012\uffcc\015\uffcc\024\uffcc\031\uffcc\043" +
    "\uffcc\070\uffcc\071\uffcc\072\uffcc\077\uffcc\100\uffcc\001\002" +
    "\000\004\030\u0133\001\002\000\004\023\u0134\001\002\000" +
    "\056\003\037\007\032\011\011\025\031\027\022\032\021" +
    "\033\054\034\065\047\020\050\006\051\015\052\061\053" +
    "\026\061\007\062\064\063\055\074\036\075\045\076\063" +
    "\101\044\102\016\103\035\001\002\000\060\003\037\007" +
    "\032\011\011\024\u0136\025\031\027\022\032\021\033\054" +
    "\034\065\047\020\050\006\051\015\052\061\053\026\061" +
    "\007\062\064\063\055\074\036\075\045\076\063\101\044" +
    "\102\016\103\035\001\002\000\004\024\u0137\001\002\000" +
    "\062\002\uffce\003\uffce\007\uffce\011\uffce\024\uffce\025\uffce" +
    "\027\uffce\032\uffce\033\uffce\034\uffce\047\uffce\050\uffce\051" +
    "\uffce\052\uffce\053\uffce\061\uffce\062\uffce\063\uffce\074\uffce" +
    "\075\uffce\076\uffce\101\uffce\102\uffce\103\uffce\001\002\000" +
    "\004\023\u0139\001\002\000\056\003\037\007\032\011\011" +
    "\025\031\027\022\032\021\033\054\034\065\047\020\050" +
    "\006\051\015\052\061\053\026\061\007\062\064\063\055" +
    "\074\036\075\045\076\063\101\044\102\016\103\035\001" +
    "\002\000\060\003\037\007\032\011\011\024\u013b\025\031" +
    "\027\022\032\021\033\054\034\065\047\020\050\006\051" +
    "\015\052\061\053\026\061\007\062\064\063\055\074\036" +
    "\075\045\076\063\101\044\102\016\103\035\001\002\000" +
    "\036\004\uffcb\005\uffcb\006\uffcb\007\uffcb\012\uffcb\015\uffcb" +
    "\024\uffcb\031\uffcb\043\uffcb\070\uffcb\071\uffcb\072\uffcb\077" +
    "\uffcb\100\uffcb\001\002\000\036\004\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\012\uffcd\015\uffcd\024\uffcd\031\uffcd\043\uffcd\070" +
    "\uffcd\071\uffcd\072\uffcd\077\uffcd\100\uffcd\001\002\000\062" +
    "\002\uffcf\003\uffcf\007\uffcf\011\uffcf\024\uffcf\025\uffcf\027" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\061\uffcf\062\uffcf\063\uffcf\074\uffcf\075" +
    "\uffcf\076\uffcf\101\uffcf\102\uffcf\103\uffcf\001\002\000\004" +
    "\030\u013f\001\002\000\004\023\u0140\001\002\000\056\003" +
    "\037\007\032\011\011\025\031\027\022\032\021\033\054" +
    "\034\065\047\020\050\006\051\015\052\061\053\026\061" +
    "\007\062\064\063\055\074\036\075\045\076\063\101\044" +
    "\102\016\103\035\001\002\000\060\003\037\007\032\011" +
    "\011\024\u0142\025\031\027\022\032\021\033\054\034\065" +
    "\047\020\050\006\051\015\052\061\053\026\061\007\062" +
    "\064\063\055\074\036\075\045\076\063\101\044\102\016" +
    "\103\035\001\002\000\004\024\u0143\001\002\000\062\002" +
    "\uffd0\003\uffd0\007\uffd0\011\uffd0\024\uffd0\025\uffd0\027\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\047\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\061\uffd0\062\uffd0\063\uffd0\074\uffd0\075\uffd0" +
    "\076\uffd0\101\uffd0\102\uffd0\103\uffd0\001\002\000\004\007" +
    "\u0145\001\002\000\004\055\372\001\002\000\032\004\077" +
    "\005\116\006\100\007\106\012\115\015\075\043\102\070" +
    "\111\071\114\072\105\077\112\100\110\001\002\000\042" +
    "\010\u0148\014\137\015\131\017\135\020\141\021\134\022" +
    "\132\035\136\036\143\037\133\040\127\041\142\042\140" +
    "\044\130\045\144\046\126\001\002\000\004\007\u0149\001" +
    "\002\000\010\014\u014f\015\u0151\055\u0150\001\002\000\004" +
    "\013\u014b\001\002\000\004\023\u014c\001\002\000\056\003" +
    "\037\007\032\011\011\025\031\027\022\032\021\033\054" +
    "\034\065\047\020\050\006\051\015\052\061\053\026\061" +
    "\007\062\064\063\055\074\036\075\045\076\063\101\044" +
    "\102\016\103\035\001\002\000\060\003\037\007\032\011" +
    "\011\024\u014e\025\031\027\022\032\021\033\054\034\065" +
    "\047\020\050\006\051\015\052\061\053\026\061\007\062" +
    "\064\063\055\074\036\075\045\076\063\101\044\102\016" +
    "\103\035\001\002\000\062\002\uffca\003\uffca\007\uffca\011" +
    "\uffca\024\uffca\025\uffca\027\uffca\032\uffca\033\uffca\034\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\061\uffca\062" +
    "\uffca\063\uffca\074\uffca\075\uffca\076\uffca\101\uffca\102\uffca" +
    "\103\uffca\001\002\000\004\014\u0154\001\002\000\032\004" +
    "\077\005\116\006\100\007\106\012\115\015\075\043\102" +
    "\070\111\071\114\072\105\077\112\100\110\001\002\000" +
    "\004\015\u0152\001\002\000\004\013\uffc7\001\002\000\042" +
    "\013\uffc9\014\137\015\131\017\135\020\141\021\134\022" +
    "\132\035\136\036\143\037\133\040\127\041\142\042\140" +
    "\044\130\045\144\046\126\001\002\000\004\013\uffc8\001" +
    "\002\000\062\002\uffc3\003\uffc3\007\uffc3\011\uffc3\024\uffc3" +
    "\025\uffc3\027\uffc3\032\uffc3\033\uffc3\034\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\061\uffc3\062\uffc3\063\uffc3" +
    "\074\uffc3\075\uffc3\076\uffc3\101\uffc3\102\uffc3\103\uffc3\001" +
    "\002\000\004\012\u0157\001\002\000\020\013\u0158\047\020" +
    "\050\006\051\015\052\061\053\026\075\045\001\002\000" +
    "\004\023\u0163\001\002\000\006\013\u015d\060\u015c\001\002" +
    "\000\004\007\u015b\001\002\000\006\013\uffbf\060\uffbf\001" +
    "\002\000\016\047\020\050\006\051\015\052\061\053\026" +
    "\075\045\001\002\000\004\023\u015e\001\002\000\056\003" +
    "\037\007\032\011\011\025\031\027\022\032\021\033\054" +
    "\034\065\047\020\050\006\051\015\052\061\053\026\061" +
    "\007\062\064\063\055\074\036\075\045\076\063\101\044" +
    "\102\016\103\035\001\002\000\060\003\037\007\032\011" +
    "\011\024\u0160\025\031\027\022\032\021\033\054\034\065" +
    "\047\020\050\006\051\015\052\061\053\026\061\007\062" +
    "\064\063\055\074\036\075\045\076\063\101\044\102\016" +
    "\103\035\001\002\000\062\002\uffc2\003\uffc2\007\uffc2\011" +
    "\uffc2\024\uffc2\025\uffc2\027\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\074\uffc2\075\uffc2\076\uffc2\101\uffc2\102\uffc2" +
    "\103\uffc2\001\002\000\004\007\u0162\001\002\000\006\013" +
    "\uffc0\060\uffc0\001\002\000\056\003\037\007\032\011\011" +
    "\025\031\027\022\032\021\033\054\034\065\047\020\050" +
    "\006\051\015\052\061\053\026\061\007\062\064\063\055" +
    "\074\036\075\045\076\063\101\044\102\016\103\035\001" +
    "\002\000\060\003\037\007\032\011\011\024\u0165\025\031" +
    "\027\022\032\021\033\054\034\065\047\020\050\006\051" +
    "\015\052\061\053\026\061\007\062\064\063\055\074\036" +
    "\075\045\076\063\101\044\102\016\103\035\001\002\000" +
    "\062\002\uffc1\003\uffc1\007\uffc1\011\uffc1\024\uffc1\025\uffc1" +
    "\027\uffc1\032\uffc1\033\uffc1\034\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\061\uffc1\062\uffc1\063\uffc1\074\uffc1" +
    "\075\uffc1\076\uffc1\101\uffc1\102\uffc1\103\uffc1\001\002\000" +
    "\032\004\077\005\116\006\100\007\106\012\115\015\075" +
    "\043\102\070\111\071\114\072\105\077\112\100\110\001" +
    "\002\000\042\013\u0168\014\137\015\131\017\135\020\141" +
    "\021\134\022\132\035\136\036\143\037\133\040\127\041" +
    "\142\042\140\044\130\045\144\046\126\001\002\000\004" +
    "\010\u0169\001\002\000\062\002\uffe4\003\uffe4\007\uffe4\011" +
    "\uffe4\024\uffe4\025\uffe4\027\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\074\uffe4\075\uffe4\076\uffe4\101\uffe4\102\uffe4" +
    "\103\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0167\000\072\002\023\003\013\004\032\012\050\013" +
    "\057\014\041\016\046\017\056\020\024\021\027\022\055" +
    "\023\047\024\037\026\004\027\022\030\011\031\061\032" +
    "\042\033\051\035\012\036\045\043\040\044\003\047\026" +
    "\052\033\054\052\055\007\057\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\066\004\070\012\050\013\057\014\041" +
    "\016\046\017\056\020\024\021\027\022\055\023\047\024" +
    "\037\026\004\027\022\030\011\031\061\032\042\033\051" +
    "\035\012\036\045\043\040\044\003\047\026\052\033\054" +
    "\052\055\007\057\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\u012c\006\103\007\073\010\075\011\102" +
    "\034\116\053\112\056\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\364" +
    "\006\103\007\073\010\075\011\102\034\116\053\112\056" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\003\066\004" +
    "\032\012\050\013\057\014\041\016\046\017\056\020\024" +
    "\021\027\022\055\023\047\024\037\026\004\027\022\030" +
    "\011\031\061\032\042\033\051\035\012\036\045\043\040" +
    "\044\003\047\026\052\033\054\052\055\007\057\016\001" +
    "\001\000\066\004\070\012\050\013\057\014\041\016\046" +
    "\017\056\020\024\021\027\022\055\023\047\024\037\026" +
    "\004\027\022\030\011\031\061\032\042\033\051\035\012" +
    "\036\045\043\040\044\003\047\026\052\033\054\052\055" +
    "\007\057\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\100\006\103\007\073\010" +
    "\075\011\102\034\116\053\112\056\106\001\001\000\002" +
    "\001\001\000\022\005\235\006\103\007\073\010\075\011" +
    "\102\034\116\053\112\056\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\005\232\006\103\007\073\010\075\011\102\034\116" +
    "\053\112\056\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\121\006\103" +
    "\007\073\010\075\011\102\034\116\053\112\056\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\005\124\006\103\007\073\010\075\011\102\034\116" +
    "\053\112\056\106\001\001\000\002\001\001\000\022\005" +
    "\162\006\103\007\073\010\075\011\102\034\116\053\112" +
    "\056\106\001\001\000\022\005\161\006\103\007\073\010" +
    "\075\011\102\034\116\053\112\056\106\001\001\000\022" +
    "\005\160\006\103\007\073\010\075\011\102\034\116\053" +
    "\112\056\106\001\001\000\022\005\157\006\103\007\073" +
    "\010\075\011\102\034\116\053\112\056\106\001\001\000" +
    "\022\005\156\006\103\007\073\010\075\011\102\034\116" +
    "\053\112\056\106\001\001\000\022\005\155\006\103\007" +
    "\073\010\075\011\102\034\116\053\112\056\106\001\001" +
    "\000\022\005\154\006\103\007\073\010\075\011\102\034" +
    "\116\053\112\056\106\001\001\000\022\005\153\006\103" +
    "\007\073\010\075\011\102\034\116\053\112\056\106\001" +
    "\001\000\022\005\152\006\103\007\073\010\075\011\102" +
    "\034\116\053\112\056\106\001\001\000\022\005\151\006" +
    "\103\007\073\010\075\011\102\034\116\053\112\056\106" +
    "\001\001\000\022\005\150\006\103\007\073\010\075\011" +
    "\102\034\116\053\112\056\106\001\001\000\022\005\147" +
    "\006\103\007\073\010\075\011\102\034\116\053\112\056" +
    "\106\001\001\000\022\005\146\006\103\007\073\010\075" +
    "\011\102\034\116\053\112\056\106\001\001\000\022\005" +
    "\145\006\103\007\073\010\075\011\102\034\116\053\112" +
    "\056\106\001\001\000\022\005\144\006\103\007\073\010" +
    "\075\011\102\034\116\053\112\056\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\165\006\103\007\073\010\075\011\102\034\116\053\112" +
    "\056\106\001\001\000\002\001\001\000\022\005\167\006" +
    "\103\007\073\010\075\011\102\034\116\053\112\056\106" +
    "\001\001\000\002\001\001\000\022\005\171\006\103\007" +
    "\073\010\075\011\102\034\116\053\112\056\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\174\006" +
    "\103\007\073\010\075\011\102\034\116\053\112\056\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\222\006\103\007\073\010\075\011\102\034\116\053\112" +
    "\056\106\001\001\000\002\001\001\000\024\005\201\006" +
    "\103\007\073\010\075\011\102\034\116\050\202\053\112" +
    "\056\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\206\006\103\007\073\010\075" +
    "\011\102\034\116\053\112\056\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\213\006\103\007\073\010" +
    "\075\011\102\034\116\053\112\056\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\216\006\103\007" +
    "\073\010\075\011\102\034\116\053\112\056\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\225\006\103\007\073\010\075\011\102\034\116\053" +
    "\112\056\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\230\006\103\007\073\010\075\011\102\034" +
    "\116\053\112\056\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\250" +
    "\060\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\250\060\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\270\006\103\007\073\010\075\011\102\034" +
    "\116\053\112\056\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\003\273\004\032\012\050\013\057\014" +
    "\041\016\046\017\056\020\024\021\027\022\055\023\047" +
    "\024\037\026\004\027\022\030\011\031\061\032\042\033" +
    "\051\035\012\036\045\043\040\044\003\047\026\052\033" +
    "\054\052\055\007\057\016\001\001\000\066\004\070\012" +
    "\050\013\057\014\041\016\046\017\056\020\024\021\027" +
    "\022\055\023\047\024\037\026\004\027\022\030\011\031" +
    "\061\032\042\033\051\035\012\036\045\043\040\044\003" +
    "\047\026\052\033\054\052\055\007\057\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\300\001\001" +
    "\000\002\001\001\000\004\015\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\305\006\103\007\073" +
    "\010\075\011\102\034\116\053\112\056\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\005" +
    "\314\006\103\007\073\010\075\011\102\034\116\041\313" +
    "\053\112\056\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\320\006\103\007\073\010\075\011\102" +
    "\034\116\053\112\056\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\325\001\001\000\024\005\314\006" +
    "\103\007\073\010\075\011\102\034\116\041\334\053\112" +
    "\056\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\005\314\006\103\007\073\010\075" +
    "\011\102\034\116\041\331\053\112\056\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\341\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\347\006\103\007\073\010\075\011\102" +
    "\034\116\053\112\056\106\001\001\000\002\001\001\000" +
    "\022\005\351\006\103\007\073\010\075\011\102\034\116" +
    "\053\112\056\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\201" +
    "\006\103\007\073\010\075\011\102\034\116\050\356\053" +
    "\112\056\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\u0115\006\103\007\073\010\075\011\102\034\116\053" +
    "\112\056\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\u0103\006\103\007\073\010\075\011\102\034" +
    "\116\053\112\056\106\001\001\000\002\001\001\000\024" +
    "\005\201\006\103\007\073\010\075\011\102\034\116\050" +
    "\374\053\112\056\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\u010a\006\103" +
    "\007\073\010\075\011\102\034\116\053\112\056\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\u010f\006\103\007\073\010" +
    "\075\011\102\034\116\053\112\056\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\u0113\006\103\007\073\010\075\011\102\034\116\053\112" +
    "\056\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\u011b\006\103" +
    "\007\073\010\075\011\102\034\116\053\112\056\106\001" +
    "\001\000\022\005\u0119\006\103\007\073\010\075\011\102" +
    "\034\116\053\112\056\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\u011e\006\103\007\073\010\075\011\102\034\116\053" +
    "\112\056\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\u0121\006\103\007\073\010\075\011\102\034" +
    "\116\053\112\056\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\003\u0124\004\032\012\050\013\057\014" +
    "\041\016\046\017\056\020\024\021\027\022\055\023\047" +
    "\024\037\026\004\027\022\030\011\031\061\032\042\033" +
    "\051\035\012\036\045\043\040\044\003\047\026\052\033" +
    "\054\052\055\007\057\016\001\001\000\066\004\070\012" +
    "\050\013\057\014\041\016\046\017\056\020\024\021\027" +
    "\022\055\023\047\024\037\026\004\027\022\030\011\031" +
    "\061\032\042\033\051\035\012\036\045\043\040\044\003" +
    "\047\026\052\033\054\052\055\007\057\016\001\001\000" +
    "\002\001\001\000\004\020\u0127\001\001\000\002\001\001" +
    "\000\070\003\u0129\004\032\012\050\013\057\014\041\016" +
    "\046\017\056\020\024\021\027\022\055\023\047\024\037" +
    "\026\004\027\022\030\011\031\061\032\042\033\051\035" +
    "\012\036\045\043\040\044\003\047\026\052\033\054\052" +
    "\055\007\057\016\001\001\000\066\004\070\012\050\013" +
    "\057\014\041\016\046\017\056\020\024\021\027\022\055" +
    "\023\047\024\037\026\004\027\022\030\011\031\061\032" +
    "\042\033\051\035\012\036\045\043\040\044\003\047\026" +
    "\052\033\054\052\055\007\057\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u012f" +
    "\006\103\007\073\010\075\011\102\034\116\037\u0130\040" +
    "\u012e\053\112\056\106\001\001\000\024\005\u012f\006\103" +
    "\007\073\010\075\011\102\034\116\037\u013b\053\112\056" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\003\u0134\004\032\012" +
    "\050\013\057\014\041\016\046\017\056\020\024\021\027" +
    "\022\055\023\047\024\037\026\004\027\022\030\011\031" +
    "\061\032\042\033\051\035\012\036\045\043\040\044\003" +
    "\047\026\052\033\054\052\055\007\057\016\001\001\000" +
    "\066\004\070\012\050\013\057\014\041\016\046\017\056" +
    "\020\024\021\027\022\055\023\047\024\037\026\004\027" +
    "\022\030\011\031\061\032\042\033\051\035\012\036\045" +
    "\043\040\044\003\047\026\052\033\054\052\055\007\057" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\003\u0139\004\032\012\050\013\057\014" +
    "\041\016\046\017\056\020\024\021\027\022\055\023\047" +
    "\024\037\026\004\027\022\030\011\031\061\032\042\033" +
    "\051\035\012\036\045\043\040\044\003\047\026\052\033" +
    "\054\052\055\007\057\016\001\001\000\066\004\070\012" +
    "\050\013\057\014\041\016\046\017\056\020\024\021\027" +
    "\022\055\023\047\024\037\026\004\027\022\030\011\031" +
    "\061\032\042\033\051\035\012\036\045\043\040\044\003" +
    "\047\026\052\033\054\052\055\007\057\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\003\u0140\004\032\012" +
    "\050\013\057\014\041\016\046\017\056\020\024\021\027" +
    "\022\055\023\047\024\037\026\004\027\022\030\011\031" +
    "\061\032\042\033\051\035\012\036\045\043\040\044\003" +
    "\047\026\052\033\054\052\055\007\057\016\001\001\000" +
    "\066\004\070\012\050\013\057\014\041\016\046\017\056" +
    "\020\024\021\027\022\055\023\047\024\037\026\004\027" +
    "\022\030\011\031\061\032\042\033\051\035\012\036\045" +
    "\043\040\044\003\047\026\052\033\054\052\055\007\057" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u0145\001\001\000\002\001\001\000\022\005\u0146\006" +
    "\103\007\073\010\075\011\102\034\116\053\112\056\106" +
    "\001\001\000\002\001\001\000\004\025\u0149\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\003\u014c\004\032\012\050\013\057\014\041\016\046\017" +
    "\056\020\024\021\027\022\055\023\047\024\037\026\004" +
    "\027\022\030\011\031\061\032\042\033\051\035\012\036" +
    "\045\043\040\044\003\047\026\052\033\054\052\055\007" +
    "\057\016\001\001\000\066\004\070\012\050\013\057\014" +
    "\041\016\046\017\056\020\024\021\027\022\055\023\047" +
    "\024\037\026\004\027\022\030\011\031\061\032\042\033" +
    "\051\035\012\036\045\043\040\044\003\047\026\052\033" +
    "\054\052\055\007\057\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\u0152\006\103\007\073\010\075" +
    "\011\102\034\116\053\112\056\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\035\u0159\045" +
    "\u0158\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u0160\001\001\000" +
    "\002\001\001\000\070\003\u015e\004\032\012\050\013\057" +
    "\014\041\016\046\017\056\020\024\021\027\022\055\023" +
    "\047\024\037\026\004\027\022\030\011\031\061\032\042" +
    "\033\051\035\012\036\045\043\040\044\003\047\026\052" +
    "\033\054\052\055\007\057\016\001\001\000\066\004\070" +
    "\012\050\013\057\014\041\016\046\017\056\020\024\021" +
    "\027\022\055\023\047\024\037\026\004\027\022\030\011" +
    "\031\061\032\042\033\051\035\012\036\045\043\040\044" +
    "\003\047\026\052\033\054\052\055\007\057\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\003\u0163\004\032\012\050\013\057\014\041\016\046" +
    "\017\056\020\024\021\027\022\055\023\047\024\037\026" +
    "\004\027\022\030\011\031\061\032\042\033\051\035\012" +
    "\036\045\043\040\044\003\047\026\052\033\054\052\055" +
    "\007\057\016\001\001\000\066\004\070\012\050\013\057" +
    "\014\041\016\046\017\056\020\024\021\027\022\055\023" +
    "\047\024\037\026\004\027\022\030\011\031\061\032\042" +
    "\033\051\035\012\036\045\043\040\044\003\047\026\052" +
    "\033\054\052\055\007\057\016\001\001\000\002\001\001" +
    "\000\022\005\u0166\006\103\007\073\010\075\011\102\034" +
    "\116\053\112\056\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= println 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= declaracion_vectores 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= declaracion_lista 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= append_lista 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= asignacion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= asignacion_vector 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= incremento_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= decremento_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= sentencia_match 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= ciclo_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= ciclo_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= ciclo_dowhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= transferencia_break 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= transferencia_continue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= metodo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= instruccion_start 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= llamada_metodo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= declaracion_struct 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= instancia_struct 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= asignacion_struct 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= funcion_return 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // println ::= IMPRIMIR PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Println(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("println",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_variable ::= mutabilidad ID DOSPUNTOS tipos_variable inicializar_variable 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionVariable(e, b, c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inicializar_variable ::= IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inicializar_variable ::= FINCADENA 
            {
              Instruccion RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asignacion_variable ::= ID IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // incremento_variable ::= ID MAS MAS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incremento_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // decremento_variable ::= ID MENOS MENOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionResta(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decremento_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_vectores ::= mutabilidad ID DOSPUNTOS tipos_variable CORCHETE1 CORCHETE2 IGUAL CORCHETE1 lista_vector_u CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorUnaDimension(e,b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_vectores",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_vectores ::= mutabilidad ID DOSPUNTOS tipos_variable CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 lista_vector_d CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> c = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorDosDimensiones(e,b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_vectores",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_vector_u ::= lista_vector_u COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_u",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_vector_u ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<> (); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_u",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_vector_d ::= lista_vector_d COMA CORCHETE1 lista_vector_u CORCHETE2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_d",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_vector_d ::= CORCHETE1 lista_vector_u CORCHETE2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<> (); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_d",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion_vector ::= ID CORCHETE1 expresion CORCHETE2 IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVectorUnaDimension(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_vector",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion_vector ::= ID CORCHETE1 expresion CORCHETE2 CORCHETE1 expresion CORCHETE2 IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVectorDosDimensiones(a, b, c, d, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_vector",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion_lista ::= LIST MENOR tipos_variable MAYOR ID IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		RESULT = new DeclaracionLista(b,a, aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_lista",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // append_lista ::= ID PUNTO APPEND PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AppendLista(a, b, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("append_lista",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaIf(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 ELSE LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaIfElse(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 ELSE sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaElseIF(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia_match ::= MATCH expresion LLAVE1 casos_match DEFAULT FLECHA LLAVE1 instrucciones LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<CasoMatch> b = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new SentenciaMatch(a, b, c, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia_match ::= MATCH expresion LLAVE1 casos_match LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoMatch> b = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new SentenciaMatch(a, b, null, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia_match ::= MATCH expresion LLAVE1 DEFAULT FLECHA LLAVE1 instrucciones LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new SentenciaMatch(a, null, c, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // casos_match ::= casos_match caso_match 
            {
              LinkedList<CasoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoMatch> a = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoMatch b = (CasoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_match",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // casos_match ::= caso_match 
            {
              LinkedList<CasoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoMatch a = (CasoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_match",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // caso_match ::= expresion FLECHA LLAVE1 instrucciones LLAVE2 
            {
              CasoMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CasoMatch(a, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_match",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ciclo_for ::= FOR PAR1 asignacion_variable expresion FINCADENA actualizar_for PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaFor(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // actualizar_for ::= ID IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // actualizar_for ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // actualizar_for ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionResta(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ciclo_while ::= WHILE PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ciclo_dowhile ::= DO LLAVE1 instrucciones LLAVE2 WHILE PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaDoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_dowhile",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // transferencia_break ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaBreak(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_break",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // transferencia_continue ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaContinue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_continue",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // metodo ::= tipos_variable ID PAR1 parametros_metodo PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // metodo ::= tipos_variable ID PAR1 PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros_metodo ::= parametros_metodo COMA tipos_variable ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_metodo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros_metodo ::= tipos_variable ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_metodo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracion_struct ::= STRUCT LLAVE1 lista_struct LLAVE2 ID FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DeclaracionStruct(a,b,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_struct",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lista_struct ::= lista_struct ID DOSPUNTOS tipo_struct FINCADENA 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", b);
                                            hm2.put("tipo", c);
                                            hm2.put ("valor", null);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_struct",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lista_struct ::= ID DOSPUNTOS tipo_struct FINCADENA 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",a);
                                            hm.put("tipo", b);
                                            hm.put ("valor", null);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_struct",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_struct ::= tipos_variable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_struct",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo_struct ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_struct",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // instancia_struct ::= mutabilidad ID DOSPUNTOS ID IGUAL LLAVE1 parametros_struct LLAVE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new InstanciaStruct(a,b,c,d, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instancia_struct",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros_struct ::= parametros_struct COMA ID DOSPUNTOS expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(c);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_struct",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros_struct ::= ID DOSPUNTOS expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(c);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_struct",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignacion_struct ::= ID PUNTO ID IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionBasicaStruct(a,b,c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_struct",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asignacion_struct ::= ID PUNTO ID PUNTO ID IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionStructAnidado(a,b,c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_struct",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // instruccion_start ::= STARTWITH ID PAR1 parametros_llamada PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new StartWith(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_start",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // instruccion_start ::= STARTWITH ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new StartWith(a, new LinkedList<Instruccion>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_start",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // llamada_metodo ::= ID PAR1 parametros_llamada PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new LlamadaMetodo(a,b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metodo",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // llamada_metodo ::= ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT= new LlamadaMetodo(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metodo",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // llamada_funcion ::= ID PAR1 parametros_llamada PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new LlamadaMetodo(a,b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // llamada_funcion ::= ID PAR1 PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT= new LlamadaMetodo(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametros_llamada ::= parametros_llamada COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametros_llamada ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // funcion_return ::= RETURN expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FuncionReturn(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_return",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // funcion_return ::= RETURN FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FuncionReturn(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_return",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tipos_variable ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tipos_variable ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.DECIMAL);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tipos_variable ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipos_variable ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipos_variable ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipos_variable ::= VOID 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.VOID);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // mutabilidad ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // mutabilidad ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= expresionAritmetica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= expresionRelacional 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= expresionLogica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= funciones_nativas 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= castearExpresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= llamada_funcion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= acceso_struct 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(TipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= ID CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVectorUnaDimension(a, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= ID CORCHETE1 expresion CORCHETE2 CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVectorDosDimensiones(a, b, c, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= ID PUNTO REMOVE PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new RemoveLista(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresionAritmetica ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionNegacionU(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresionAritmetica ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionSuma(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresionAritmetica ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionResta(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresionAritmetica ::= expresion MULT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresionAritmetica ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDivision (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresionAritmetica ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionModulo (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresionAritmetica ::= expresion POTENCIA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionPotencia (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresionAritmetica ::= PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresionRelacional ::= expresion DOBLEIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Igualacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresionRelacional ::= expresion DIFERENTE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Diferenciacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresionRelacional ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresionRelacional ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresionRelacional ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresionRelacional ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresionLogica ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorNot(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresionLogica ::= expresion XOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorXor(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresionLogica ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAnd(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresionLogica ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOr(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // funciones_nativas ::= ROUND PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionRound(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // funciones_nativas ::= LENGTH PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionLength(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // funciones_nativas ::= TOSTRING PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionToString(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // funciones_nativas ::= ID PUNTO FIND PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionFind(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // castearExpresion ::= PAR1 INT PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.ENTERO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // castearExpresion ::= PAR1 DOUBLE PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.DECIMAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // castearExpresion ::= PAR1 CHAR PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.CARACTER, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // acceso_struct ::= ID PUNTO ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoStructBasico(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_struct",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // acceso_struct ::= ID PUNTO ID PUNTO ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoStructAnidado(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_struct",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
