
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.rudyreyes.javacraft.controlador.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.javacraft.modelo.abstracto.Instruccion;
import com.rudyreyes.javacraft.modelo.simbolo.*;
import com.rudyreyes.javacraft.modelo.instrucciones.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciaControl.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciasTransferencia.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciasCiclicas.*;
import com.rudyreyes.javacraft.modelo.instrucciones.vectores.*;
import com.rudyreyes.javacraft.modelo.instrucciones.listas.*;
import com.rudyreyes.javacraft.modelo.expresiones.Nativo;
import com.rudyreyes.javacraft.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.javacraft.modelo.expresiones.relacionales.*;
import com.rudyreyes.javacraft.modelo.expresiones.logicas.*;
import com.rudyreyes.javacraft.modelo.expresiones.casteos.*;
import com.rudyreyes.javacraft.modelo.expresiones.variables.*;
import com.rudyreyes.javacraft.modelo.expresiones.accesovector.*;
import com.rudyreyes.javacraft.modelo.expresiones.funcionesNativas.*;
import com.rudyreyes.javacraft.modelo.errores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\012\007\000\002\013\007\000\002\015\005\000\002" +
    "\015\003\000\002\014\006\000\002\016\006\000\002\017" +
    "\006\000\002\030\015\000\002\030\017\000\002\041\005" +
    "\000\002\041\003\000\002\042\007\000\002\042\005\000" +
    "\002\031\011\000\002\031\014\000\002\032\015\000\002" +
    "\033\011\000\002\020\011\000\002\020\015\000\002\020" +
    "\013\000\002\021\014\000\002\021\007\000\002\021\013" +
    "\000\002\040\004\000\002\040\003\000\002\037\007\000" +
    "\002\022\014\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\023\011\000\002\024\013\000\002\026" +
    "\004\000\002\027\004\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\036\003\000\002\036\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\006\000\002\005\011\000\002\005\010\000\002" +
    "\006\004\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\010\004\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\034\006\000\002\034\006" +
    "\000\002\034\006\000\002\034\010\000\002\011\006\000" +
    "\002\011\006\000\002\011\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\034\003\036\007\020\011\015\025\017\027" +
    "\042\032\041\033\011\034\024\061\035\062\043\063\010" +
    "\076\031\077\006\001\002\000\004\007\355\001\002\000" +
    "\036\002\000\003\036\007\020\011\015\025\017\027\042" +
    "\032\041\033\011\034\024\061\035\062\043\063\010\076" +
    "\031\077\006\001\002\000\004\010\354\001\002\000\040" +
    "\002\ufff6\003\ufff6\007\ufff6\011\ufff6\024\ufff6\025\ufff6\027" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\061\ufff6\062\ufff6\063\ufff6" +
    "\076\ufff6\077\ufff6\001\002\000\004\037\335\001\002\000" +
    "\004\012\327\001\002\000\040\002\ufff4\003\ufff4\007\ufff4" +
    "\011\ufff4\024\ufff4\025\ufff4\027\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\061\ufff4\062\ufff4\063\ufff4\076\ufff4\077\ufff4\001\002" +
    "\000\040\002\ufff5\003\ufff5\007\ufff5\011\ufff5\024\ufff5\025" +
    "\ufff5\027\ufff5\032\ufff5\033\ufff5\034\ufff5\061\ufff5\062\ufff5" +
    "\063\ufff5\076\ufff5\077\ufff5\001\002\000\040\002\ufffe\003" +
    "\ufffe\007\ufffe\011\ufffe\024\ufffe\025\ufffe\027\ufffe\032\ufffe" +
    "\033\ufffe\034\ufffe\061\ufffe\062\ufffe\063\ufffe\076\ufffe\077" +
    "\ufffe\001\002\000\004\012\323\001\002\000\040\002\ufff7" +
    "\003\ufff7\007\ufff7\011\ufff7\024\ufff7\025\ufff7\027\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\061\ufff7\062\ufff7\063\ufff7\076\ufff7" +
    "\077\ufff7\001\002\000\004\012\310\001\002\000\014\014" +
    "\262\015\263\055\242\056\260\065\261\001\002\000\040" +
    "\002\ufff8\003\ufff8\007\ufff8\011\ufff8\024\ufff8\025\ufff8\027" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\076\ufff8\077\ufff8\001\002\000\040\002\uffee\003\uffee\007" +
    "\uffee\011\uffee\024\uffee\025\uffee\027\uffee\032\uffee\033\uffee" +
    "\034\uffee\061\uffee\062\uffee\063\uffee\076\uffee\077\uffee\001" +
    "\002\000\040\002\ufff9\003\ufff9\007\ufff9\011\ufff9\024\ufff9" +
    "\025\ufff9\027\ufff9\032\ufff9\033\ufff9\034\ufff9\061\ufff9\062" +
    "\ufff9\063\ufff9\076\ufff9\077\ufff9\001\002\000\004\023\250" +
    "\001\002\000\004\002\247\001\002\000\040\002\ufff3\003" +
    "\ufff3\007\ufff3\011\ufff3\024\ufff3\025\ufff3\027\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\061\ufff3\062\ufff3\063\ufff3\076\ufff3\077" +
    "\ufff3\001\002\000\040\002\ufffd\003\ufffd\007\ufffd\011\ufffd" +
    "\024\ufffd\025\ufffd\027\ufffd\032\ufffd\033\ufffd\034\ufffd\061" +
    "\ufffd\062\ufffd\063\ufffd\076\ufffd\077\ufffd\001\002\000\040" +
    "\002\ufff1\003\ufff1\007\ufff1\011\ufff1\024\ufff1\025\ufff1\027" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\061\ufff1\062\ufff1\063\ufff1" +
    "\076\ufff1\077\ufff1\001\002\000\004\010\246\001\002\000" +
    "\040\002\uffef\003\uffef\007\uffef\011\uffef\024\uffef\025\uffef" +
    "\027\uffef\032\uffef\033\uffef\034\uffef\061\uffef\062\uffef\063" +
    "\uffef\076\uffef\077\uffef\001\002\000\040\002\ufffb\003\ufffb" +
    "\007\ufffb\011\ufffb\024\ufffb\025\ufffb\027\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\061\ufffb\062\ufffb\063\ufffb\076\ufffb\077\ufffb" +
    "\001\002\000\040\002\ufffa\003\ufffa\007\ufffa\011\ufffa\024" +
    "\ufffa\025\ufffa\027\ufffa\032\ufffa\033\ufffa\034\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\076\ufffa\077\ufffa\001\002\000\004\007" +
    "\uffc4\001\002\000\042\002\uffec\003\uffec\007\uffec\010\245" +
    "\011\uffec\024\uffec\025\uffec\027\uffec\032\uffec\033\uffec\034" +
    "\uffec\061\uffec\062\uffec\063\uffec\076\uffec\077\uffec\001\002" +
    "\000\040\002\ufffc\003\ufffc\007\ufffc\011\ufffc\024\ufffc\025" +
    "\ufffc\027\ufffc\032\ufffc\033\ufffc\034\ufffc\061\ufffc\062\ufffc" +
    "\063\ufffc\076\ufffc\077\ufffc\001\002\000\040\002\ufff2\003" +
    "\ufff2\007\ufff2\011\ufff2\024\ufff2\025\ufff2\027\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\061\ufff2\062\ufff2\063\ufff2\076\ufff2\077" +
    "\ufff2\001\002\000\004\012\221\001\002\000\032\004\050" +
    "\005\065\006\051\007\056\012\064\015\046\043\053\070" +
    "\060\071\063\072\057\074\062\075\061\001\002\000\004" +
    "\007\uffc3\001\002\000\040\002\ufff0\003\ufff0\007\ufff0\011" +
    "\ufff0\024\ufff0\025\ufff0\027\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\061\ufff0\062\ufff0\063\ufff0\076\ufff0\077\ufff0\001\002\000" +
    "\054\010\uffc1\013\uffc1\014\uffc1\015\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\030\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\057\uffc1\060\uffc1\001\002\000\032\004\050\005\065\006" +
    "\051\007\056\012\064\015\046\043\053\070\060\071\063" +
    "\072\057\074\062\075\061\001\002\000\054\010\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\030\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\044\uffc0\045\uffc0\046\uffc0\057\uffc0\060\uffc0" +
    "\001\002\000\054\010\uffbb\013\uffbb\014\uffbb\015\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\030\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\057\uffbb\060\uffbb\001\002\000\054\010\uffbc" +
    "\013\uffbc\014\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\030\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\044\uffbc\045\uffbc\046\uffbc\057\uffbc\060" +
    "\uffbc\001\002\000\042\014\106\015\100\017\103\020\111" +
    "\021\104\022\101\023\171\035\105\036\112\037\102\040" +
    "\076\041\110\042\107\044\077\045\113\046\075\001\002" +
    "\000\032\004\050\005\065\006\051\007\056\012\064\015" +
    "\046\043\053\070\060\071\063\072\057\074\062\075\061" +
    "\001\002\000\054\010\uffbe\013\uffbe\014\uffbe\015\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\030\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\057\uffbe\060\uffbe\001\002\000\054\010\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\030\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\044\uffc2\045\uffc2\046\uffc2\057\uffc2\060" +
    "\uffc2\001\002\000\060\010\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\030\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\056\151\057\uffb8\060\uffb8\065\152\001" +
    "\002\000\004\012\146\001\002\000\004\012\143\001\002" +
    "\000\054\010\uffba\013\uffba\014\uffba\015\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\023\uffba\030\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\042\uffba\044\uffba\045\uffba\046" +
    "\uffba\057\uffba\060\uffba\001\002\000\054\010\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\030\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\044\uffb9\045\uffb9\046\uffb9\057\uffb9\060\uffb9\001" +
    "\002\000\004\012\140\001\002\000\040\004\050\005\065" +
    "\006\051\007\056\012\064\015\046\043\053\047\067\050" +
    "\070\051\072\070\060\071\063\072\057\074\062\075\061" +
    "\001\002\000\054\010\uffbd\013\uffbd\014\uffbd\015\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\030\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\057\uffbd\060\uffbd\001\002\000\054\010\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\030\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\044\uffbf\045\uffbf\046\uffbf\057\uffbf\060" +
    "\uffbf\001\002\000\004\013\136\001\002\000\004\013\134" +
    "\001\002\000\042\013\133\014\106\015\100\017\103\020" +
    "\111\021\104\022\101\035\105\036\112\037\102\040\076" +
    "\041\110\042\107\044\077\045\113\046\075\001\002\000" +
    "\004\013\073\001\002\000\032\004\050\005\065\006\051" +
    "\007\056\012\064\015\046\043\053\070\060\071\063\072" +
    "\057\074\062\075\061\001\002\000\054\010\uff9d\013\uff9d" +
    "\014\106\015\100\017\103\020\111\021\104\022\101\023" +
    "\uff9d\030\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\044\uff9d\045\uff9d\046\uff9d\057\uff9d\060\uff9d\001" +
    "\002\000\032\004\050\005\065\006\051\007\056\012\064" +
    "\015\046\043\053\070\060\071\063\072\057\074\062\075" +
    "\061\001\002\000\032\004\050\005\065\006\051\007\056" +
    "\012\064\015\046\043\053\070\060\071\063\072\057\074" +
    "\062\075\061\001\002\000\032\004\050\005\065\006\051" +
    "\007\056\012\064\015\046\043\053\070\060\071\063\072" +
    "\057\074\062\075\061\001\002\000\032\004\050\005\065" +
    "\006\051\007\056\012\064\015\046\043\053\070\060\071" +
    "\063\072\057\074\062\075\061\001\002\000\032\004\050" +
    "\005\065\006\051\007\056\012\064\015\046\043\053\070" +
    "\060\071\063\072\057\074\062\075\061\001\002\000\032" +
    "\004\050\005\065\006\051\007\056\012\064\015\046\043" +
    "\053\070\060\071\063\072\057\074\062\075\061\001\002" +
    "\000\032\004\050\005\065\006\051\007\056\012\064\015" +
    "\046\043\053\070\060\071\063\072\057\074\062\075\061" +
    "\001\002\000\032\004\050\005\065\006\051\007\056\012" +
    "\064\015\046\043\053\070\060\071\063\072\057\074\062" +
    "\075\061\001\002\000\032\004\050\005\065\006\051\007" +
    "\056\012\064\015\046\043\053\070\060\071\063\072\057" +
    "\074\062\075\061\001\002\000\032\004\050\005\065\006" +
    "\051\007\056\012\064\015\046\043\053\070\060\071\063" +
    "\072\057\074\062\075\061\001\002\000\032\004\050\005" +
    "\065\006\051\007\056\012\064\015\046\043\053\070\060" +
    "\071\063\072\057\074\062\075\061\001\002\000\032\004" +
    "\050\005\065\006\051\007\056\012\064\015\046\043\053" +
    "\070\060\071\063\072\057\074\062\075\061\001\002\000" +
    "\032\004\050\005\065\006\051\007\056\012\064\015\046" +
    "\043\053\070\060\071\063\072\057\074\062\075\061\001" +
    "\002\000\032\004\050\005\065\006\051\007\056\012\064" +
    "\015\046\043\053\070\060\071\063\072\057\074\062\075" +
    "\061\001\002\000\032\004\050\005\065\006\051\007\056" +
    "\012\064\015\046\043\053\070\060\071\063\072\057\074" +
    "\062\075\061\001\002\000\054\010\uffa3\013\uffa3\014\106" +
    "\015\100\017\103\020\111\021\104\022\101\023\uffa3\030" +
    "\uffa3\035\105\036\112\037\102\040\076\041\110\042\107" +
    "\044\077\045\uffa3\046\075\057\uffa3\060\uffa3\001\002\000" +
    "\054\010\uffab\013\uffab\014\106\015\100\017\103\020\111" +
    "\021\104\022\101\023\uffab\030\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\044\uffab\045\uffab\046\uffab" +
    "\057\uffab\060\uffab\001\002\000\054\010\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\030\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\044\uffb0\045\uffb0\046\uffb0\057\uffb0\060\uffb0\001\002" +
    "\000\054\010\uffa8\013\uffa8\014\106\015\100\017\103\020" +
    "\111\021\104\022\101\023\uffa8\030\uffa8\035\uffa8\036\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\042\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\057\uffa8\060\uffa8\001\002\000\054\010\uffa7\013\uffa7" +
    "\014\106\015\100\017\103\020\111\021\104\022\101\023" +
    "\uffa7\030\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7" +
    "\042\uffa7\044\uffa7\045\uffa7\046\uffa7\057\uffa7\060\uffa7\001" +
    "\002\000\054\010\uffb3\013\uffb3\014\uffb3\015\uffb3\017\103" +
    "\020\111\021\104\022\101\023\uffb3\030\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\057\uffb3\060\uffb3\001\002\000\054\010\uffac\013" +
    "\uffac\014\106\015\100\017\103\020\111\021\104\022\101" +
    "\023\uffac\030\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\044\uffac\045\uffac\046\uffac\057\uffac\060\uffac" +
    "\001\002\000\054\010\uffaf\013\uffaf\014\uffaf\015\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\030\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\044\uffaf\045" +
    "\uffaf\046\uffaf\057\uffaf\060\uffaf\001\002\000\054\010\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\030\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\044\uffb1\045\uffb1\046\uffb1\057\uffb1\060" +
    "\uffb1\001\002\000\054\010\uffaa\013\uffaa\014\106\015\100" +
    "\017\103\020\111\021\104\022\101\023\uffaa\030\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\057\uffaa\060\uffaa\001\002\000\054\010" +
    "\uffae\013\uffae\014\uffae\015\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\030\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\044\uffae\045\uffae\046\uffae\057\uffae" +
    "\060\uffae\001\002\000\054\010\uffb2\013\uffb2\014\uffb2\015" +
    "\uffb2\017\103\020\111\021\104\022\101\023\uffb2\030\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\044" +
    "\uffb2\045\uffb2\046\uffb2\057\uffb2\060\uffb2\001\002\000\054" +
    "\010\uffa5\013\uffa5\014\106\015\100\017\103\020\111\021" +
    "\104\022\101\023\uffa5\030\uffa5\035\105\036\112\037\102" +
    "\040\076\041\110\042\107\044\uffa5\045\uffa5\046\uffa5\057" +
    "\uffa5\060\uffa5\001\002\000\054\010\uffa9\013\uffa9\014\106" +
    "\015\100\017\103\020\111\021\104\022\101\023\uffa9\030" +
    "\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\057\uffa9\060\uffa9\001\002\000" +
    "\054\010\uffa4\013\uffa4\014\106\015\100\017\103\020\111" +
    "\021\104\022\101\023\uffa4\030\uffa4\035\105\036\112\037" +
    "\102\040\076\041\110\042\107\044\077\045\uffa4\046\uffa4" +
    "\057\uffa4\060\uffa4\001\002\000\054\010\uffad\013\uffad\014" +
    "\uffad\015\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\030\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\044\uffad\045\uffad\046\uffad\057\uffad\060\uffad\001\002" +
    "\000\032\004\050\005\065\006\051\007\056\012\064\015" +
    "\046\043\053\070\060\071\063\072\057\074\062\075\061" +
    "\001\002\000\054\010\uff9c\013\uff9c\014\106\015\100\017" +
    "\103\020\111\021\104\022\101\023\uff9c\030\uff9c\035\uff9c" +
    "\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\044\uff9c\045" +
    "\uff9c\046\uff9c\057\uff9c\060\uff9c\001\002\000\032\004\050" +
    "\005\065\006\051\007\056\012\064\015\046\043\053\070" +
    "\060\071\063\072\057\074\062\075\061\001\002\000\054" +
    "\010\uff9e\013\uff9e\014\106\015\100\017\103\020\111\021" +
    "\104\022\101\023\uff9e\030\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\042\uff9e\044\uff9e\045\uff9e\046\uff9e\057" +
    "\uff9e\060\uff9e\001\002\000\032\004\050\005\065\006\051" +
    "\007\056\012\064\015\046\043\053\070\060\071\063\072" +
    "\057\074\062\075\061\001\002\000\042\013\142\014\106" +
    "\015\100\017\103\020\111\021\104\022\101\035\105\036" +
    "\112\037\102\040\076\041\110\042\107\044\077\045\113" +
    "\046\075\001\002\000\054\010\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\030\uffa1" +
    "\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\057\uffa1\060\uffa1\001\002\000\032" +
    "\004\050\005\065\006\051\007\056\012\064\015\046\043" +
    "\053\070\060\071\063\072\057\074\062\075\061\001\002" +
    "\000\042\013\145\014\106\015\100\017\103\020\111\021" +
    "\104\022\101\035\105\036\112\037\102\040\076\041\110" +
    "\042\107\044\077\045\113\046\075\001\002\000\054\010" +
    "\uffa2\013\uffa2\014\uffa2\015\uffa2\017\uffa2\020\uffa2\021\uffa2" +
    "\022\uffa2\023\uffa2\030\uffa2\035\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\042\uffa2\044\uffa2\045\uffa2\046\uffa2\057\uffa2" +
    "\060\uffa2\001\002\000\032\004\050\005\065\006\051\007" +
    "\056\012\064\015\046\043\053\070\060\071\063\072\057" +
    "\074\062\075\061\001\002\000\042\013\150\014\106\015" +
    "\100\017\103\020\111\021\104\022\101\035\105\036\112" +
    "\037\102\040\076\041\110\042\107\044\077\045\113\046" +
    "\075\001\002\000\054\010\uffa0\013\uffa0\014\uffa0\015\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\030\uffa0\035" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\044\uffa0" +
    "\045\uffa0\046\uffa0\057\uffa0\060\uffa0\001\002\000\032\004" +
    "\050\005\065\006\051\007\056\012\064\015\046\043\053" +
    "\070\060\071\063\072\057\074\062\075\061\001\002\000" +
    "\006\067\154\073\153\001\002\000\004\012\160\001\002" +
    "\000\004\012\155\001\002\000\032\004\050\005\065\006" +
    "\051\007\056\012\064\015\046\043\053\070\060\071\063" +
    "\072\057\074\062\075\061\001\002\000\042\013\157\014" +
    "\106\015\100\017\103\020\111\021\104\022\101\035\105" +
    "\036\112\037\102\040\076\041\110\042\107\044\077\045" +
    "\113\046\075\001\002\000\054\010\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\030" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\057\uffb5\060\uffb5\001\002\000" +
    "\032\004\050\005\065\006\051\007\056\012\064\015\046" +
    "\043\053\070\060\071\063\072\057\074\062\075\061\001" +
    "\002\000\042\013\162\014\106\015\100\017\103\020\111" +
    "\021\104\022\101\035\105\036\112\037\102\040\076\041" +
    "\110\042\107\044\077\045\113\046\075\001\002\000\054" +
    "\010\uff9f\013\uff9f\014\uff9f\015\uff9f\017\uff9f\020\uff9f\021" +
    "\uff9f\022\uff9f\023\uff9f\030\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\044\uff9f\045\uff9f\046\uff9f\057" +
    "\uff9f\060\uff9f\001\002\000\042\014\106\015\100\017\103" +
    "\020\111\021\104\022\101\035\105\036\112\037\102\040" +
    "\076\041\110\042\107\044\077\045\113\046\075\057\164" +
    "\001\002\000\056\010\uffb7\013\uffb7\014\uffb7\015\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\030\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\056\165\057\uffb7\060\uffb7\001\002\000\032" +
    "\004\050\005\065\006\051\007\056\012\064\015\046\043" +
    "\053\070\060\071\063\072\057\074\062\075\061\001\002" +
    "\000\042\014\106\015\100\017\103\020\111\021\104\022" +
    "\101\035\105\036\112\037\102\040\076\041\110\042\107" +
    "\044\077\045\113\046\075\057\167\001\002\000\054\010" +
    "\uffb6\013\uffb6\014\uffb6\015\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\030\uffb6\035\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\044\uffb6\045\uffb6\046\uffb6\057\uffb6" +
    "\060\uffb6\001\002\000\054\010\uffa6\013\uffa6\014\106\015" +
    "\100\017\103\020\111\021\104\022\101\023\uffa6\030\uffa6" +
    "\035\105\036\112\037\102\040\076\041\110\042\107\044" +
    "\uffa6\045\uffa6\046\uffa6\057\uffa6\060\uffa6\001\002\000\034" +
    "\004\050\005\065\006\051\007\056\012\064\015\046\031" +
    "\175\043\053\070\060\071\063\072\057\074\062\075\061" +
    "\001\002\000\036\004\050\005\065\006\051\007\056\012" +
    "\064\015\046\024\211\031\212\043\053\070\060\071\063" +
    "\072\057\074\062\075\061\001\002\000\042\014\106\015" +
    "\100\017\103\020\111\021\104\022\101\030\204\035\105" +
    "\036\112\037\102\040\076\041\110\042\107\044\077\045" +
    "\113\046\075\001\002\000\036\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\012\uffd3\015\uffd3\024\uffd3\031\uffd3\043\uffd3\070" +
    "\uffd3\071\uffd3\072\uffd3\074\uffd3\075\uffd3\001\002\000\004" +
    "\030\176\001\002\000\004\023\177\001\002\000\034\003" +
    "\036\007\020\011\015\025\017\027\042\032\041\033\011" +
    "\034\024\061\035\062\043\063\010\076\031\077\006\001" +
    "\002\000\036\003\036\007\020\011\015\024\202\025\017" +
    "\027\042\032\041\033\011\034\024\061\035\062\043\063" +
    "\010\076\031\077\006\001\002\000\040\002\uffff\003\uffff" +
    "\007\uffff\011\uffff\024\uffff\025\uffff\027\uffff\032\uffff\033" +
    "\uffff\034\uffff\061\uffff\062\uffff\063\uffff\076\uffff\077\uffff" +
    "\001\002\000\004\024\203\001\002\000\040\002\uffd5\003" +
    "\uffd5\007\uffd5\011\uffd5\024\uffd5\025\uffd5\027\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\061\uffd5\062\uffd5\063\uffd5\076\uffd5\077" +
    "\uffd5\001\002\000\004\023\205\001\002\000\034\003\036" +
    "\007\020\011\015\025\017\027\042\032\041\033\011\034" +
    "\024\061\035\062\043\063\010\076\031\077\006\001\002" +
    "\000\036\003\036\007\020\011\015\024\207\025\017\027" +
    "\042\032\041\033\011\034\024\061\035\062\043\063\010" +
    "\076\031\077\006\001\002\000\036\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\012\uffd2\015\uffd2\024\uffd2\031\uffd2\043\uffd2" +
    "\070\uffd2\071\uffd2\072\uffd2\074\uffd2\075\uffd2\001\002\000" +
    "\036\004\uffd4\005\uffd4\006\uffd4\007\uffd4\012\uffd4\015\uffd4" +
    "\024\uffd4\031\uffd4\043\uffd4\070\uffd4\071\uffd4\072\uffd4\074" +
    "\uffd4\075\uffd4\001\002\000\040\002\uffd6\003\uffd6\007\uffd6" +
    "\011\uffd6\024\uffd6\025\uffd6\027\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\076\uffd6\077\uffd6\001\002" +
    "\000\004\030\213\001\002\000\004\023\214\001\002\000" +
    "\034\003\036\007\020\011\015\025\017\027\042\032\041" +
    "\033\011\034\024\061\035\062\043\063\010\076\031\077" +
    "\006\001\002\000\036\003\036\007\020\011\015\024\216" +
    "\025\017\027\042\032\041\033\011\034\024\061\035\062" +
    "\043\063\010\076\031\077\006\001\002\000\004\024\217" +
    "\001\002\000\040\002\uffd7\003\uffd7\007\uffd7\011\uffd7\024" +
    "\uffd7\025\uffd7\027\uffd7\032\uffd7\033\uffd7\034\uffd7\061\uffd7" +
    "\062\uffd7\063\uffd7\076\uffd7\077\uffd7\001\002\000\054\010" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\030\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\044\uffb4\045\uffb4\046\uffb4\057\uffb4" +
    "\060\uffb4\001\002\000\004\007\222\001\002\000\004\055" +
    "\242\001\002\000\032\004\050\005\065\006\051\007\056" +
    "\012\064\015\046\043\053\070\060\071\063\072\057\074" +
    "\062\075\061\001\002\000\042\010\225\014\106\015\100" +
    "\017\103\020\111\021\104\022\101\035\105\036\112\037" +
    "\102\040\076\041\110\042\107\044\077\045\113\046\075" +
    "\001\002\000\004\007\226\001\002\000\010\014\234\015" +
    "\236\055\235\001\002\000\004\013\230\001\002\000\004" +
    "\023\231\001\002\000\034\003\036\007\020\011\015\025" +
    "\017\027\042\032\041\033\011\034\024\061\035\062\043" +
    "\063\010\076\031\077\006\001\002\000\036\003\036\007" +
    "\020\011\015\024\233\025\017\027\042\032\041\033\011" +
    "\034\024\061\035\062\043\063\010\076\031\077\006\001" +
    "\002\000\040\002\uffd1\003\uffd1\007\uffd1\011\uffd1\024\uffd1" +
    "\025\uffd1\027\uffd1\032\uffd1\033\uffd1\034\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\076\uffd1\077\uffd1\001\002\000\004\014\241" +
    "\001\002\000\032\004\050\005\065\006\051\007\056\012" +
    "\064\015\046\043\053\070\060\071\063\072\057\074\062" +
    "\075\061\001\002\000\004\015\237\001\002\000\004\013" +
    "\uffce\001\002\000\042\013\uffd0\014\106\015\100\017\103" +
    "\020\111\021\104\022\101\035\105\036\112\037\102\040" +
    "\076\041\110\042\107\044\077\045\113\046\075\001\002" +
    "\000\004\013\uffcf\001\002\000\032\004\050\005\065\006" +
    "\051\007\056\012\064\015\046\043\053\070\060\071\063" +
    "\072\057\074\062\075\061\001\002\000\042\010\244\014" +
    "\106\015\100\017\103\020\111\021\104\022\101\035\105" +
    "\036\112\037\102\040\076\041\110\042\107\044\077\045" +
    "\113\046\075\001\002\000\066\002\uffe7\003\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\011\uffe7\012\uffe7\015\uffe7\024" +
    "\uffe7\025\uffe7\027\uffe7\032\uffe7\033\uffe7\034\uffe7\043\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\070\uffe7\071\uffe7\072\uffe7\074" +
    "\uffe7\075\uffe7\076\uffe7\077\uffe7\001\002\000\040\002\uffed" +
    "\003\uffed\007\uffed\011\uffed\024\uffed\025\uffed\027\uffed\032" +
    "\uffed\033\uffed\034\uffed\061\uffed\062\uffed\063\uffed\076\uffed" +
    "\077\uffed\001\002\000\040\002\uffcb\003\uffcb\007\uffcb\011" +
    "\uffcb\024\uffcb\025\uffcb\027\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\061\uffcb\062\uffcb\063\uffcb\076\uffcb\077\uffcb\001\002\000" +
    "\004\002\001\001\002\000\034\003\036\007\020\011\015" +
    "\025\017\027\042\032\041\033\011\034\024\061\035\062" +
    "\043\063\010\076\031\077\006\001\002\000\036\003\036" +
    "\007\020\011\015\024\252\025\017\027\042\032\041\033" +
    "\011\034\024\061\035\062\043\063\010\076\031\077\006" +
    "\001\002\000\004\033\253\001\002\000\004\012\254\001" +
    "\002\000\032\004\050\005\065\006\051\007\056\012\064" +
    "\015\046\043\053\070\060\071\063\072\057\074\062\075" +
    "\061\001\002\000\042\013\256\014\106\015\100\017\103" +
    "\020\111\021\104\022\101\035\105\036\112\037\102\040" +
    "\076\041\110\042\107\044\077\045\113\046\075\001\002" +
    "\000\004\010\257\001\002\000\040\002\uffcc\003\uffcc\007" +
    "\uffcc\011\uffcc\024\uffcc\025\uffcc\027\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\061\uffcc\062\uffcc\063\uffcc\076\uffcc\077\uffcc\001" +
    "\002\000\032\004\050\005\065\006\051\007\056\012\064" +
    "\015\046\043\053\070\060\071\063\072\057\074\062\075" +
    "\061\001\002\000\004\066\270\001\002\000\004\014\266" +
    "\001\002\000\004\015\264\001\002\000\004\010\265\001" +
    "\002\000\040\002\uffe5\003\uffe5\007\uffe5\011\uffe5\024\uffe5" +
    "\025\uffe5\027\uffe5\032\uffe5\033\uffe5\034\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\076\uffe5\077\uffe5\001\002\000\004\010\267" +
    "\001\002\000\040\002\uffe6\003\uffe6\007\uffe6\011\uffe6\024" +
    "\uffe6\025\uffe6\027\uffe6\032\uffe6\033\uffe6\034\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\076\uffe6\077\uffe6\001\002\000\004\012" +
    "\271\001\002\000\032\004\050\005\065\006\051\007\056" +
    "\012\064\015\046\043\053\070\060\071\063\072\057\074" +
    "\062\075\061\001\002\000\042\013\273\014\106\015\100" +
    "\017\103\020\111\021\104\022\101\035\105\036\112\037" +
    "\102\040\076\041\110\042\107\044\077\045\113\046\075" +
    "\001\002\000\004\010\274\001\002\000\040\002\uffdb\003" +
    "\uffdb\007\uffdb\011\uffdb\024\uffdb\025\uffdb\027\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\061\uffdb\062\uffdb\063\uffdb\076\uffdb\077" +
    "\uffdb\001\002\000\042\014\106\015\100\017\103\020\111" +
    "\021\104\022\101\035\105\036\112\037\102\040\076\041" +
    "\110\042\107\044\077\045\113\046\075\057\276\001\002" +
    "\000\006\055\300\056\277\001\002\000\032\004\050\005" +
    "\065\006\051\007\056\012\064\015\046\043\053\070\060" +
    "\071\063\072\057\074\062\075\061\001\002\000\032\004" +
    "\050\005\065\006\051\007\056\012\064\015\046\043\053" +
    "\070\060\071\063\072\057\074\062\075\061\001\002\000" +
    "\042\010\302\014\106\015\100\017\103\020\111\021\104" +
    "\022\101\035\105\036\112\037\102\040\076\041\110\042" +
    "\107\044\077\045\113\046\075\001\002\000\040\002\uffde" +
    "\003\uffde\007\uffde\011\uffde\024\uffde\025\uffde\027\uffde\032" +
    "\uffde\033\uffde\034\uffde\061\uffde\062\uffde\063\uffde\076\uffde" +
    "\077\uffde\001\002\000\042\014\106\015\100\017\103\020" +
    "\111\021\104\022\101\035\105\036\112\037\102\040\076" +
    "\041\110\042\107\044\077\045\113\046\075\057\304\001" +
    "\002\000\004\055\305\001\002\000\032\004\050\005\065" +
    "\006\051\007\056\012\064\015\046\043\053\070\060\071" +
    "\063\072\057\074\062\075\061\001\002\000\042\010\307" +
    "\014\106\015\100\017\103\020\111\021\104\022\101\035" +
    "\105\036\112\037\102\040\076\041\110\042\107\044\077" +
    "\045\113\046\075\001\002\000\040\002\uffdd\003\uffdd\007" +
    "\uffdd\011\uffdd\024\uffdd\025\uffdd\027\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\061\uffdd\062\uffdd\063\uffdd\076\uffdd\077\uffdd\001" +
    "\002\000\032\004\050\005\065\006\051\007\056\012\064" +
    "\015\046\043\053\070\060\071\063\072\057\074\062\075" +
    "\061\001\002\000\042\013\312\014\106\015\100\017\103" +
    "\020\111\021\104\022\101\035\105\036\112\037\102\040" +
    "\076\041\110\042\107\044\077\045\113\046\075\001\002" +
    "\000\004\023\313\001\002\000\034\003\036\007\020\011" +
    "\015\025\017\027\042\032\041\033\011\034\024\061\035" +
    "\062\043\063\010\076\031\077\006\001\002\000\036\003" +
    "\036\007\020\011\015\024\315\025\017\027\042\032\041" +
    "\033\011\034\024\061\035\062\043\063\010\076\031\077" +
    "\006\001\002\000\042\002\uffda\003\uffda\007\uffda\011\uffda" +
    "\024\uffda\025\uffda\026\316\027\uffda\032\uffda\033\uffda\034" +
    "\uffda\061\uffda\062\uffda\063\uffda\076\uffda\077\uffda\001\002" +
    "\000\006\023\320\025\017\001\002\000\040\002\uffd8\003" +
    "\uffd8\007\uffd8\011\uffd8\024\uffd8\025\uffd8\027\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\061\uffd8\062\uffd8\063\uffd8\076\uffd8\077" +
    "\uffd8\001\002\000\034\003\036\007\020\011\015\025\017" +
    "\027\042\032\041\033\011\034\024\061\035\062\043\063" +
    "\010\076\031\077\006\001\002\000\036\003\036\007\020" +
    "\011\015\024\322\025\017\027\042\032\041\033\011\034" +
    "\024\061\035\062\043\063\010\076\031\077\006\001\002" +
    "\000\040\002\uffd9\003\uffd9\007\uffd9\011\uffd9\024\uffd9\025" +
    "\uffd9\027\uffd9\032\uffd9\033\uffd9\034\uffd9\061\uffd9\062\uffd9" +
    "\063\uffd9\076\uffd9\077\uffd9\001\002\000\032\004\050\005" +
    "\065\006\051\007\056\012\064\015\046\043\053\070\060" +
    "\071\063\072\057\074\062\075\061\001\002\000\042\013" +
    "\325\014\106\015\100\017\103\020\111\021\104\022\101" +
    "\035\105\036\112\037\102\040\076\041\110\042\107\044" +
    "\077\045\113\046\075\001\002\000\004\010\326\001\002" +
    "\000\040\002\uffeb\003\uffeb\007\uffeb\011\uffeb\024\uffeb\025" +
    "\uffeb\027\uffeb\032\uffeb\033\uffeb\034\uffeb\061\uffeb\062\uffeb" +
    "\063\uffeb\076\uffeb\077\uffeb\001\002\000\032\004\050\005" +
    "\065\006\051\007\056\012\064\015\046\043\053\070\060" +
    "\071\063\072\057\074\062\075\061\001\002\000\042\013" +
    "\331\014\106\015\100\017\103\020\111\021\104\022\101" +
    "\035\105\036\112\037\102\040\076\041\110\042\107\044" +
    "\077\045\113\046\075\001\002\000\004\023\332\001\002" +
    "\000\034\003\036\007\020\011\015\025\017\027\042\032" +
    "\041\033\011\034\024\061\035\062\043\063\010\076\031" +
    "\077\006\001\002\000\036\003\036\007\020\011\015\024" +
    "\334\025\017\027\042\032\041\033\011\034\024\061\035" +
    "\062\043\063\010\076\031\077\006\001\002\000\040\002" +
    "\uffcd\003\uffcd\007\uffcd\011\uffcd\024\uffcd\025\uffcd\027\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\061\uffcd\062\uffcd\063\uffcd\076" +
    "\uffcd\077\uffcd\001\002\000\014\047\343\050\342\051\337" +
    "\052\336\053\340\001\002\000\012\010\uffc7\041\uffc7\055" +
    "\uffc7\056\uffc7\001\002\000\012\010\uffc8\041\uffc8\055\uffc8" +
    "\056\uffc8\001\002\000\012\010\uffc5\041\uffc5\055\uffc5\056" +
    "\uffc5\001\002\000\004\041\344\001\002\000\012\010\uffc6" +
    "\041\uffc6\055\uffc6\056\uffc6\001\002\000\012\010\uffc9\041" +
    "\uffc9\055\uffc9\056\uffc9\001\002\000\004\007\345\001\002" +
    "\000\004\055\346\001\002\000\004\064\347\001\002\000" +
    "\004\063\350\001\002\000\004\012\351\001\002\000\004" +
    "\013\352\001\002\000\004\010\353\001\002\000\040\002" +
    "\uffdc\003\uffdc\007\uffdc\011\uffdc\024\uffdc\025\uffdc\027\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\061\uffdc\062\uffdc\063\uffdc\076" +
    "\uffdc\077\uffdc\001\002\000\040\002\uffca\003\uffca\007\uffca" +
    "\011\uffca\024\uffca\025\uffca\027\uffca\032\uffca\033\uffca\034" +
    "\uffca\061\uffca\062\uffca\063\uffca\076\uffca\077\uffca\001\002" +
    "\000\004\054\356\001\002\000\014\047\343\050\342\051" +
    "\337\052\336\053\340\001\002\000\010\010\361\055\362" +
    "\056\360\001\002\000\004\057\366\001\002\000\040\002" +
    "\uffe8\003\uffe8\007\uffe8\011\uffe8\024\uffe8\025\uffe8\027\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\061\uffe8\062\uffe8\063\uffe8\076" +
    "\uffe8\077\uffe8\001\002\000\032\004\050\005\065\006\051" +
    "\007\056\012\064\015\046\043\053\070\060\071\063\072" +
    "\057\074\062\075\061\001\002\000\040\002\uffea\003\uffea" +
    "\007\uffea\011\uffea\024\uffea\025\uffea\027\uffea\032\uffea\033" +
    "\uffea\034\uffea\061\uffea\062\uffea\063\uffea\076\uffea\077\uffea" +
    "\001\002\000\042\010\365\014\106\015\100\017\103\020" +
    "\111\021\104\022\101\035\105\036\112\037\102\040\076" +
    "\041\110\042\107\044\077\045\113\046\075\001\002\000" +
    "\040\002\uffe9\003\uffe9\007\uffe9\011\uffe9\024\uffe9\025\uffe9" +
    "\027\uffe9\032\uffe9\033\uffe9\034\uffe9\061\uffe9\062\uffe9\063" +
    "\uffe9\076\uffe9\077\uffe9\001\002\000\006\055\370\056\367" +
    "\001\002\000\004\057\u0100\001\002\000\004\056\371\001" +
    "\002\000\032\004\050\005\065\006\051\007\056\012\064" +
    "\015\046\043\053\070\060\071\063\072\057\074\062\075" +
    "\061\001\002\000\006\057\374\060\375\001\002\000\044" +
    "\014\106\015\100\017\103\020\111\021\104\022\101\035" +
    "\105\036\112\037\102\040\076\041\110\042\107\044\077" +
    "\045\113\046\075\057\uffe1\060\uffe1\001\002\000\004\010" +
    "\377\001\002\000\032\004\050\005\065\006\051\007\056" +
    "\012\064\015\046\043\053\070\060\071\063\072\057\074" +
    "\062\075\061\001\002\000\044\014\106\015\100\017\103" +
    "\020\111\021\104\022\101\035\105\036\112\037\102\040" +
    "\076\041\110\042\107\044\077\045\113\046\075\057\uffe2" +
    "\060\uffe2\001\002\000\040\002\uffe4\003\uffe4\007\uffe4\011" +
    "\uffe4\024\uffe4\025\uffe4\027\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\061\uffe4\062\uffe4\063\uffe4\076\uffe4\077\uffe4\001\002\000" +
    "\004\055\u0101\001\002\000\004\056\u0102\001\002\000\004" +
    "\056\u0103\001\002\000\032\004\050\005\065\006\051\007" +
    "\056\012\064\015\046\043\053\070\060\071\063\072\057" +
    "\074\062\075\061\001\002\000\006\057\u0106\060\u0105\001" +
    "\002\000\004\056\u0108\001\002\000\004\010\u0107\001\002" +
    "\000\040\002\uffe3\003\uffe3\007\uffe3\011\uffe3\024\uffe3\025" +
    "\uffe3\027\uffe3\032\uffe3\033\uffe3\034\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\076\uffe3\077\uffe3\001\002\000\032\004\050\005" +
    "\065\006\051\007\056\012\064\015\046\043\053\070\060" +
    "\071\063\072\057\074\062\075\061\001\002\000\006\057" +
    "\u010a\060\375\001\002\000\006\057\uffe0\060\uffe0\001\002" +
    "\000\006\057\u010c\060\375\001\002\000\006\057\uffdf\060" +
    "\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\052\002\024\003\004\004\013\012\026\013" +
    "\036\014\020\016\006\017\012\020\011\021\025\022\037" +
    "\023\027\024\043\026\031\027\021\030\032\031\015\032" +
    "\033\033\022\036\003\001\001\000\002\001\001\000\046" +
    "\004\200\012\026\013\036\014\020\016\006\017\012\020" +
    "\011\021\025\022\037\023\027\024\043\026\031\027\021" +
    "\030\032\031\015\032\033\033\022\036\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\051\006\054" +
    "\007\044\010\046\011\053\034\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\217" +
    "\006\054\007\044\010\046\011\053\034\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\167\006\054\007\044\010\046\011" +
    "\053\034\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\070\006\054\007\044\010\046\011\053\034\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\073\006\054\007\044\010\046\011\053\034\065" +
    "\001\001\000\002\001\001\000\016\005\131\006\054\007" +
    "\044\010\046\011\053\034\065\001\001\000\016\005\130" +
    "\006\054\007\044\010\046\011\053\034\065\001\001\000" +
    "\016\005\127\006\054\007\044\010\046\011\053\034\065" +
    "\001\001\000\016\005\126\006\054\007\044\010\046\011" +
    "\053\034\065\001\001\000\016\005\125\006\054\007\044" +
    "\010\046\011\053\034\065\001\001\000\016\005\124\006" +
    "\054\007\044\010\046\011\053\034\065\001\001\000\016" +
    "\005\123\006\054\007\044\010\046\011\053\034\065\001" +
    "\001\000\016\005\122\006\054\007\044\010\046\011\053" +
    "\034\065\001\001\000\016\005\121\006\054\007\044\010" +
    "\046\011\053\034\065\001\001\000\016\005\120\006\054" +
    "\007\044\010\046\011\053\034\065\001\001\000\016\005" +
    "\117\006\054\007\044\010\046\011\053\034\065\001\001" +
    "\000\016\005\116\006\054\007\044\010\046\011\053\034" +
    "\065\001\001\000\016\005\115\006\054\007\044\010\046" +
    "\011\053\034\065\001\001\000\016\005\114\006\054\007" +
    "\044\010\046\011\053\034\065\001\001\000\016\005\113" +
    "\006\054\007\044\010\046\011\053\034\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\134\006\054\007\044\010\046\011\053\034\065\001" +
    "\001\000\002\001\001\000\016\005\136\006\054\007\044" +
    "\010\046\011\053\034\065\001\001\000\002\001\001\000" +
    "\016\005\140\006\054\007\044\010\046\011\053\034\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\143\006\054\007\044\010\046\011\053\034\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\146\006" +
    "\054\007\044\010\046\011\053\034\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\162\006\054\007" +
    "\044\010\046\011\053\034\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\155\006" +
    "\054\007\044\010\046\011\053\034\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\160\006\054\007" +
    "\044\010\046\011\053\034\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\165\006\054\007\044\010\046\011\053\034\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\172\006\054\007\044\010\046\011\053" +
    "\034\065\037\173\040\171\001\001\000\020\005\172\006" +
    "\054\007\044\010\046\011\053\034\065\037\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\003\177\004\013\012\026\013\036" +
    "\014\020\016\006\017\012\020\011\021\025\022\037\023" +
    "\027\024\043\026\031\027\021\030\032\031\015\032\033" +
    "\033\022\036\003\001\001\000\046\004\200\012\026\013" +
    "\036\014\020\016\006\017\012\020\011\021\025\022\037" +
    "\023\027\024\043\026\031\027\021\030\032\031\015\032" +
    "\033\033\022\036\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\003" +
    "\205\004\013\012\026\013\036\014\020\016\006\017\012" +
    "\020\011\021\025\022\037\023\027\024\043\026\031\027" +
    "\021\030\032\031\015\032\033\033\022\036\003\001\001" +
    "\000\046\004\200\012\026\013\036\014\020\016\006\017" +
    "\012\020\011\021\025\022\037\023\027\024\043\026\031" +
    "\027\021\030\032\031\015\032\033\033\022\036\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\214\004" +
    "\013\012\026\013\036\014\020\016\006\017\012\020\011" +
    "\021\025\022\037\023\027\024\043\026\031\027\021\030" +
    "\032\031\015\032\033\033\022\036\003\001\001\000\046" +
    "\004\200\012\026\013\036\014\020\016\006\017\012\020" +
    "\011\021\025\022\037\023\027\024\043\026\031\027\021" +
    "\030\032\031\015\032\033\033\022\036\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\222\001\001\000\002\001\001\000\016\005\223\006" +
    "\054\007\044\010\046\011\053\034\065\001\001\000\002" +
    "\001\001\000\004\025\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\003\231\004\013" +
    "\012\026\013\036\014\020\016\006\017\012\020\011\021" +
    "\025\022\037\023\027\024\043\026\031\027\021\030\032" +
    "\031\015\032\033\033\022\036\003\001\001\000\046\004" +
    "\200\012\026\013\036\014\020\016\006\017\012\020\011" +
    "\021\025\022\037\023\027\024\043\026\031\027\021\030" +
    "\032\031\015\032\033\033\022\036\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\237\006\054\007" +
    "\044\010\046\011\053\034\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\242\006\054\007\044\010\046\011\053\034\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\003\250" +
    "\004\013\012\026\013\036\014\020\016\006\017\012\020" +
    "\011\021\025\022\037\023\027\024\043\026\031\027\021" +
    "\030\032\031\015\032\033\033\022\036\003\001\001\000" +
    "\046\004\200\012\026\013\036\014\020\016\006\017\012" +
    "\020\011\021\025\022\037\023\027\024\043\026\031\027" +
    "\021\030\032\031\015\032\033\033\022\036\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\254\006" +
    "\054\007\044\010\046\011\053\034\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\274\006\054\007\044\010\046\011\053\034\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\271\006\054\007" +
    "\044\010\046\011\053\034\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\302\006\054\007\044\010\046" +
    "\011\053\034\065\001\001\000\016\005\300\006\054\007" +
    "\044\010\046\011\053\034\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\305\006\054\007\044\010\046\011\053\034\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\310\006\054\007\044\010\046\011\053\034\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\313\004" +
    "\013\012\026\013\036\014\020\016\006\017\012\020\011" +
    "\021\025\022\037\023\027\024\043\026\031\027\021\030" +
    "\032\031\015\032\033\033\022\036\003\001\001\000\046" +
    "\004\200\012\026\013\036\014\020\016\006\017\012\020" +
    "\011\021\025\022\037\023\027\024\043\026\031\027\021" +
    "\030\032\031\015\032\033\033\022\036\003\001\001\000" +
    "\002\001\001\000\004\020\316\001\001\000\002\001\001" +
    "\000\050\003\320\004\013\012\026\013\036\014\020\016" +
    "\006\017\012\020\011\021\025\022\037\023\027\024\043" +
    "\026\031\027\021\030\032\031\015\032\033\033\022\036" +
    "\003\001\001\000\046\004\200\012\026\013\036\014\020" +
    "\016\006\017\012\020\011\021\025\022\037\023\027\024" +
    "\043\026\031\027\021\030\032\031\015\032\033\033\022" +
    "\036\003\001\001\000\002\001\001\000\016\005\323\006" +
    "\054\007\044\010\046\011\053\034\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\327\006\054\007\044\010\046\011\053\034\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\332\004" +
    "\013\012\026\013\036\014\020\016\006\017\012\020\011" +
    "\021\025\022\037\023\027\024\043\026\031\027\021\030" +
    "\032\031\015\032\033\033\022\036\003\001\001\000\046" +
    "\004\200\012\026\013\036\014\020\016\006\017\012\020" +
    "\011\021\025\022\037\023\027\024\043\026\031\027\021" +
    "\030\032\031\015\032\033\033\022\036\003\001\001\000" +
    "\002\001\001\000\004\035\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\356\001" +
    "\001\000\004\015\362\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\363\006\054\007\044\010\046\011" +
    "\053\034\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\372\006\054\007\044\010\046" +
    "\011\053\034\065\041\371\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\375\006\054" +
    "\007\044\010\046\011\053\034\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\u0103\001\001\000\020\005\372\006\054\007" +
    "\044\010\046\011\053\034\065\041\u010a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\372\006\054\007\044\010\046\011\053" +
    "\034\065\041\u0108\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= println 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= declaracion_vectores 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= declaracion_lista 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= append_lista 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= asignacion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= asignacion_vector 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= incremento_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= decremento_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= sentencia_match 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= ciclo_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= ciclo_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= ciclo_dowhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= transferencia_break 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= transferencia_continue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // println ::= IMPRIMIR PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Println(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("println",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion_variable ::= mutabilidad ID DOSPUNTOS tipos_variable inicializar_variable 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionVariable(e, b, c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inicializar_variable ::= IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inicializar_variable ::= FINCADENA 
            {
              Instruccion RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignacion_variable ::= ID IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // incremento_variable ::= ID MAS MAS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incremento_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // decremento_variable ::= ID MENOS MENOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionResta(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decremento_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_vectores ::= mutabilidad ID DOSPUNTOS tipos_variable CORCHETE1 CORCHETE2 IGUAL CORCHETE1 lista_vector_u CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorUnaDimension(e,b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_vectores",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_vectores ::= mutabilidad ID DOSPUNTOS tipos_variable CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 lista_vector_d CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> c = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorDosDimensiones(e,b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_vectores",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_vector_u ::= lista_vector_u COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_u",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_vector_u ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<> (); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_u",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_vector_d ::= lista_vector_d COMA CORCHETE1 lista_vector_u CORCHETE2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_d",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_vector_d ::= CORCHETE1 lista_vector_u CORCHETE2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<> (); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_d",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion_vector ::= ID CORCHETE1 expresion CORCHETE2 IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVectorUnaDimension(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_vector",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacion_vector ::= ID CORCHETE1 expresion CORCHETE2 CORCHETE1 expresion CORCHETE2 IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVectorDosDimensiones(a, b, c, d, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_vector",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_lista ::= LIST MENOR tipos_variable MAYOR ID IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		RESULT = new DeclaracionLista(b,a, aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_lista",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // append_lista ::= ID PUNTO APPEND PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AppendLista(a, b, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("append_lista",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaIf(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 ELSE LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaIfElse(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 ELSE sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaElseIF(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia_match ::= MATCH expresion LLAVE1 casos_match DEFAULT FLECHA LLAVE1 instrucciones LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<CasoMatch> b = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new SentenciaMatch(a, b, c, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia_match ::= MATCH expresion LLAVE1 casos_match LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoMatch> b = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new SentenciaMatch(a, b, null, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia_match ::= MATCH expresion LLAVE1 DEFAULT FLECHA LLAVE1 instrucciones LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new SentenciaMatch(a, null, c, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // casos_match ::= casos_match caso_match 
            {
              LinkedList<CasoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoMatch> a = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoMatch b = (CasoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_match",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // casos_match ::= caso_match 
            {
              LinkedList<CasoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoMatch a = (CasoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_match",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // caso_match ::= expresion FLECHA LLAVE1 instrucciones LLAVE2 
            {
              CasoMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CasoMatch(a, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_match",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ciclo_for ::= FOR PAR1 asignacion_variable expresion FINCADENA actualizar_for PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaFor(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // actualizar_for ::= ID IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // actualizar_for ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // actualizar_for ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionResta(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ciclo_while ::= WHILE PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ciclo_dowhile ::= DO LLAVE1 instrucciones LLAVE2 WHILE PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaDoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_dowhile",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // transferencia_break ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaBreak(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_break",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // transferencia_continue ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaContinue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_continue",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipos_variable ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipos_variable ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.DECIMAL);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipos_variable ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipos_variable ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipos_variable ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // mutabilidad ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // mutabilidad ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresionAritmetica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresionRelacional 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresionLogica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= funciones_nativas 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= castearExpresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(TipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= ID CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVectorUnaDimension(a, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= ID CORCHETE1 expresion CORCHETE2 CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVectorDosDimensiones(a, b, c, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= ID PUNTO REMOVE PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new RemoveLista(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresionAritmetica ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionNegacionU(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresionAritmetica ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionSuma(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresionAritmetica ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionResta(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresionAritmetica ::= expresion MULT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresionAritmetica ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDivision (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresionAritmetica ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionModulo (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresionAritmetica ::= expresion POTENCIA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionPotencia (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresionAritmetica ::= PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresionRelacional ::= expresion DOBLEIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Igualacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresionRelacional ::= expresion DIFERENTE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Diferenciacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresionRelacional ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresionRelacional ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresionRelacional ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresionRelacional ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresionLogica ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorNot(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresionLogica ::= expresion XOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorXor(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresionLogica ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAnd(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresionLogica ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOr(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // funciones_nativas ::= ROUND PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionRound(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // funciones_nativas ::= LENGTH PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionLength(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // funciones_nativas ::= TOSTRING PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionToString(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // funciones_nativas ::= ID PUNTO FIND PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionFind(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // castearExpresion ::= PAR1 INT PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.ENTERO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // castearExpresion ::= PAR1 DOUBLE PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.DECIMAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // castearExpresion ::= PAR1 CHAR PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.CARACTER, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
