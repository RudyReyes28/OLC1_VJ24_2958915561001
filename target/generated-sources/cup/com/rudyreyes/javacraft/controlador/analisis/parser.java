
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.rudyreyes.javacraft.controlador.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.javacraft.modelo.abstracto.Instruccion;
import com.rudyreyes.javacraft.modelo.simbolo.*;
import com.rudyreyes.javacraft.modelo.instrucciones.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciaControl.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciasTransferencia.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciasCiclicas.*;
import com.rudyreyes.javacraft.modelo.instrucciones.vectores.*;
import com.rudyreyes.javacraft.modelo.expresiones.Nativo;
import com.rudyreyes.javacraft.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.javacraft.modelo.expresiones.relacionales.*;
import com.rudyreyes.javacraft.modelo.expresiones.logicas.*;
import com.rudyreyes.javacraft.modelo.expresiones.casteos.*;
import com.rudyreyes.javacraft.modelo.expresiones.variables.*;
import com.rudyreyes.javacraft.modelo.expresiones.accesovector.*;
import com.rudyreyes.javacraft.modelo.errores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\012\007\000\002\013\007\000" +
    "\002\015\005\000\002\015\003\000\002\014\006\000\002" +
    "\016\006\000\002\017\006\000\002\030\015\000\002\030" +
    "\017\000\002\036\005\000\002\036\003\000\002\037\007" +
    "\000\002\037\005\000\002\031\011\000\002\031\014\000" +
    "\002\020\011\000\002\020\015\000\002\020\013\000\002" +
    "\021\014\000\002\021\007\000\002\021\013\000\002\035" +
    "\004\000\002\035\003\000\002\034\007\000\002\022\014" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\023\011\000\002\024\013\000\002\026\004\000\002" +
    "\027\004\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\033\003" +
    "\000\002\033\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\006\000\002\005\011" +
    "\000\002\006\004\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\010\004\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\011\006\000\002" +
    "\011\006\000\002\011\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\032\003\033\007\017\011\015\025\016\027" +
    "\037\032\036\033\010\034\022\061\032\062\040\065\027" +
    "\066\006\001\002\000\004\007\277\001\002\000\034\002" +
    "\000\003\033\007\017\011\015\025\016\027\037\032\036" +
    "\033\010\034\022\061\032\062\040\065\027\066\006\001" +
    "\002\000\004\010\276\001\002\000\036\002\ufff8\003\ufff8" +
    "\007\ufff8\011\ufff8\024\ufff8\025\ufff8\027\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\061\ufff8\062\ufff8\065\ufff8\066\ufff8\001\002" +
    "\000\004\012\270\001\002\000\036\002\ufff6\003\ufff6\007" +
    "\ufff6\011\ufff6\024\ufff6\025\ufff6\027\ufff6\032\ufff6\033\ufff6" +
    "\034\ufff6\061\ufff6\062\ufff6\065\ufff6\066\ufff6\001\002\000" +
    "\036\002\ufff7\003\ufff7\007\ufff7\011\ufff7\024\ufff7\025\ufff7" +
    "\027\ufff7\032\ufff7\033\ufff7\034\ufff7\061\ufff7\062\ufff7\065" +
    "\ufff7\066\ufff7\001\002\000\036\002\ufffe\003\ufffe\007\ufffe" +
    "\011\ufffe\024\ufffe\025\ufffe\027\ufffe\032\ufffe\033\ufffe\034" +
    "\ufffe\061\ufffe\062\ufffe\065\ufffe\066\ufffe\001\002\000\036" +
    "\002\ufff9\003\ufff9\007\ufff9\011\ufff9\024\ufff9\025\ufff9\027" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\061\ufff9\062\ufff9\065\ufff9" +
    "\066\ufff9\001\002\000\004\012\264\001\002\000\004\012" +
    "\251\001\002\000\012\014\230\015\231\055\211\056\227" +
    "\001\002\000\036\002\ufff0\003\ufff0\007\ufff0\011\ufff0\024" +
    "\ufff0\025\ufff0\027\ufff0\032\ufff0\033\ufff0\034\ufff0\061\ufff0" +
    "\062\ufff0\065\ufff0\066\ufff0\001\002\000\036\002\ufffa\003" +
    "\ufffa\007\ufffa\011\ufffa\024\ufffa\025\ufffa\027\ufffa\032\ufffa" +
    "\033\ufffa\034\ufffa\061\ufffa\062\ufffa\065\ufffa\066\ufffa\001" +
    "\002\000\004\023\217\001\002\000\004\002\216\001\002" +
    "\000\036\002\ufff5\003\ufff5\007\ufff5\011\ufff5\024\ufff5\025" +
    "\ufff5\027\ufff5\032\ufff5\033\ufff5\034\ufff5\061\ufff5\062\ufff5" +
    "\065\ufff5\066\ufff5\001\002\000\036\002\ufffd\003\ufffd\007" +
    "\ufffd\011\ufffd\024\ufffd\025\ufffd\027\ufffd\032\ufffd\033\ufffd" +
    "\034\ufffd\061\ufffd\062\ufffd\065\ufffd\066\ufffd\001\002\000" +
    "\036\002\ufff3\003\ufff3\007\ufff3\011\ufff3\024\ufff3\025\ufff3" +
    "\027\ufff3\032\ufff3\033\ufff3\034\ufff3\061\ufff3\062\ufff3\065" +
    "\ufff3\066\ufff3\001\002\000\004\010\215\001\002\000\036" +
    "\002\ufffb\003\ufffb\007\ufffb\011\ufffb\024\ufffb\025\ufffb\027" +
    "\ufffb\032\ufffb\033\ufffb\034\ufffb\061\ufffb\062\ufffb\065\ufffb" +
    "\066\ufffb\001\002\000\036\002\ufff1\003\ufff1\007\ufff1\011" +
    "\ufff1\024\ufff1\025\ufff1\027\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\061\ufff1\062\ufff1\065\ufff1\066\ufff1\001\002\000\004\007" +
    "\uffc8\001\002\000\040\002\uffee\003\uffee\007\uffee\010\214" +
    "\011\uffee\024\uffee\025\uffee\027\uffee\032\uffee\033\uffee\034" +
    "\uffee\061\uffee\062\uffee\065\uffee\066\uffee\001\002\000\036" +
    "\002\ufff4\003\ufff4\007\ufff4\011\ufff4\024\ufff4\025\ufff4\027" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\061\ufff4\062\ufff4\065\ufff4" +
    "\066\ufff4\001\002\000\036\002\ufffc\003\ufffc\007\ufffc\011" +
    "\ufffc\024\ufffc\025\ufffc\027\ufffc\032\ufffc\033\ufffc\034\ufffc" +
    "\061\ufffc\062\ufffc\065\ufffc\066\ufffc\001\002\000\004\012" +
    "\170\001\002\000\024\004\042\005\050\006\045\007\054" +
    "\012\053\015\046\043\056\063\051\064\057\001\002\000" +
    "\004\007\uffc7\001\002\000\036\002\ufff2\003\ufff2\007\ufff2" +
    "\011\ufff2\024\ufff2\025\ufff2\027\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\061\ufff2\062\ufff2\065\ufff2\066\ufff2\001\002\000\054" +
    "\010\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\030\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\044\uffc0\045\uffc0\046\uffc0\057" +
    "\uffc0\060\uffc0\001\002\000\054\010\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\030" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\057\uffc4\060\uffc4\001\002\000" +
    "\054\010\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\030\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\057\uffc6\060\uffc6\001\002\000\054\010\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\030\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\057\uffc1\060\uffc1\001\002" +
    "\000\024\004\042\005\050\006\045\007\054\012\053\015" +
    "\046\043\056\063\051\064\057\001\002\000\054\010\uffc3" +
    "\013\uffc3\014\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\030\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\044\uffc3\045\uffc3\046\uffc3\057\uffc3\060" +
    "\uffc3\001\002\000\054\010\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\030\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\057\uffc2\060\uffc2\001\002\000\054\010" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\030\uffbe\035\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\044\uffbe\045\uffbe\046\uffbe\057\uffbe" +
    "\060\uffbe\001\002\000\042\014\072\015\064\017\070\020" +
    "\074\021\067\022\065\023\140\035\071\036\076\037\066" +
    "\040\062\041\075\042\073\044\063\045\077\046\061\001" +
    "\002\000\032\004\042\005\050\006\045\007\054\012\053" +
    "\015\046\043\056\047\125\050\130\051\126\063\051\064" +
    "\057\001\002\000\056\010\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\030\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\056\117\057\uffbd\060\uffbd\001\002\000" +
    "\054\010\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\030\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\057\uffc5\060\uffc5\001\002\000\024\004\042\005\050\006" +
    "\045\007\054\012\053\015\046\043\056\063\051\064\057" +
    "\001\002\000\054\010\uffbf\013\uffbf\014\uffbf\015\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\030\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\057\uffbf\060\uffbf\001\002\000\054\010\uffac" +
    "\013\uffac\014\072\015\064\017\070\020\074\021\067\022" +
    "\065\023\uffac\030\uffac\035\071\036\076\037\066\040\062" +
    "\041\075\042\073\044\uffac\045\uffac\046\uffac\057\uffac\060" +
    "\uffac\001\002\000\024\004\042\005\050\006\045\007\054" +
    "\012\053\015\046\043\056\063\051\064\057\001\002\000" +
    "\024\004\042\005\050\006\045\007\054\012\053\015\046" +
    "\043\056\063\051\064\057\001\002\000\024\004\042\005" +
    "\050\006\045\007\054\012\053\015\046\043\056\063\051" +
    "\064\057\001\002\000\024\004\042\005\050\006\045\007" +
    "\054\012\053\015\046\043\056\063\051\064\057\001\002" +
    "\000\024\004\042\005\050\006\045\007\054\012\053\015" +
    "\046\043\056\063\051\064\057\001\002\000\024\004\042" +
    "\005\050\006\045\007\054\012\053\015\046\043\056\063" +
    "\051\064\057\001\002\000\024\004\042\005\050\006\045" +
    "\007\054\012\053\015\046\043\056\063\051\064\057\001" +
    "\002\000\024\004\042\005\050\006\045\007\054\012\053" +
    "\015\046\043\056\063\051\064\057\001\002\000\024\004" +
    "\042\005\050\006\045\007\054\012\053\015\046\043\056" +
    "\063\051\064\057\001\002\000\024\004\042\005\050\006" +
    "\045\007\054\012\053\015\046\043\056\063\051\064\057" +
    "\001\002\000\024\004\042\005\050\006\045\007\054\012" +
    "\053\015\046\043\056\063\051\064\057\001\002\000\024" +
    "\004\042\005\050\006\045\007\054\012\053\015\046\043" +
    "\056\063\051\064\057\001\002\000\024\004\042\005\050" +
    "\006\045\007\054\012\053\015\046\043\056\063\051\064" +
    "\057\001\002\000\024\004\042\005\050\006\045\007\054" +
    "\012\053\015\046\043\056\063\051\064\057\001\002\000" +
    "\024\004\042\005\050\006\045\007\054\012\053\015\046" +
    "\043\056\063\051\064\057\001\002\000\054\010\uffa9\013" +
    "\uffa9\014\072\015\064\017\070\020\074\021\067\022\065" +
    "\023\uffa9\030\uffa9\035\071\036\076\037\066\040\062\041" +
    "\075\042\073\044\063\045\uffa9\046\061\057\uffa9\060\uffa9" +
    "\001\002\000\054\010\uffb1\013\uffb1\014\072\015\064\017" +
    "\070\020\074\021\067\022\065\023\uffb1\030\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\057\uffb1\060\uffb1\001\002\000\054\010\uffae" +
    "\013\uffae\014\072\015\064\017\070\020\074\021\067\022" +
    "\065\023\uffae\030\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\044\uffae\045\uffae\046\uffae\057\uffae\060" +
    "\uffae\001\002\000\054\010\uffb6\013\uffb6\014\uffb6\015\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\030\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\057\uffb6\060\uffb6\001\002\000\054\010" +
    "\uffad\013\uffad\014\072\015\064\017\070\020\074\021\067" +
    "\022\065\023\uffad\030\uffad\035\uffad\036\uffad\037\uffad\040" +
    "\uffad\041\uffad\042\uffad\044\uffad\045\uffad\046\uffad\057\uffad" +
    "\060\uffad\001\002\000\054\010\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\017\070\020\074\021\067\022\065\023\uffb9\030\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\057\uffb9\060\uffb9\001\002\000\054" +
    "\010\uffb2\013\uffb2\014\072\015\064\017\070\020\074\021" +
    "\067\022\065\023\uffb2\030\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\044\uffb2\045\uffb2\046\uffb2\057" +
    "\uffb2\060\uffb2\001\002\000\054\010\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\030" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\057\uffb7\060\uffb7\001\002\000" +
    "\054\010\uffb5\013\uffb5\014\uffb5\015\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\030\uffb5\035\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\044\uffb5\045\uffb5\046\uffb5" +
    "\057\uffb5\060\uffb5\001\002\000\054\010\uffb0\013\uffb0\014" +
    "\072\015\064\017\070\020\074\021\067\022\065\023\uffb0" +
    "\030\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\044\uffb0\045\uffb0\046\uffb0\057\uffb0\060\uffb0\001\002" +
    "\000\054\010\uffb4\013\uffb4\014\uffb4\015\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\030\uffb4\035\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\044\uffb4\045\uffb4\046" +
    "\uffb4\057\uffb4\060\uffb4\001\002\000\054\010\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\017\070\020\074\021\067\022\065\023" +
    "\uffb8\030\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\044\uffb8\045\uffb8\046\uffb8\057\uffb8\060\uffb8\001" +
    "\002\000\054\010\uffab\013\uffab\014\072\015\064\017\070" +
    "\020\074\021\067\022\065\023\uffab\030\uffab\035\071\036" +
    "\076\037\066\040\062\041\075\042\073\044\uffab\045\uffab" +
    "\046\uffab\057\uffab\060\uffab\001\002\000\054\010\uffaf\013" +
    "\uffaf\014\072\015\064\017\070\020\074\021\067\022\065" +
    "\023\uffaf\030\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\044\uffaf\045\uffaf\046\uffaf\057\uffaf\060\uffaf" +
    "\001\002\000\054\010\uffaa\013\uffaa\014\072\015\064\017" +
    "\070\020\074\021\067\022\065\023\uffaa\030\uffaa\035\071" +
    "\036\076\037\066\040\062\041\075\042\073\044\063\045" +
    "\uffaa\046\uffaa\057\uffaa\060\uffaa\001\002\000\024\004\042" +
    "\005\050\006\045\007\054\012\053\015\046\043\056\063" +
    "\051\064\057\001\002\000\042\014\072\015\064\017\070" +
    "\020\074\021\067\022\065\035\071\036\076\037\066\040" +
    "\062\041\075\042\073\044\063\045\077\046\061\057\121" +
    "\001\002\000\056\010\uffbc\013\uffbc\014\uffbc\015\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\030\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\044\uffbc\045" +
    "\uffbc\046\uffbc\056\122\057\uffbc\060\uffbc\001\002\000\024" +
    "\004\042\005\050\006\045\007\054\012\053\015\046\043" +
    "\056\063\051\064\057\001\002\000\042\014\072\015\064" +
    "\017\070\020\074\021\067\022\065\035\071\036\076\037" +
    "\066\040\062\041\075\042\073\044\063\045\077\046\061" +
    "\057\124\001\002\000\054\010\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\030\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\044" +
    "\uffbb\045\uffbb\046\uffbb\057\uffbb\060\uffbb\001\002\000\004" +
    "\013\136\001\002\000\004\013\134\001\002\000\042\013" +
    "\133\014\072\015\064\017\070\020\074\021\067\022\065" +
    "\035\071\036\076\037\066\040\062\041\075\042\073\044" +
    "\063\045\077\046\061\001\002\000\004\013\131\001\002" +
    "\000\024\004\042\005\050\006\045\007\054\012\053\015" +
    "\046\043\056\063\051\064\057\001\002\000\054\010\uffa6" +
    "\013\uffa6\014\072\015\064\017\070\020\074\021\067\022" +
    "\065\023\uffa6\030\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\041\uffa6\042\uffa6\044\uffa6\045\uffa6\046\uffa6\057\uffa6\060" +
    "\uffa6\001\002\000\054\010\uffb3\013\uffb3\014\uffb3\015\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\030\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\044\uffb3" +
    "\045\uffb3\046\uffb3\057\uffb3\060\uffb3\001\002\000\024\004" +
    "\042\005\050\006\045\007\054\012\053\015\046\043\056" +
    "\063\051\064\057\001\002\000\054\010\uffa7\013\uffa7\014" +
    "\072\015\064\017\070\020\074\021\067\022\065\023\uffa7" +
    "\030\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\057\uffa7\060\uffa7\001\002" +
    "\000\024\004\042\005\050\006\045\007\054\012\053\015" +
    "\046\043\056\063\051\064\057\001\002\000\054\010\uffa8" +
    "\013\uffa8\014\072\015\064\017\070\020\074\021\067\022" +
    "\065\023\uffa8\030\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\044\uffa8\045\uffa8\046\uffa8\057\uffa8\060" +
    "\uffa8\001\002\000\026\004\042\005\050\006\045\007\054" +
    "\012\053\015\046\031\141\043\056\063\051\064\057\001" +
    "\002\000\004\030\162\001\002\000\042\014\072\015\064" +
    "\017\070\020\074\021\067\022\065\030\156\035\071\036" +
    "\076\037\066\040\062\041\075\042\073\044\063\045\077" +
    "\046\061\001\002\000\030\004\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\012\uffd7\015\uffd7\024\uffd7\031\uffd7\043\uffd7\063\uffd7" +
    "\064\uffd7\001\002\000\030\004\042\005\050\006\045\007" +
    "\054\012\053\015\046\024\145\031\146\043\056\063\051" +
    "\064\057\001\002\000\036\002\uffda\003\uffda\007\uffda\011" +
    "\uffda\024\uffda\025\uffda\027\uffda\032\uffda\033\uffda\034\uffda" +
    "\061\uffda\062\uffda\065\uffda\066\uffda\001\002\000\004\030" +
    "\150\001\002\000\030\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\012\uffd8\015\uffd8\024\uffd8\031\uffd8\043\uffd8\063\uffd8\064" +
    "\uffd8\001\002\000\004\023\151\001\002\000\032\003\033" +
    "\007\017\011\015\025\016\027\037\032\036\033\010\034" +
    "\022\061\032\062\040\065\027\066\006\001\002\000\034" +
    "\003\033\007\017\011\015\024\154\025\016\027\037\032" +
    "\036\033\010\034\022\061\032\062\040\065\027\066\006" +
    "\001\002\000\036\002\uffff\003\uffff\007\uffff\011\uffff\024" +
    "\uffff\025\uffff\027\uffff\032\uffff\033\uffff\034\uffff\061\uffff" +
    "\062\uffff\065\uffff\066\uffff\001\002\000\004\024\155\001" +
    "\002\000\036\002\uffdb\003\uffdb\007\uffdb\011\uffdb\024\uffdb" +
    "\025\uffdb\027\uffdb\032\uffdb\033\uffdb\034\uffdb\061\uffdb\062" +
    "\uffdb\065\uffdb\066\uffdb\001\002\000\004\023\157\001\002" +
    "\000\032\003\033\007\017\011\015\025\016\027\037\032" +
    "\036\033\010\034\022\061\032\062\040\065\027\066\006" +
    "\001\002\000\034\003\033\007\017\011\015\024\161\025" +
    "\016\027\037\032\036\033\010\034\022\061\032\062\040" +
    "\065\027\066\006\001\002\000\030\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\012\uffd6\015\uffd6\024\uffd6\031\uffd6\043\uffd6" +
    "\063\uffd6\064\uffd6\001\002\000\004\023\163\001\002\000" +
    "\032\003\033\007\017\011\015\025\016\027\037\032\036" +
    "\033\010\034\022\061\032\062\040\065\027\066\006\001" +
    "\002\000\034\003\033\007\017\011\015\024\165\025\016" +
    "\027\037\032\036\033\010\034\022\061\032\062\040\065" +
    "\027\066\006\001\002\000\004\024\166\001\002\000\036" +
    "\002\uffd9\003\uffd9\007\uffd9\011\uffd9\024\uffd9\025\uffd9\027" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\061\uffd9\062\uffd9\065\uffd9" +
    "\066\uffd9\001\002\000\054\010\uffba\013\uffba\014\uffba\015" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\030\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\044" +
    "\uffba\045\uffba\046\uffba\057\uffba\060\uffba\001\002\000\004" +
    "\007\171\001\002\000\004\055\211\001\002\000\024\004" +
    "\042\005\050\006\045\007\054\012\053\015\046\043\056" +
    "\063\051\064\057\001\002\000\042\010\174\014\072\015" +
    "\064\017\070\020\074\021\067\022\065\035\071\036\076" +
    "\037\066\040\062\041\075\042\073\044\063\045\077\046" +
    "\061\001\002\000\004\007\175\001\002\000\010\014\203" +
    "\015\205\055\204\001\002\000\004\013\177\001\002\000" +
    "\004\023\200\001\002\000\032\003\033\007\017\011\015" +
    "\025\016\027\037\032\036\033\010\034\022\061\032\062" +
    "\040\065\027\066\006\001\002\000\034\003\033\007\017" +
    "\011\015\024\202\025\016\027\037\032\036\033\010\034" +
    "\022\061\032\062\040\065\027\066\006\001\002\000\036" +
    "\002\uffd5\003\uffd5\007\uffd5\011\uffd5\024\uffd5\025\uffd5\027" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\061\uffd5\062\uffd5\065\uffd5" +
    "\066\uffd5\001\002\000\004\014\210\001\002\000\024\004" +
    "\042\005\050\006\045\007\054\012\053\015\046\043\056" +
    "\063\051\064\057\001\002\000\004\015\206\001\002\000" +
    "\004\013\uffd2\001\002\000\042\013\uffd4\014\072\015\064" +
    "\017\070\020\074\021\067\022\065\035\071\036\076\037" +
    "\066\040\062\041\075\042\073\044\063\045\077\046\061" +
    "\001\002\000\004\013\uffd3\001\002\000\024\004\042\005" +
    "\050\006\045\007\054\012\053\015\046\043\056\063\051" +
    "\064\057\001\002\000\042\010\213\014\072\015\064\017" +
    "\070\020\074\021\067\022\065\035\071\036\076\037\066" +
    "\040\062\041\075\042\073\044\063\045\077\046\061\001" +
    "\002\000\056\002\uffe9\003\uffe9\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\011\uffe9\012\uffe9\015\uffe9\024\uffe9\025\uffe9\027" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\043\uffe9\061\uffe9\062\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\001\002\000\036\002" +
    "\uffef\003\uffef\007\uffef\011\uffef\024\uffef\025\uffef\027\uffef" +
    "\032\uffef\033\uffef\034\uffef\061\uffef\062\uffef\065\uffef\066" +
    "\uffef\001\002\000\036\002\uffcf\003\uffcf\007\uffcf\011\uffcf" +
    "\024\uffcf\025\uffcf\027\uffcf\032\uffcf\033\uffcf\034\uffcf\061" +
    "\uffcf\062\uffcf\065\uffcf\066\uffcf\001\002\000\004\002\001" +
    "\001\002\000\032\003\033\007\017\011\015\025\016\027" +
    "\037\032\036\033\010\034\022\061\032\062\040\065\027" +
    "\066\006\001\002\000\034\003\033\007\017\011\015\024" +
    "\221\025\016\027\037\032\036\033\010\034\022\061\032" +
    "\062\040\065\027\066\006\001\002\000\004\033\222\001" +
    "\002\000\004\012\223\001\002\000\024\004\042\005\050" +
    "\006\045\007\054\012\053\015\046\043\056\063\051\064" +
    "\057\001\002\000\042\013\225\014\072\015\064\017\070" +
    "\020\074\021\067\022\065\035\071\036\076\037\066\040" +
    "\062\041\075\042\073\044\063\045\077\046\061\001\002" +
    "\000\004\010\226\001\002\000\036\002\uffd0\003\uffd0\007" +
    "\uffd0\011\uffd0\024\uffd0\025\uffd0\027\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\061\uffd0\062\uffd0\065\uffd0\066\uffd0\001\002\000" +
    "\024\004\042\005\050\006\045\007\054\012\053\015\046" +
    "\043\056\063\051\064\057\001\002\000\004\014\234\001" +
    "\002\000\004\015\232\001\002\000\004\010\233\001\002" +
    "\000\036\002\uffe7\003\uffe7\007\uffe7\011\uffe7\024\uffe7\025" +
    "\uffe7\027\uffe7\032\uffe7\033\uffe7\034\uffe7\061\uffe7\062\uffe7" +
    "\065\uffe7\066\uffe7\001\002\000\004\010\235\001\002\000" +
    "\036\002\uffe8\003\uffe8\007\uffe8\011\uffe8\024\uffe8\025\uffe8" +
    "\027\uffe8\032\uffe8\033\uffe8\034\uffe8\061\uffe8\062\uffe8\065" +
    "\uffe8\066\uffe8\001\002\000\042\014\072\015\064\017\070" +
    "\020\074\021\067\022\065\035\071\036\076\037\066\040" +
    "\062\041\075\042\073\044\063\045\077\046\061\057\237" +
    "\001\002\000\006\055\241\056\240\001\002\000\024\004" +
    "\042\005\050\006\045\007\054\012\053\015\046\043\056" +
    "\063\051\064\057\001\002\000\024\004\042\005\050\006" +
    "\045\007\054\012\053\015\046\043\056\063\051\064\057" +
    "\001\002\000\042\010\243\014\072\015\064\017\070\020" +
    "\074\021\067\022\065\035\071\036\076\037\066\040\062" +
    "\041\075\042\073\044\063\045\077\046\061\001\002\000" +
    "\036\002\uffe0\003\uffe0\007\uffe0\011\uffe0\024\uffe0\025\uffe0" +
    "\027\uffe0\032\uffe0\033\uffe0\034\uffe0\061\uffe0\062\uffe0\065" +
    "\uffe0\066\uffe0\001\002\000\042\014\072\015\064\017\070" +
    "\020\074\021\067\022\065\035\071\036\076\037\066\040" +
    "\062\041\075\042\073\044\063\045\077\046\061\057\245" +
    "\001\002\000\004\055\246\001\002\000\024\004\042\005" +
    "\050\006\045\007\054\012\053\015\046\043\056\063\051" +
    "\064\057\001\002\000\042\010\250\014\072\015\064\017" +
    "\070\020\074\021\067\022\065\035\071\036\076\037\066" +
    "\040\062\041\075\042\073\044\063\045\077\046\061\001" +
    "\002\000\036\002\uffdf\003\uffdf\007\uffdf\011\uffdf\024\uffdf" +
    "\025\uffdf\027\uffdf\032\uffdf\033\uffdf\034\uffdf\061\uffdf\062" +
    "\uffdf\065\uffdf\066\uffdf\001\002\000\024\004\042\005\050" +
    "\006\045\007\054\012\053\015\046\043\056\063\051\064" +
    "\057\001\002\000\042\013\253\014\072\015\064\017\070" +
    "\020\074\021\067\022\065\035\071\036\076\037\066\040" +
    "\062\041\075\042\073\044\063\045\077\046\061\001\002" +
    "\000\004\023\254\001\002\000\032\003\033\007\017\011" +
    "\015\025\016\027\037\032\036\033\010\034\022\061\032" +
    "\062\040\065\027\066\006\001\002\000\034\003\033\007" +
    "\017\011\015\024\256\025\016\027\037\032\036\033\010" +
    "\034\022\061\032\062\040\065\027\066\006\001\002\000" +
    "\040\002\uffde\003\uffde\007\uffde\011\uffde\024\uffde\025\uffde" +
    "\026\257\027\uffde\032\uffde\033\uffde\034\uffde\061\uffde\062" +
    "\uffde\065\uffde\066\uffde\001\002\000\006\023\261\025\016" +
    "\001\002\000\036\002\uffdc\003\uffdc\007\uffdc\011\uffdc\024" +
    "\uffdc\025\uffdc\027\uffdc\032\uffdc\033\uffdc\034\uffdc\061\uffdc" +
    "\062\uffdc\065\uffdc\066\uffdc\001\002\000\032\003\033\007" +
    "\017\011\015\025\016\027\037\032\036\033\010\034\022" +
    "\061\032\062\040\065\027\066\006\001\002\000\034\003" +
    "\033\007\017\011\015\024\263\025\016\027\037\032\036" +
    "\033\010\034\022\061\032\062\040\065\027\066\006\001" +
    "\002\000\036\002\uffdd\003\uffdd\007\uffdd\011\uffdd\024\uffdd" +
    "\025\uffdd\027\uffdd\032\uffdd\033\uffdd\034\uffdd\061\uffdd\062" +
    "\uffdd\065\uffdd\066\uffdd\001\002\000\024\004\042\005\050" +
    "\006\045\007\054\012\053\015\046\043\056\063\051\064" +
    "\057\001\002\000\042\013\266\014\072\015\064\017\070" +
    "\020\074\021\067\022\065\035\071\036\076\037\066\040" +
    "\062\041\075\042\073\044\063\045\077\046\061\001\002" +
    "\000\004\010\267\001\002\000\036\002\uffed\003\uffed\007" +
    "\uffed\011\uffed\024\uffed\025\uffed\027\uffed\032\uffed\033\uffed" +
    "\034\uffed\061\uffed\062\uffed\065\uffed\066\uffed\001\002\000" +
    "\024\004\042\005\050\006\045\007\054\012\053\015\046" +
    "\043\056\063\051\064\057\001\002\000\042\013\272\014" +
    "\072\015\064\017\070\020\074\021\067\022\065\035\071" +
    "\036\076\037\066\040\062\041\075\042\073\044\063\045" +
    "\077\046\061\001\002\000\004\023\273\001\002\000\032" +
    "\003\033\007\017\011\015\025\016\027\037\032\036\033" +
    "\010\034\022\061\032\062\040\065\027\066\006\001\002" +
    "\000\034\003\033\007\017\011\015\024\275\025\016\027" +
    "\037\032\036\033\010\034\022\061\032\062\040\065\027" +
    "\066\006\001\002\000\036\002\uffd1\003\uffd1\007\uffd1\011" +
    "\uffd1\024\uffd1\025\uffd1\027\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\061\uffd1\062\uffd1\065\uffd1\066\uffd1\001\002\000\036\002" +
    "\uffce\003\uffce\007\uffce\011\uffce\024\uffce\025\uffce\027\uffce" +
    "\032\uffce\033\uffce\034\uffce\061\uffce\062\uffce\065\uffce\066" +
    "\uffce\001\002\000\004\054\300\001\002\000\014\047\306" +
    "\050\305\051\301\052\302\053\303\001\002\000\010\010" +
    "\uffcc\055\uffcc\056\uffcc\001\002\000\010\010\uffcb\055\uffcb" +
    "\056\uffcb\001\002\000\010\010\uffc9\055\uffc9\056\uffc9\001" +
    "\002\000\010\010\310\055\311\056\307\001\002\000\010" +
    "\010\uffca\055\uffca\056\uffca\001\002\000\010\010\uffcd\055" +
    "\uffcd\056\uffcd\001\002\000\004\057\315\001\002\000\036" +
    "\002\uffea\003\uffea\007\uffea\011\uffea\024\uffea\025\uffea\027" +
    "\uffea\032\uffea\033\uffea\034\uffea\061\uffea\062\uffea\065\uffea" +
    "\066\uffea\001\002\000\024\004\042\005\050\006\045\007" +
    "\054\012\053\015\046\043\056\063\051\064\057\001\002" +
    "\000\036\002\uffec\003\uffec\007\uffec\011\uffec\024\uffec\025" +
    "\uffec\027\uffec\032\uffec\033\uffec\034\uffec\061\uffec\062\uffec" +
    "\065\uffec\066\uffec\001\002\000\042\010\314\014\072\015" +
    "\064\017\070\020\074\021\067\022\065\035\071\036\076" +
    "\037\066\040\062\041\075\042\073\044\063\045\077\046" +
    "\061\001\002\000\036\002\uffeb\003\uffeb\007\uffeb\011\uffeb" +
    "\024\uffeb\025\uffeb\027\uffeb\032\uffeb\033\uffeb\034\uffeb\061" +
    "\uffeb\062\uffeb\065\uffeb\066\uffeb\001\002\000\006\055\317" +
    "\056\316\001\002\000\004\057\327\001\002\000\004\056" +
    "\320\001\002\000\024\004\042\005\050\006\045\007\054" +
    "\012\053\015\046\043\056\063\051\064\057\001\002\000" +
    "\006\057\324\060\323\001\002\000\044\014\072\015\064" +
    "\017\070\020\074\021\067\022\065\035\071\036\076\037" +
    "\066\040\062\041\075\042\073\044\063\045\077\046\061" +
    "\057\uffe3\060\uffe3\001\002\000\024\004\042\005\050\006" +
    "\045\007\054\012\053\015\046\043\056\063\051\064\057" +
    "\001\002\000\004\010\325\001\002\000\036\002\uffe6\003" +
    "\uffe6\007\uffe6\011\uffe6\024\uffe6\025\uffe6\027\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\061\uffe6\062\uffe6\065\uffe6\066\uffe6\001" +
    "\002\000\044\014\072\015\064\017\070\020\074\021\067" +
    "\022\065\035\071\036\076\037\066\040\062\041\075\042" +
    "\073\044\063\045\077\046\061\057\uffe4\060\uffe4\001\002" +
    "\000\004\055\330\001\002\000\004\056\331\001\002\000" +
    "\004\056\332\001\002\000\024\004\042\005\050\006\045" +
    "\007\054\012\053\015\046\043\056\063\051\064\057\001" +
    "\002\000\006\057\334\060\335\001\002\000\004\010\341" +
    "\001\002\000\004\056\336\001\002\000\024\004\042\005" +
    "\050\006\045\007\054\012\053\015\046\043\056\063\051" +
    "\064\057\001\002\000\006\057\340\060\323\001\002\000" +
    "\006\057\uffe2\060\uffe2\001\002\000\036\002\uffe5\003\uffe5" +
    "\007\uffe5\011\uffe5\024\uffe5\025\uffe5\027\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\061\uffe5\062\uffe5\065\uffe5\066\uffe5\001\002" +
    "\000\006\057\343\060\323\001\002\000\006\057\uffe1\060" +
    "\uffe1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\046\002\022\003\004\004\012\012\024\013" +
    "\034\014\020\016\006\017\011\020\010\021\023\022\033" +
    "\023\025\024\040\026\030\027\017\030\027\031\013\033" +
    "\003\001\001\000\002\001\001\000\042\004\152\012\024" +
    "\013\034\014\020\016\006\017\011\020\010\021\023\022" +
    "\033\023\025\024\040\026\030\027\017\030\027\031\013" +
    "\033\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\051\006\043\007\054\010\042\011\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\166\006\043\007\054\010\042\011\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\126\006\043\007\054\010\042" +
    "\011\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\057\006\043\007\054\010\042\011\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\115\006" +
    "\043\007\054\010\042\011\046\001\001\000\014\005\114" +
    "\006\043\007\054\010\042\011\046\001\001\000\014\005" +
    "\113\006\043\007\054\010\042\011\046\001\001\000\014" +
    "\005\112\006\043\007\054\010\042\011\046\001\001\000" +
    "\014\005\111\006\043\007\054\010\042\011\046\001\001" +
    "\000\014\005\110\006\043\007\054\010\042\011\046\001" +
    "\001\000\014\005\107\006\043\007\054\010\042\011\046" +
    "\001\001\000\014\005\106\006\043\007\054\010\042\011" +
    "\046\001\001\000\014\005\105\006\043\007\054\010\042" +
    "\011\046\001\001\000\014\005\104\006\043\007\054\010" +
    "\042\011\046\001\001\000\014\005\103\006\043\007\054" +
    "\010\042\011\046\001\001\000\014\005\102\006\043\007" +
    "\054\010\042\011\046\001\001\000\014\005\101\006\043" +
    "\007\054\010\042\011\046\001\001\000\014\005\100\006" +
    "\043\007\054\010\042\011\046\001\001\000\014\005\077" +
    "\006\043\007\054\010\042\011\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\117\006\043\007\054" +
    "\010\042\011\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\122\006\043\007\054\010\042\011\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\131\006\043\007\054\010\042\011\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\134" +
    "\006\043\007\054\010\042\011\046\001\001\000\002\001" +
    "\001\000\014\005\136\006\043\007\054\010\042\011\046" +
    "\001\001\000\002\001\001\000\020\005\141\006\043\007" +
    "\054\010\042\011\046\034\142\035\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\141\006\043\007\054\010\042\011\046\034\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\151\004\012\012\024\013\034" +
    "\014\020\016\006\017\011\020\010\021\023\022\033\023" +
    "\025\024\040\026\030\027\017\030\027\031\013\033\003" +
    "\001\001\000\042\004\152\012\024\013\034\014\020\016" +
    "\006\017\011\020\010\021\023\022\033\023\025\024\040" +
    "\026\030\027\017\030\027\031\013\033\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\003\157\004\012\012\024\013\034\014" +
    "\020\016\006\017\011\020\010\021\023\022\033\023\025" +
    "\024\040\026\030\027\017\030\027\031\013\033\003\001" +
    "\001\000\042\004\152\012\024\013\034\014\020\016\006" +
    "\017\011\020\010\021\023\022\033\023\025\024\040\026" +
    "\030\027\017\030\027\031\013\033\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\163\004\012\012" +
    "\024\013\034\014\020\016\006\017\011\020\010\021\023" +
    "\022\033\023\025\024\040\026\030\027\017\030\027\031" +
    "\013\033\003\001\001\000\042\004\152\012\024\013\034" +
    "\014\020\016\006\017\011\020\010\021\023\022\033\023" +
    "\025\024\040\026\030\027\017\030\027\031\013\033\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\171\001\001\000\002\001\001\000\014" +
    "\005\172\006\043\007\054\010\042\011\046\001\001\000" +
    "\002\001\001\000\004\025\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\003\200\004" +
    "\012\012\024\013\034\014\020\016\006\017\011\020\010" +
    "\021\023\022\033\023\025\024\040\026\030\027\017\030" +
    "\027\031\013\033\003\001\001\000\042\004\152\012\024" +
    "\013\034\014\020\016\006\017\011\020\010\021\023\022" +
    "\033\023\025\024\040\026\030\027\017\030\027\031\013" +
    "\033\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\206\006\043\007\054\010\042\011\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\211\006\043\007\054\010\042" +
    "\011\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\217\004\012\012\024\013\034\014\020\016\006\017" +
    "\011\020\010\021\023\022\033\023\025\024\040\026\030" +
    "\027\017\030\027\031\013\033\003\001\001\000\042\004" +
    "\152\012\024\013\034\014\020\016\006\017\011\020\010" +
    "\021\023\022\033\023\025\024\040\026\030\027\017\030" +
    "\027\031\013\033\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\223\006\043\007\054\010\042\011" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\235\006\043\007\054\010\042\011" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\243" +
    "\006\043\007\054\010\042\011\046\001\001\000\014\005" +
    "\241\006\043\007\054\010\042\011\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\246\006\043\007\054\010\042\011\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\251\006\043\007\054\010\042\011\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\254\004\012\012" +
    "\024\013\034\014\020\016\006\017\011\020\010\021\023" +
    "\022\033\023\025\024\040\026\030\027\017\030\027\031" +
    "\013\033\003\001\001\000\042\004\152\012\024\013\034" +
    "\014\020\016\006\017\011\020\010\021\023\022\033\023" +
    "\025\024\040\026\030\027\017\030\027\031\013\033\003" +
    "\001\001\000\002\001\001\000\004\020\257\001\001\000" +
    "\002\001\001\000\044\003\261\004\012\012\024\013\034" +
    "\014\020\016\006\017\011\020\010\021\023\022\033\023" +
    "\025\024\040\026\030\027\017\030\027\031\013\033\003" +
    "\001\001\000\042\004\152\012\024\013\034\014\020\016" +
    "\006\017\011\020\010\021\023\022\033\023\025\024\040" +
    "\026\030\027\017\030\027\031\013\033\003\001\001\000" +
    "\002\001\001\000\014\005\264\006\043\007\054\010\042" +
    "\011\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\270\006\043\007\054\010\042" +
    "\011\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\003\273\004\012\012\024\013\034\014\020\016\006" +
    "\017\011\020\010\021\023\022\033\023\025\024\040\026" +
    "\030\027\017\030\027\031\013\033\003\001\001\000\042" +
    "\004\152\012\024\013\034\014\020\016\006\017\011\020" +
    "\010\021\023\022\033\023\025\024\040\026\030\027\017" +
    "\030\027\031\013\033\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\311\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\312\006" +
    "\043\007\054\010\042\011\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\321\006\043" +
    "\007\054\010\042\011\046\036\320\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\325\006\043\007\054" +
    "\010\042\011\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\332\001\001\000\016\005\321\006\043\007" +
    "\054\010\042\011\046\036\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\321\006" +
    "\043\007\054\010\042\011\046\036\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= println 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= declaracion_vectores 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= asignacion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= asignacion_vector 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= incremento_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= decremento_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= sentencia_match 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= ciclo_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= ciclo_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= ciclo_dowhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= transferencia_break 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= transferencia_continue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // println ::= IMPRIMIR PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Println(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("println",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_variable ::= mutabilidad ID DOSPUNTOS tipos_variable inicializar_variable 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionVariable(e, b, c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inicializar_variable ::= IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inicializar_variable ::= FINCADENA 
            {
              Instruccion RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignacion_variable ::= ID IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // incremento_variable ::= ID MAS MAS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incremento_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decremento_variable ::= ID MENOS MENOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionResta(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decremento_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_vectores ::= mutabilidad ID DOSPUNTOS tipos_variable CORCHETE1 CORCHETE2 IGUAL CORCHETE1 lista_vector_u CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorUnaDimension(e,b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_vectores",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_vectores ::= mutabilidad ID DOSPUNTOS tipos_variable CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 lista_vector_d CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> c = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorDosDimensiones(e,b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_vectores",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_vector_u ::= lista_vector_u COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_u",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_vector_u ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<> (); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_u",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_vector_d ::= lista_vector_d COMA CORCHETE1 lista_vector_u CORCHETE2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_d",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_vector_d ::= CORCHETE1 lista_vector_u CORCHETE2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<> (); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_d",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asignacion_vector ::= ID CORCHETE1 expresion CORCHETE2 IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVectorUnaDimension(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_vector",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // asignacion_vector ::= ID CORCHETE1 expresion CORCHETE2 CORCHETE1 expresion CORCHETE2 IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVectorDosDimensiones(a, b, c, d, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_vector",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaIf(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 ELSE LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaIfElse(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 ELSE sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaElseIF(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia_match ::= MATCH expresion LLAVE1 casos_match DEFAULT FLECHA LLAVE1 instrucciones LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<CasoMatch> b = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new SentenciaMatch(a, b, c, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia_match ::= MATCH expresion LLAVE1 casos_match LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoMatch> b = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new SentenciaMatch(a, b, null, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia_match ::= MATCH expresion LLAVE1 DEFAULT FLECHA LLAVE1 instrucciones LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new SentenciaMatch(a, null, c, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // casos_match ::= casos_match caso_match 
            {
              LinkedList<CasoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoMatch> a = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoMatch b = (CasoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_match",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // casos_match ::= caso_match 
            {
              LinkedList<CasoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoMatch a = (CasoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_match",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // caso_match ::= expresion FLECHA LLAVE1 instrucciones LLAVE2 
            {
              CasoMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CasoMatch(a, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_match",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ciclo_for ::= FOR PAR1 asignacion_variable expresion FINCADENA actualizar_for PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaFor(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // actualizar_for ::= ID IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // actualizar_for ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // actualizar_for ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionResta(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ciclo_while ::= WHILE PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ciclo_dowhile ::= DO LLAVE1 instrucciones LLAVE2 WHILE PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaDoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_dowhile",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // transferencia_break ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaBreak(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_break",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // transferencia_continue ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaContinue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_continue",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipos_variable ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipos_variable ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.DECIMAL);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipos_variable ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipos_variable ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipos_variable ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // mutabilidad ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // mutabilidad ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresionAritmetica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresionRelacional 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresionLogica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= castearExpresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(TipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= ID CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVectorUnaDimension(a, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= ID CORCHETE1 expresion CORCHETE2 CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVectorDosDimensiones(a, b, c, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresionAritmetica ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionNegacionU(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresionAritmetica ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionSuma(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresionAritmetica ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionResta(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresionAritmetica ::= expresion MULT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresionAritmetica ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDivision (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresionAritmetica ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionModulo (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresionAritmetica ::= expresion POTENCIA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionPotencia (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresionAritmetica ::= PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresionRelacional ::= expresion DOBLEIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Igualacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresionRelacional ::= expresion DIFERENTE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Diferenciacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresionRelacional ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresionRelacional ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresionRelacional ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresionRelacional ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresionLogica ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorNot(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresionLogica ::= expresion XOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorXor(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresionLogica ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAnd(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresionLogica ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOr(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // castearExpresion ::= PAR1 INT PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.ENTERO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // castearExpresion ::= PAR1 DOUBLE PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.DECIMAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // castearExpresion ::= PAR1 CHAR PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.CARACTER, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
