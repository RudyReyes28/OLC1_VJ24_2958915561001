
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.rudyreyes.javacraft.controlador.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.javacraft.modelo.abstracto.Instruccion;
import com.rudyreyes.javacraft.modelo.simbolo.*;
import com.rudyreyes.javacraft.modelo.instrucciones.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciaControl.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciasTransferencia.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciasCiclicas.*;
import com.rudyreyes.javacraft.modelo.expresiones.Nativo;
import com.rudyreyes.javacraft.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.javacraft.modelo.expresiones.relacionales.*;
import com.rudyreyes.javacraft.modelo.expresiones.logicas.*;
import com.rudyreyes.javacraft.modelo.expresiones.casteos.*;
import com.rudyreyes.javacraft.modelo.expresiones.variables.*;
import com.rudyreyes.javacraft.modelo.errores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\012\007" +
    "\000\002\013\007\000\002\015\005\000\002\015\003\000" +
    "\002\014\006\000\002\016\006\000\002\017\006\000\002" +
    "\020\011\000\002\020\015\000\002\020\013\000\002\021" +
    "\014\000\002\021\007\000\002\021\013\000\002\033\004" +
    "\000\002\033\003\000\002\032\007\000\002\022\014\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\023\011\000\002\024\013\000\002\026\004\000\002\027" +
    "\004\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\003\000" +
    "\002\031\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\006\004\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\010\004\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\011\006\000\002\011\006\000\002\011\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\032\003\031\007\016\011\014\025\015\027" +
    "\035\032\034\033\010\034\021\056\030\057\036\062\026" +
    "\063\006\001\002\000\004\007\253\001\002\000\034\002" +
    "\000\003\031\007\016\011\014\025\015\027\035\032\034" +
    "\033\010\034\021\056\030\057\036\062\026\063\006\001" +
    "\002\000\004\010\252\001\002\000\036\002\ufffa\003\ufffa" +
    "\007\ufffa\011\ufffa\024\ufffa\025\ufffa\027\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\056\ufffa\057\ufffa\062\ufffa\063\ufffa\001\002" +
    "\000\004\012\244\001\002\000\036\002\ufff8\003\ufff8\007" +
    "\ufff8\011\ufff8\024\ufff8\025\ufff8\027\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\056\ufff8\057\ufff8\062\ufff8\063\ufff8\001\002\000" +
    "\036\002\ufff9\003\ufff9\007\ufff9\011\ufff9\024\ufff9\025\ufff9" +
    "\027\ufff9\032\ufff9\033\ufff9\034\ufff9\056\ufff9\057\ufff9\062" +
    "\ufff9\063\ufff9\001\002\000\036\002\ufffe\003\ufffe\007\ufffe" +
    "\011\ufffe\024\ufffe\025\ufffe\027\ufffe\032\ufffe\033\ufffe\034" +
    "\ufffe\056\ufffe\057\ufffe\062\ufffe\063\ufffe\001\002\000\004" +
    "\012\240\001\002\000\004\012\225\001\002\000\010\014" +
    "\217\015\220\055\201\001\002\000\036\002\ufffb\003\ufffb" +
    "\007\ufffb\011\ufffb\024\ufffb\025\ufffb\027\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\056\ufffb\057\ufffb\062\ufffb\063\ufffb\001\002" +
    "\000\036\002\ufff2\003\ufff2\007\ufff2\011\ufff2\024\ufff2\025" +
    "\ufff2\027\ufff2\032\ufff2\033\ufff2\034\ufff2\056\ufff2\057\ufff2" +
    "\062\ufff2\063\ufff2\001\002\000\004\023\207\001\002\000" +
    "\004\002\206\001\002\000\036\002\ufff7\003\ufff7\007\ufff7" +
    "\011\ufff7\024\ufff7\025\ufff7\027\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\056\ufff7\057\ufff7\062\ufff7\063\ufff7\001\002\000\036" +
    "\002\ufffd\003\ufffd\007\ufffd\011\ufffd\024\ufffd\025\ufffd\027" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\056\ufffd\057\ufffd\062\ufffd" +
    "\063\ufffd\001\002\000\036\002\ufff5\003\ufff5\007\ufff5\011" +
    "\ufff5\024\ufff5\025\ufff5\027\ufff5\032\ufff5\033\ufff5\034\ufff5" +
    "\056\ufff5\057\ufff5\062\ufff5\063\ufff5\001\002\000\004\010" +
    "\205\001\002\000\036\002\ufff3\003\ufff3\007\ufff3\011\ufff3" +
    "\024\ufff3\025\ufff3\027\ufff3\032\ufff3\033\ufff3\034\ufff3\056" +
    "\ufff3\057\ufff3\062\ufff3\063\ufff3\001\002\000\004\007\uffd2" +
    "\001\002\000\040\002\ufff0\003\ufff0\007\ufff0\010\204\011" +
    "\ufff0\024\ufff0\025\ufff0\027\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\056\ufff0\057\ufff0\062\ufff0\063\ufff0\001\002\000\036\002" +
    "\ufffc\003\ufffc\007\ufffc\011\ufffc\024\ufffc\025\ufffc\027\ufffc" +
    "\032\ufffc\033\ufffc\034\ufffc\056\ufffc\057\ufffc\062\ufffc\063" +
    "\ufffc\001\002\000\036\002\ufff6\003\ufff6\007\ufff6\011\ufff6" +
    "\024\ufff6\025\ufff6\027\ufff6\032\ufff6\033\ufff6\034\ufff6\056" +
    "\ufff6\057\ufff6\062\ufff6\063\ufff6\001\002\000\004\012\160" +
    "\001\002\000\024\004\042\005\046\006\043\007\052\012" +
    "\051\015\044\043\054\060\047\061\055\001\002\000\004" +
    "\007\uffd1\001\002\000\036\002\ufff4\003\ufff4\007\ufff4\011" +
    "\ufff4\024\ufff4\025\ufff4\027\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\056\ufff4\057\ufff4\062\ufff4\063\ufff4\001\002\000\050\010" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\030\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\044\uffd0\045\uffd0\046\uffd0\001\002" +
    "\000\050\010\uffce\013\uffce\014\uffce\015\uffce\017\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\030\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\044\uffce\045\uffce\046" +
    "\uffce\001\002\000\050\010\uffca\013\uffca\014\uffca\015\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\030\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\044\uffca" +
    "\045\uffca\046\uffca\001\002\000\050\010\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\030\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\001\002\000\024\004\042" +
    "\005\046\006\043\007\052\012\051\015\044\043\054\060" +
    "\047\061\055\001\002\000\050\010\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\030" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\001\002\000\050\010\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\030\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\044\uffcc\045\uffcc\046\uffcc\001\002\000\050" +
    "\010\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\030\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\044\uffc8\045\uffc8\046\uffc8\001" +
    "\002\000\042\014\071\015\062\017\066\020\073\021\065" +
    "\022\063\023\130\035\067\036\074\037\064\040\060\041" +
    "\072\042\070\044\061\045\075\046\057\001\002\000\032" +
    "\004\042\005\046\006\043\007\052\012\051\015\044\043" +
    "\054\047\115\050\120\051\116\060\047\061\055\001\002" +
    "\000\050\010\uffc7\013\uffc7\014\uffc7\015\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\030\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\001\002\000\050\010\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\030\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\001\002\000\024\004\042\005\046\006" +
    "\043\007\052\012\051\015\044\043\054\060\047\061\055" +
    "\001\002\000\050\010\uffc9\013\uffc9\014\uffc9\015\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\030\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\001\002\000\050\010\uffb8\013\uffb8\014\071" +
    "\015\062\017\066\020\073\021\065\022\063\023\uffb8\030" +
    "\uffb8\035\067\036\074\037\064\040\060\041\072\042\070" +
    "\044\uffb8\045\uffb8\046\uffb8\001\002\000\024\004\042\005" +
    "\046\006\043\007\052\012\051\015\044\043\054\060\047" +
    "\061\055\001\002\000\024\004\042\005\046\006\043\007" +
    "\052\012\051\015\044\043\054\060\047\061\055\001\002" +
    "\000\024\004\042\005\046\006\043\007\052\012\051\015" +
    "\044\043\054\060\047\061\055\001\002\000\024\004\042" +
    "\005\046\006\043\007\052\012\051\015\044\043\054\060" +
    "\047\061\055\001\002\000\024\004\042\005\046\006\043" +
    "\007\052\012\051\015\044\043\054\060\047\061\055\001" +
    "\002\000\024\004\042\005\046\006\043\007\052\012\051" +
    "\015\044\043\054\060\047\061\055\001\002\000\024\004" +
    "\042\005\046\006\043\007\052\012\051\015\044\043\054" +
    "\060\047\061\055\001\002\000\024\004\042\005\046\006" +
    "\043\007\052\012\051\015\044\043\054\060\047\061\055" +
    "\001\002\000\024\004\042\005\046\006\043\007\052\012" +
    "\051\015\044\043\054\060\047\061\055\001\002\000\024" +
    "\004\042\005\046\006\043\007\052\012\051\015\044\043" +
    "\054\060\047\061\055\001\002\000\024\004\042\005\046" +
    "\006\043\007\052\012\051\015\044\043\054\060\047\061" +
    "\055\001\002\000\024\004\042\005\046\006\043\007\052" +
    "\012\051\015\044\043\054\060\047\061\055\001\002\000" +
    "\024\004\042\005\046\006\043\007\052\012\051\015\044" +
    "\043\054\060\047\061\055\001\002\000\024\004\042\005" +
    "\046\006\043\007\052\012\051\015\044\043\054\060\047" +
    "\061\055\001\002\000\024\004\042\005\046\006\043\007" +
    "\052\012\051\015\044\043\054\060\047\061\055\001\002" +
    "\000\050\010\uffb5\013\uffb5\014\071\015\062\017\066\020" +
    "\073\021\065\022\063\023\uffb5\030\uffb5\035\067\036\074" +
    "\037\064\040\060\041\072\042\070\044\061\045\uffb5\046" +
    "\057\001\002\000\050\010\uffbd\013\uffbd\014\071\015\062" +
    "\017\066\020\073\021\065\022\063\023\uffbd\030\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\001\002\000\050\010\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\030\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\001\002\000\050\010\uffba" +
    "\013\uffba\014\071\015\062\017\066\020\073\021\065\022" +
    "\063\023\uffba\030\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\042\uffba\044\uffba\045\uffba\046\uffba\001\002\000" +
    "\050\010\uffc5\013\uffc5\014\uffc5\015\uffc5\017\066\020\073" +
    "\021\065\022\063\023\uffc5\030\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\001\002\000\050\010\uffb9\013\uffb9\014\071\015\062\017" +
    "\066\020\073\021\065\022\063\023\uffb9\030\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\001\002\000\050\010\uffbe\013\uffbe\014\071" +
    "\015\062\017\066\020\073\021\065\022\063\023\uffbe\030" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\001\002\000\050\010\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\030\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\044\uffc3\045\uffc3\046\uffc3\001\002\000\050" +
    "\010\uffc1\013\uffc1\014\uffc1\015\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\030\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\044\uffc1\045\uffc1\046\uffc1\001" +
    "\002\000\050\010\uffbc\013\uffbc\014\071\015\062\017\066" +
    "\020\073\021\065\022\063\023\uffbc\030\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\001\002\000\050\010\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\030\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\001\002\000\050\010\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\017\066\020\073\021\065\022\063\023" +
    "\uffc4\030\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\044\uffc4\045\uffc4\046\uffc4\001\002\000\050\010" +
    "\uffb7\013\uffb7\014\071\015\062\017\066\020\073\021\065" +
    "\022\063\023\uffb7\030\uffb7\035\067\036\074\037\064\040" +
    "\060\041\072\042\070\044\uffb7\045\uffb7\046\uffb7\001\002" +
    "\000\050\010\uffbb\013\uffbb\014\071\015\062\017\066\020" +
    "\073\021\065\022\063\023\uffbb\030\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\001\002\000\050\010\uffb6\013\uffb6\014\071\015\062" +
    "\017\066\020\073\021\065\022\063\023\uffb6\030\uffb6\035" +
    "\067\036\074\037\064\040\060\041\072\042\070\044\061" +
    "\045\uffb6\046\uffb6\001\002\000\004\013\126\001\002\000" +
    "\004\013\124\001\002\000\042\013\123\014\071\015\062" +
    "\017\066\020\073\021\065\022\063\035\067\036\074\037" +
    "\064\040\060\041\072\042\070\044\061\045\075\046\057" +
    "\001\002\000\004\013\121\001\002\000\024\004\042\005" +
    "\046\006\043\007\052\012\051\015\044\043\054\060\047" +
    "\061\055\001\002\000\050\010\uffb2\013\uffb2\014\071\015" +
    "\062\017\066\020\073\021\065\022\063\023\uffb2\030\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\044" +
    "\uffb2\045\uffb2\046\uffb2\001\002\000\050\010\uffbf\013\uffbf" +
    "\014\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\030\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\044\uffbf\045\uffbf\046\uffbf\001\002\000\024\004" +
    "\042\005\046\006\043\007\052\012\051\015\044\043\054" +
    "\060\047\061\055\001\002\000\050\010\uffb3\013\uffb3\014" +
    "\071\015\062\017\066\020\073\021\065\022\063\023\uffb3" +
    "\030\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\001\002\000\024\004\042" +
    "\005\046\006\043\007\052\012\051\015\044\043\054\060" +
    "\047\061\055\001\002\000\050\010\uffb4\013\uffb4\014\071" +
    "\015\062\017\066\020\073\021\065\022\063\023\uffb4\030" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\001\002\000\026\004\042\005" +
    "\046\006\043\007\052\012\051\015\044\031\131\043\054" +
    "\060\047\061\055\001\002\000\004\030\152\001\002\000" +
    "\042\014\071\015\062\017\066\020\073\021\065\022\063" +
    "\030\146\035\067\036\074\037\064\040\060\041\072\042" +
    "\070\044\061\045\075\046\057\001\002\000\030\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\012\uffe1\015\uffe1\024\uffe1\031" +
    "\uffe1\043\uffe1\060\uffe1\061\uffe1\001\002\000\030\004\042" +
    "\005\046\006\043\007\052\012\051\015\044\024\135\031" +
    "\136\043\054\060\047\061\055\001\002\000\036\002\uffe4" +
    "\003\uffe4\007\uffe4\011\uffe4\024\uffe4\025\uffe4\027\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\056\uffe4\057\uffe4\062\uffe4\063\uffe4" +
    "\001\002\000\004\030\140\001\002\000\030\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\012\uffe2\015\uffe2\024\uffe2\031\uffe2" +
    "\043\uffe2\060\uffe2\061\uffe2\001\002\000\004\023\141\001" +
    "\002\000\032\003\031\007\016\011\014\025\015\027\035" +
    "\032\034\033\010\034\021\056\030\057\036\062\026\063" +
    "\006\001\002\000\034\003\031\007\016\011\014\024\144" +
    "\025\015\027\035\032\034\033\010\034\021\056\030\057" +
    "\036\062\026\063\006\001\002\000\036\002\uffff\003\uffff" +
    "\007\uffff\011\uffff\024\uffff\025\uffff\027\uffff\032\uffff\033" +
    "\uffff\034\uffff\056\uffff\057\uffff\062\uffff\063\uffff\001\002" +
    "\000\004\024\145\001\002\000\036\002\uffe5\003\uffe5\007" +
    "\uffe5\011\uffe5\024\uffe5\025\uffe5\027\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\056\uffe5\057\uffe5\062\uffe5\063\uffe5\001\002\000" +
    "\004\023\147\001\002\000\032\003\031\007\016\011\014" +
    "\025\015\027\035\032\034\033\010\034\021\056\030\057" +
    "\036\062\026\063\006\001\002\000\034\003\031\007\016" +
    "\011\014\024\151\025\015\027\035\032\034\033\010\034" +
    "\021\056\030\057\036\062\026\063\006\001\002\000\030" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\012\uffe0\015\uffe0\024" +
    "\uffe0\031\uffe0\043\uffe0\060\uffe0\061\uffe0\001\002\000\004" +
    "\023\153\001\002\000\032\003\031\007\016\011\014\025" +
    "\015\027\035\032\034\033\010\034\021\056\030\057\036" +
    "\062\026\063\006\001\002\000\034\003\031\007\016\011" +
    "\014\024\155\025\015\027\035\032\034\033\010\034\021" +
    "\056\030\057\036\062\026\063\006\001\002\000\004\024" +
    "\156\001\002\000\036\002\uffe3\003\uffe3\007\uffe3\011\uffe3" +
    "\024\uffe3\025\uffe3\027\uffe3\032\uffe3\033\uffe3\034\uffe3\056" +
    "\uffe3\057\uffe3\062\uffe3\063\uffe3\001\002\000\050\010\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\030\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\044\uffc6\045\uffc6\046\uffc6\001\002\000" +
    "\004\007\161\001\002\000\004\055\201\001\002\000\024" +
    "\004\042\005\046\006\043\007\052\012\051\015\044\043" +
    "\054\060\047\061\055\001\002\000\042\010\164\014\071" +
    "\015\062\017\066\020\073\021\065\022\063\035\067\036" +
    "\074\037\064\040\060\041\072\042\070\044\061\045\075" +
    "\046\057\001\002\000\004\007\165\001\002\000\010\014" +
    "\173\015\175\055\174\001\002\000\004\013\167\001\002" +
    "\000\004\023\170\001\002\000\032\003\031\007\016\011" +
    "\014\025\015\027\035\032\034\033\010\034\021\056\030" +
    "\057\036\062\026\063\006\001\002\000\034\003\031\007" +
    "\016\011\014\024\172\025\015\027\035\032\034\033\010" +
    "\034\021\056\030\057\036\062\026\063\006\001\002\000" +
    "\036\002\uffdf\003\uffdf\007\uffdf\011\uffdf\024\uffdf\025\uffdf" +
    "\027\uffdf\032\uffdf\033\uffdf\034\uffdf\056\uffdf\057\uffdf\062" +
    "\uffdf\063\uffdf\001\002\000\004\014\200\001\002\000\024" +
    "\004\042\005\046\006\043\007\052\012\051\015\044\043" +
    "\054\060\047\061\055\001\002\000\004\015\176\001\002" +
    "\000\004\013\uffdc\001\002\000\042\013\uffde\014\071\015" +
    "\062\017\066\020\073\021\065\022\063\035\067\036\074" +
    "\037\064\040\060\041\072\042\070\044\061\045\075\046" +
    "\057\001\002\000\004\013\uffdd\001\002\000\024\004\042" +
    "\005\046\006\043\007\052\012\051\015\044\043\054\060" +
    "\047\061\055\001\002\000\042\010\203\014\071\015\062" +
    "\017\066\020\073\021\065\022\063\035\067\036\074\037" +
    "\064\040\060\041\072\042\070\044\061\045\075\046\057" +
    "\001\002\000\056\002\uffeb\003\uffeb\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\011\uffeb\012\uffeb\015\uffeb\024\uffeb\025\uffeb" +
    "\027\uffeb\032\uffeb\033\uffeb\034\uffeb\043\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\001\002\000\036" +
    "\002\ufff1\003\ufff1\007\ufff1\011\ufff1\024\ufff1\025\ufff1\027" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\056\ufff1\057\ufff1\062\ufff1" +
    "\063\ufff1\001\002\000\036\002\uffd9\003\uffd9\007\uffd9\011" +
    "\uffd9\024\uffd9\025\uffd9\027\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\056\uffd9\057\uffd9\062\uffd9\063\uffd9\001\002\000\004\002" +
    "\001\001\002\000\032\003\031\007\016\011\014\025\015" +
    "\027\035\032\034\033\010\034\021\056\030\057\036\062" +
    "\026\063\006\001\002\000\034\003\031\007\016\011\014" +
    "\024\211\025\015\027\035\032\034\033\010\034\021\056" +
    "\030\057\036\062\026\063\006\001\002\000\004\033\212" +
    "\001\002\000\004\012\213\001\002\000\024\004\042\005" +
    "\046\006\043\007\052\012\051\015\044\043\054\060\047" +
    "\061\055\001\002\000\042\013\215\014\071\015\062\017" +
    "\066\020\073\021\065\022\063\035\067\036\074\037\064" +
    "\040\060\041\072\042\070\044\061\045\075\046\057\001" +
    "\002\000\004\010\216\001\002\000\036\002\uffda\003\uffda" +
    "\007\uffda\011\uffda\024\uffda\025\uffda\027\uffda\032\uffda\033" +
    "\uffda\034\uffda\056\uffda\057\uffda\062\uffda\063\uffda\001\002" +
    "\000\004\014\223\001\002\000\004\015\221\001\002\000" +
    "\004\010\222\001\002\000\036\002\uffe9\003\uffe9\007\uffe9" +
    "\011\uffe9\024\uffe9\025\uffe9\027\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\056\uffe9\057\uffe9\062\uffe9\063\uffe9\001\002\000\004" +
    "\010\224\001\002\000\036\002\uffea\003\uffea\007\uffea\011" +
    "\uffea\024\uffea\025\uffea\027\uffea\032\uffea\033\uffea\034\uffea" +
    "\056\uffea\057\uffea\062\uffea\063\uffea\001\002\000\024\004" +
    "\042\005\046\006\043\007\052\012\051\015\044\043\054" +
    "\060\047\061\055\001\002\000\042\013\227\014\071\015" +
    "\062\017\066\020\073\021\065\022\063\035\067\036\074" +
    "\037\064\040\060\041\072\042\070\044\061\045\075\046" +
    "\057\001\002\000\004\023\230\001\002\000\032\003\031" +
    "\007\016\011\014\025\015\027\035\032\034\033\010\034" +
    "\021\056\030\057\036\062\026\063\006\001\002\000\034" +
    "\003\031\007\016\011\014\024\232\025\015\027\035\032" +
    "\034\033\010\034\021\056\030\057\036\062\026\063\006" +
    "\001\002\000\040\002\uffe8\003\uffe8\007\uffe8\011\uffe8\024" +
    "\uffe8\025\uffe8\026\233\027\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\056\uffe8\057\uffe8\062\uffe8\063\uffe8\001\002\000\006\023" +
    "\235\025\015\001\002\000\036\002\uffe6\003\uffe6\007\uffe6" +
    "\011\uffe6\024\uffe6\025\uffe6\027\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\056\uffe6\057\uffe6\062\uffe6\063\uffe6\001\002\000\032" +
    "\003\031\007\016\011\014\025\015\027\035\032\034\033" +
    "\010\034\021\056\030\057\036\062\026\063\006\001\002" +
    "\000\034\003\031\007\016\011\014\024\237\025\015\027" +
    "\035\032\034\033\010\034\021\056\030\057\036\062\026" +
    "\063\006\001\002\000\036\002\uffe7\003\uffe7\007\uffe7\011" +
    "\uffe7\024\uffe7\025\uffe7\027\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\056\uffe7\057\uffe7\062\uffe7\063\uffe7\001\002\000\024\004" +
    "\042\005\046\006\043\007\052\012\051\015\044\043\054" +
    "\060\047\061\055\001\002\000\042\013\242\014\071\015" +
    "\062\017\066\020\073\021\065\022\063\035\067\036\074" +
    "\037\064\040\060\041\072\042\070\044\061\045\075\046" +
    "\057\001\002\000\004\010\243\001\002\000\036\002\uffef" +
    "\003\uffef\007\uffef\011\uffef\024\uffef\025\uffef\027\uffef\032" +
    "\uffef\033\uffef\034\uffef\056\uffef\057\uffef\062\uffef\063\uffef" +
    "\001\002\000\024\004\042\005\046\006\043\007\052\012" +
    "\051\015\044\043\054\060\047\061\055\001\002\000\042" +
    "\013\246\014\071\015\062\017\066\020\073\021\065\022" +
    "\063\035\067\036\074\037\064\040\060\041\072\042\070" +
    "\044\061\045\075\046\057\001\002\000\004\023\247\001" +
    "\002\000\032\003\031\007\016\011\014\025\015\027\035" +
    "\032\034\033\010\034\021\056\030\057\036\062\026\063" +
    "\006\001\002\000\034\003\031\007\016\011\014\024\251" +
    "\025\015\027\035\032\034\033\010\034\021\056\030\057" +
    "\036\062\026\063\006\001\002\000\036\002\uffdb\003\uffdb" +
    "\007\uffdb\011\uffdb\024\uffdb\025\uffdb\027\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\056\uffdb\057\uffdb\062\uffdb\063\uffdb\001\002" +
    "\000\036\002\uffd8\003\uffd8\007\uffd8\011\uffd8\024\uffd8\025" +
    "\uffd8\027\uffd8\032\uffd8\033\uffd8\034\uffd8\056\uffd8\057\uffd8" +
    "\062\uffd8\063\uffd8\001\002\000\004\054\254\001\002\000" +
    "\014\047\262\050\261\051\256\052\255\053\257\001\002" +
    "\000\006\010\uffd5\055\uffd5\001\002\000\006\010\uffd6\055" +
    "\uffd6\001\002\000\006\010\uffd3\055\uffd3\001\002\000\006" +
    "\010\263\055\264\001\002\000\006\010\uffd4\055\uffd4\001" +
    "\002\000\006\010\uffd7\055\uffd7\001\002\000\036\002\uffec" +
    "\003\uffec\007\uffec\011\uffec\024\uffec\025\uffec\027\uffec\032" +
    "\uffec\033\uffec\034\uffec\056\uffec\057\uffec\062\uffec\063\uffec" +
    "\001\002\000\024\004\042\005\046\006\043\007\052\012" +
    "\051\015\044\043\054\060\047\061\055\001\002\000\036" +
    "\002\uffee\003\uffee\007\uffee\011\uffee\024\uffee\025\uffee\027" +
    "\uffee\032\uffee\033\uffee\034\uffee\056\uffee\057\uffee\062\uffee" +
    "\063\uffee\001\002\000\042\010\267\014\071\015\062\017" +
    "\066\020\073\021\065\022\063\035\067\036\074\037\064" +
    "\040\060\041\072\042\070\044\061\045\075\046\057\001" +
    "\002\000\036\002\uffed\003\uffed\007\uffed\011\uffed\024\uffed" +
    "\025\uffed\027\uffed\032\uffed\033\uffed\034\uffed\056\uffed\057" +
    "\uffed\062\uffed\063\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\042\002\021\003\004\004\012\012\023\013" +
    "\031\014\016\016\006\017\011\020\010\021\022\022\032" +
    "\023\024\024\036\026\026\027\017\031\003\001\001\000" +
    "\002\001\001\000\036\004\142\012\023\013\031\014\016" +
    "\016\006\017\011\020\010\021\022\022\032\023\024\024" +
    "\036\026\026\027\017\031\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\047\006\037\007\052\010\040\011\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\156" +
    "\006\037\007\052\010\040\011\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\116\006\037\007\052\010\040\011\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\055" +
    "\006\037\007\052\010\040\011\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\113\006\037\007\052" +
    "\010\040\011\044\001\001\000\014\005\112\006\037\007" +
    "\052\010\040\011\044\001\001\000\014\005\111\006\037" +
    "\007\052\010\040\011\044\001\001\000\014\005\110\006" +
    "\037\007\052\010\040\011\044\001\001\000\014\005\107" +
    "\006\037\007\052\010\040\011\044\001\001\000\014\005" +
    "\106\006\037\007\052\010\040\011\044\001\001\000\014" +
    "\005\105\006\037\007\052\010\040\011\044\001\001\000" +
    "\014\005\104\006\037\007\052\010\040\011\044\001\001" +
    "\000\014\005\103\006\037\007\052\010\040\011\044\001" +
    "\001\000\014\005\102\006\037\007\052\010\040\011\044" +
    "\001\001\000\014\005\101\006\037\007\052\010\040\011" +
    "\044\001\001\000\014\005\100\006\037\007\052\010\040" +
    "\011\044\001\001\000\014\005\077\006\037\007\052\010" +
    "\040\011\044\001\001\000\014\005\076\006\037\007\052" +
    "\010\040\011\044\001\001\000\014\005\075\006\037\007" +
    "\052\010\040\011\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\121\006\037\007\052" +
    "\010\040\011\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\124\006\037\007\052\010\040\011\044" +
    "\001\001\000\002\001\001\000\014\005\126\006\037\007" +
    "\052\010\040\011\044\001\001\000\002\001\001\000\020" +
    "\005\131\006\037\007\052\010\040\011\044\032\132\033" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\131\006\037\007\052\010\040\011" +
    "\044\032\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\141\004" +
    "\012\012\023\013\031\014\016\016\006\017\011\020\010" +
    "\021\022\022\032\023\024\024\036\026\026\027\017\031" +
    "\003\001\001\000\036\004\142\012\023\013\031\014\016" +
    "\016\006\017\011\020\010\021\022\022\032\023\024\024" +
    "\036\026\026\027\017\031\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\147\004\012\012\023\013\031\014\016\016\006" +
    "\017\011\020\010\021\022\022\032\023\024\024\036\026" +
    "\026\027\017\031\003\001\001\000\036\004\142\012\023" +
    "\013\031\014\016\016\006\017\011\020\010\021\022\022" +
    "\032\023\024\024\036\026\026\027\017\031\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\153\004" +
    "\012\012\023\013\031\014\016\016\006\017\011\020\010" +
    "\021\022\022\032\023\024\024\036\026\026\027\017\031" +
    "\003\001\001\000\036\004\142\012\023\013\031\014\016" +
    "\016\006\017\011\020\010\021\022\022\032\023\024\024" +
    "\036\026\026\027\017\031\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\161\001" +
    "\001\000\002\001\001\000\014\005\162\006\037\007\052" +
    "\010\040\011\044\001\001\000\002\001\001\000\004\025" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\170\004\012\012\023\013\031\014" +
    "\016\016\006\017\011\020\010\021\022\022\032\023\024" +
    "\024\036\026\026\027\017\031\003\001\001\000\036\004" +
    "\142\012\023\013\031\014\016\016\006\017\011\020\010" +
    "\021\022\022\032\023\024\024\036\026\026\027\017\031" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\176\006\037\007\052\010\040\011\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\201\006\037\007\052\010\040\011" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\207\004\012\012\023\013\031\014\016\016\006\017\011" +
    "\020\010\021\022\022\032\023\024\024\036\026\026\027" +
    "\017\031\003\001\001\000\036\004\142\012\023\013\031" +
    "\014\016\016\006\017\011\020\010\021\022\022\032\023" +
    "\024\024\036\026\026\027\017\031\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\213\006\037\007" +
    "\052\010\040\011\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\225\006\037\007\052\010" +
    "\040\011\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\230\004\012\012\023\013\031\014\016\016" +
    "\006\017\011\020\010\021\022\022\032\023\024\024\036" +
    "\026\026\027\017\031\003\001\001\000\036\004\142\012" +
    "\023\013\031\014\016\016\006\017\011\020\010\021\022" +
    "\022\032\023\024\024\036\026\026\027\017\031\003\001" +
    "\001\000\002\001\001\000\004\020\233\001\001\000\002" +
    "\001\001\000\040\003\235\004\012\012\023\013\031\014" +
    "\016\016\006\017\011\020\010\021\022\022\032\023\024" +
    "\024\036\026\026\027\017\031\003\001\001\000\036\004" +
    "\142\012\023\013\031\014\016\016\006\017\011\020\010" +
    "\021\022\022\032\023\024\024\036\026\026\027\017\031" +
    "\003\001\001\000\002\001\001\000\014\005\240\006\037" +
    "\007\052\010\040\011\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\244\006\037" +
    "\007\052\010\040\011\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\247\004\012\012\023\013\031" +
    "\014\016\016\006\017\011\020\010\021\022\022\032\023" +
    "\024\024\036\026\026\027\017\031\003\001\001\000\036" +
    "\004\142\012\023\013\031\014\016\016\006\017\011\020" +
    "\010\021\022\022\032\023\024\024\036\026\026\027\017" +
    "\031\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\265\006\037\007\052\010\040\011\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= println 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= asignacion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= incremento_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= decremento_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= sentencia_match 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= ciclo_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= ciclo_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= ciclo_dowhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= transferencia_break 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= transferencia_continue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // println ::= IMPRIMIR PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Println(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("println",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion_variable ::= mutabilidad ID DOSPUNTOS tipos_variable inicializar_variable 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionVariable(e, b, c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicializar_variable ::= IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // inicializar_variable ::= FINCADENA 
            {
              Instruccion RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion_variable ::= ID IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // incremento_variable ::= ID MAS MAS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incremento_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decremento_variable ::= ID MENOS MENOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionResta(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decremento_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaIf(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 ELSE LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaIfElse(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 ELSE sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaElseIF(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia_match ::= MATCH expresion LLAVE1 casos_match DEFAULT FLECHA LLAVE1 instrucciones LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<CasoMatch> b = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new SentenciaMatch(a, b, c, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia_match ::= MATCH expresion LLAVE1 casos_match LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoMatch> b = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new SentenciaMatch(a, b, null, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia_match ::= MATCH expresion LLAVE1 DEFAULT FLECHA LLAVE1 instrucciones LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new SentenciaMatch(a, null, c, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // casos_match ::= casos_match caso_match 
            {
              LinkedList<CasoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoMatch> a = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoMatch b = (CasoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_match",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // casos_match ::= caso_match 
            {
              LinkedList<CasoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoMatch a = (CasoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_match",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // caso_match ::= expresion FLECHA LLAVE1 instrucciones LLAVE2 
            {
              CasoMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CasoMatch(a, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_match",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ciclo_for ::= FOR PAR1 asignacion_variable expresion FINCADENA actualizar_for PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaFor(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // actualizar_for ::= ID IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // actualizar_for ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // actualizar_for ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionResta(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ciclo_while ::= WHILE PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ciclo_dowhile ::= DO LLAVE1 instrucciones LLAVE2 WHILE PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaDoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_dowhile",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // transferencia_break ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaBreak(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_break",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // transferencia_continue ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaContinue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_continue",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipos_variable ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipos_variable ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.DECIMAL);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipos_variable ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipos_variable ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipos_variable ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // mutabilidad ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // mutabilidad ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresionAritmetica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresionRelacional 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresionLogica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= castearExpresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(TipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresionAritmetica ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionNegacionU(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresionAritmetica ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionSuma(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresionAritmetica ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionResta(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresionAritmetica ::= expresion MULT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresionAritmetica ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDivision (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresionAritmetica ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionModulo (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresionAritmetica ::= expresion POTENCIA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionPotencia (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresionAritmetica ::= PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresionRelacional ::= expresion DOBLEIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Igualacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresionRelacional ::= expresion DIFERENTE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Diferenciacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresionRelacional ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresionRelacional ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresionRelacional ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresionRelacional ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresionLogica ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorNot(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresionLogica ::= expresion XOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorXor(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresionLogica ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAnd(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresionLogica ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOr(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // castearExpresion ::= PAR1 INT PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.ENTERO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // castearExpresion ::= PAR1 DOUBLE PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.DECIMAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // castearExpresion ::= PAR1 CHAR PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.CARACTER, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
