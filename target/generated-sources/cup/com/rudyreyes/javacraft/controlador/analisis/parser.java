
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.rudyreyes.javacraft.controlador.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.javacraft.modelo.abstracto.Instruccion;
import com.rudyreyes.javacraft.modelo.simbolo.*;
import java.util.HashMap;
import com.rudyreyes.javacraft.modelo.instrucciones.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciaControl.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciasTransferencia.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciasCiclicas.*;
import com.rudyreyes.javacraft.modelo.instrucciones.vectores.*;
import com.rudyreyes.javacraft.modelo.instrucciones.listas.*;
import com.rudyreyes.javacraft.modelo.instrucciones.metodos.*;
import com.rudyreyes.javacraft.modelo.expresiones.Nativo;
import com.rudyreyes.javacraft.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.javacraft.modelo.expresiones.relacionales.*;
import com.rudyreyes.javacraft.modelo.expresiones.logicas.*;
import com.rudyreyes.javacraft.modelo.expresiones.casteos.*;
import com.rudyreyes.javacraft.modelo.expresiones.variables.*;
import com.rudyreyes.javacraft.modelo.expresiones.accesovector.*;
import com.rudyreyes.javacraft.modelo.expresiones.funcionesNativas.*;
import com.rudyreyes.javacraft.modelo.errores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\012\007\000\002" +
    "\013\007\000\002\015\005\000\002\015\003\000\002\014" +
    "\006\000\002\016\006\000\002\017\006\000\002\030\015" +
    "\000\002\030\017\000\002\041\005\000\002\041\003\000" +
    "\002\042\007\000\002\042\005\000\002\031\011\000\002" +
    "\031\014\000\002\032\015\000\002\033\011\000\002\020" +
    "\011\000\002\020\015\000\002\020\013\000\002\021\014" +
    "\000\002\021\007\000\002\021\013\000\002\040\004\000" +
    "\002\040\003\000\002\037\007\000\002\022\014\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\023" +
    "\011\000\002\024\013\000\002\026\004\000\002\027\004" +
    "\000\002\043\012\000\002\043\011\000\002\044\006\000" +
    "\002\044\004\000\002\045\010\000\002\045\007\000\002" +
    "\046\005\000\002\046\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\036\003\000\002\036\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\006\000\002\005\011\000" +
    "\002\005\010\000\002\006\004\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\010\004\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\034" +
    "\006\000\002\034\006\000\002\034\006\000\002\034\010" +
    "\000\002\011\006\000\002\011\006\000\002\011\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0129\000\052\003\032\007\027\011\007\025\026\027" +
    "\017\032\016\033\046\034\056\047\015\050\006\051\013" +
    "\052\053\053\023\061\005\062\055\063\050\074\031\075" +
    "\040\100\037\101\014\001\002\000\056\002\uffef\003\uffef" +
    "\007\uffef\011\uffef\024\uffef\025\uffef\027\uffef\032\uffef\033" +
    "\uffef\034\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\061\uffef\062\uffef\063\uffef\074\uffef\075\uffef\100\uffef\101" +
    "\uffef\001\002\000\004\007\uffb9\001\002\000\014\007\uffbc" +
    "\010\uffbc\041\uffbc\055\uffbc\056\uffbc\001\002\000\004\012" +
    "\u0128\001\002\000\056\002\ufffb\003\ufffb\007\ufffb\011\ufffb" +
    "\024\ufffb\025\ufffb\027\ufffb\032\ufffb\033\ufffb\034\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\061\ufffb\062\ufffb" +
    "\063\ufffb\074\ufffb\075\ufffb\100\ufffb\101\ufffb\001\002\000" +
    "\004\007\u0118\001\002\000\054\002\000\003\032\007\027" +
    "\011\007\025\026\027\017\032\016\033\046\034\056\047" +
    "\015\050\006\051\013\052\053\053\023\061\005\062\055" +
    "\063\050\074\031\075\040\100\037\101\014\001\002\000" +
    "\014\007\uffbe\010\uffbe\041\uffbe\055\uffbe\056\uffbe\001\002" +
    "\000\004\010\u0117\001\002\000\014\007\uffbf\010\uffbf\041" +
    "\uffbf\055\uffbf\056\uffbf\001\002\000\004\012\u0106\001\002" +
    "\000\032\004\070\005\105\006\071\007\076\012\104\015" +
    "\066\043\073\070\101\071\103\072\077\076\102\077\100" +
    "\001\002\000\056\002\uffee\003\uffee\007\uffee\011\uffee\024" +
    "\uffee\025\uffee\027\uffee\032\uffee\033\uffee\034\uffee\047\uffee" +
    "\050\uffee\051\uffee\052\uffee\053\uffee\061\uffee\062\uffee\063" +
    "\uffee\074\uffee\075\uffee\100\uffee\101\uffee\001\002\000\004" +
    "\002\356\001\002\000\056\002\ufff4\003\ufff4\007\ufff4\011" +
    "\ufff4\024\ufff4\025\ufff4\027\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\061\ufff4\062" +
    "\ufff4\063\ufff4\074\ufff4\075\ufff4\100\ufff4\101\ufff4\001\002" +
    "\000\014\007\uffbb\010\uffbb\041\uffbb\055\uffbb\056\uffbb\001" +
    "\002\000\056\002\uffec\003\uffec\007\uffec\011\uffec\024\uffec" +
    "\025\uffec\027\uffec\032\uffec\033\uffec\034\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\061\uffec\062\uffec\063\uffec" +
    "\074\uffec\075\uffec\100\uffec\101\uffec\001\002\000\056\002" +
    "\ufff3\003\ufff3\007\ufff3\011\ufff3\024\ufff3\025\ufff3\027\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\047\ufff3\050\ufff3\051\ufff3\052" +
    "\ufff3\053\ufff3\061\ufff3\062\ufff3\063\ufff3\074\ufff3\075\ufff3" +
    "\100\ufff3\101\ufff3\001\002\000\004\012\343\001\002\000" +
    "\014\014\312\015\314\055\313\056\311\065\310\001\002" +
    "\000\056\002\ufffe\003\ufffe\007\ufffe\011\ufffe\024\ufffe\025" +
    "\ufffe\027\ufffe\032\ufffe\033\ufffe\034\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\061\ufffe\062\ufffe\063\ufffe\074" +
    "\ufffe\075\ufffe\100\ufffe\101\ufffe\001\002\000\004\007\276" +
    "\001\002\000\060\002\uffea\003\uffea\007\uffea\010\275\011" +
    "\uffea\024\uffea\025\uffea\027\uffea\032\uffea\033\uffea\034\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\061\uffea\062" +
    "\uffea\063\uffea\074\uffea\075\uffea\100\uffea\101\uffea\001\002" +
    "\000\056\002\ufff0\003\ufff0\007\ufff0\011\ufff0\024\ufff0\025" +
    "\ufff0\027\ufff0\032\ufff0\033\ufff0\034\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\052\ufff0\053\ufff0\061\ufff0\062\ufff0\063\ufff0\074" +
    "\ufff0\075\ufff0\100\ufff0\101\ufff0\001\002\000\056\002\uffed" +
    "\003\uffed\007\uffed\011\uffed\024\uffed\025\uffed\027\uffed\032" +
    "\uffed\033\uffed\034\uffed\047\uffed\050\uffed\051\uffed\052\uffed" +
    "\053\uffed\061\uffed\062\uffed\063\uffed\074\uffed\075\uffed\100" +
    "\uffed\101\uffed\001\002\000\056\002\ufff8\003\ufff8\007\ufff8" +
    "\011\ufff8\024\ufff8\025\ufff8\027\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\074\ufff8\075\ufff8\100\ufff8\101\ufff8\001" +
    "\002\000\056\002\ufffa\003\ufffa\007\ufffa\011\ufffa\024\ufffa" +
    "\025\ufffa\027\ufffa\032\ufffa\033\ufffa\034\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\061\ufffa\062\ufffa\063\ufffa" +
    "\074\ufffa\075\ufffa\100\ufffa\101\ufffa\001\002\000\004\010" +
    "\274\001\002\000\014\007\uffba\010\uffba\041\uffba\055\uffba" +
    "\056\uffba\001\002\000\004\007\234\001\002\000\056\002" +
    "\ufff6\003\ufff6\007\ufff6\011\ufff6\024\ufff6\025\ufff6\027\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\047\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\061\ufff6\062\ufff6\063\ufff6\074\ufff6\075\ufff6" +
    "\100\ufff6\101\ufff6\001\002\000\056\002\ufff1\003\ufff1\007" +
    "\ufff1\011\ufff1\024\ufff1\025\ufff1\027\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\061" +
    "\ufff1\062\ufff1\063\ufff1\074\ufff1\075\ufff1\100\ufff1\101\ufff1" +
    "\001\002\000\056\002\ufffd\003\ufffd\007\ufffd\011\ufffd\024" +
    "\ufffd\025\ufffd\027\ufffd\032\ufffd\033\ufffd\034\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\061\ufffd\062\ufffd\063" +
    "\ufffd\074\ufffd\075\ufffd\100\ufffd\101\ufffd\001\002\000\056" +
    "\002\ufff9\003\ufff9\007\ufff9\011\ufff9\024\ufff9\025\ufff9\027" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\052\ufff9\053\ufff9\061\ufff9\062\ufff9\063\ufff9\074\ufff9\075" +
    "\ufff9\100\ufff9\101\ufff9\001\002\000\004\012\226\001\002" +
    "\000\056\002\ufff2\003\ufff2\007\ufff2\011\ufff2\024\ufff2\025" +
    "\ufff2\027\ufff2\032\ufff2\033\ufff2\034\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\061\ufff2\062\ufff2\063\ufff2\074" +
    "\ufff2\075\ufff2\100\ufff2\101\ufff2\001\002\000\004\037\214" +
    "\001\002\000\056\002\ufff5\003\ufff5\007\ufff5\011\ufff5\024" +
    "\ufff5\025\ufff5\027\ufff5\032\ufff5\033\ufff5\034\ufff5\047\ufff5" +
    "\050\ufff5\051\ufff5\052\ufff5\053\ufff5\061\ufff5\062\ufff5\063" +
    "\ufff5\074\ufff5\075\ufff5\100\ufff5\101\ufff5\001\002\000\056" +
    "\002\ufffc\003\ufffc\007\ufffc\011\ufffc\024\ufffc\025\ufffc\027" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\061\ufffc\062\ufffc\063\ufffc\074\ufffc\075" +
    "\ufffc\100\ufffc\101\ufffc\001\002\000\014\007\uffbd\010\uffbd" +
    "\041\uffbd\055\uffbd\056\uffbd\001\002\000\056\002\ufff7\003" +
    "\ufff7\007\ufff7\011\ufff7\024\ufff7\025\ufff7\027\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\061\ufff7\062\ufff7\063\ufff7\074\ufff7\075\ufff7\100\ufff7" +
    "\101\ufff7\001\002\000\004\007\uffb8\001\002\000\004\023" +
    "\057\001\002\000\052\003\032\007\027\011\007\025\026" +
    "\027\017\032\016\033\046\034\056\047\015\050\006\051" +
    "\013\052\053\053\023\061\005\062\055\063\050\074\031" +
    "\075\040\100\037\101\014\001\002\000\054\003\032\007" +
    "\027\011\007\024\061\025\026\027\017\032\016\033\046" +
    "\034\056\047\015\050\006\051\013\052\053\053\023\061" +
    "\005\062\055\063\050\074\031\075\040\100\037\101\014" +
    "\001\002\000\004\033\063\001\002\000\056\002\uffff\003" +
    "\uffff\007\uffff\011\uffff\024\uffff\025\uffff\027\uffff\032\uffff" +
    "\033\uffff\034\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053" +
    "\uffff\061\uffff\062\uffff\063\uffff\074\uffff\075\uffff\100\uffff" +
    "\101\uffff\001\002\000\004\012\064\001\002\000\032\004" +
    "\070\005\105\006\071\007\076\012\104\015\066\043\073" +
    "\070\101\071\103\072\077\076\102\077\100\001\002\000" +
    "\054\010\uffb6\013\uffb6\014\uffb6\015\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\030\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\057\uffb6\060\uffb6\001\002\000\032\004\070\005\105\006" +
    "\071\007\076\012\104\015\066\043\073\070\101\071\103" +
    "\072\077\076\102\077\100\001\002\000\054\010\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\030\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\044\uffb5\045\uffb5\046\uffb5\057\uffb5\060\uffb5" +
    "\001\002\000\054\010\uffb0\013\uffb0\014\uffb0\015\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\030\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\057\uffb0\060\uffb0\001\002\000\054\010\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\030\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\044\uffb1\045\uffb1\046\uffb1\057\uffb1\060" +
    "\uffb1\001\002\000\042\013\211\014\126\015\120\017\124" +
    "\020\130\021\123\022\121\035\125\036\132\037\122\040" +
    "\116\041\131\042\127\044\117\045\133\046\115\001\002" +
    "\000\032\004\070\005\105\006\071\007\076\012\104\015" +
    "\066\043\073\070\101\071\103\072\077\076\102\077\100" +
    "\001\002\000\054\010\uffb3\013\uffb3\014\uffb3\015\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\030\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\057\uffb3\060\uffb3\001\002\000\054\010\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\030\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\044\uffb7\045\uffb7\046\uffb7\057\uffb7\060" +
    "\uffb7\001\002\000\060\010\uffad\013\uffad\014\uffad\015\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\030\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\044\uffad" +
    "\045\uffad\046\uffad\056\171\057\uffad\060\uffad\065\172\001" +
    "\002\000\004\012\166\001\002\000\054\010\uffaf\013\uffaf" +
    "\014\uffaf\015\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023" +
    "\uffaf\030\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\044\uffaf\045\uffaf\046\uffaf\057\uffaf\060\uffaf\001" +
    "\002\000\004\012\163\001\002\000\054\010\uffae\013\uffae" +
    "\014\uffae\015\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\030\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\044\uffae\045\uffae\046\uffae\057\uffae\060\uffae\001" +
    "\002\000\004\012\160\001\002\000\040\004\070\005\105" +
    "\006\071\007\076\012\104\015\066\043\073\047\107\050" +
    "\110\051\112\070\101\071\103\072\077\076\102\077\100" +
    "\001\002\000\054\010\uffb2\013\uffb2\014\uffb2\015\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\030\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\057\uffb2\060\uffb2\001\002\000\054\010\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\030\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\044\uffb4\045\uffb4\046\uffb4\057\uffb4\060" +
    "\uffb4\001\002\000\004\013\156\001\002\000\004\013\154" +
    "\001\002\000\042\013\153\014\126\015\120\017\124\020" +
    "\130\021\123\022\121\035\125\036\132\037\122\040\116" +
    "\041\131\042\127\044\117\045\133\046\115\001\002\000" +
    "\004\013\113\001\002\000\032\004\070\005\105\006\071" +
    "\007\076\012\104\015\066\043\073\070\101\071\103\072" +
    "\077\076\102\077\100\001\002\000\054\010\uff92\013\uff92" +
    "\014\126\015\120\017\124\020\130\021\123\022\121\023" +
    "\uff92\030\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92" +
    "\042\uff92\044\uff92\045\uff92\046\uff92\057\uff92\060\uff92\001" +
    "\002\000\032\004\070\005\105\006\071\007\076\012\104" +
    "\015\066\043\073\070\101\071\103\072\077\076\102\077" +
    "\100\001\002\000\032\004\070\005\105\006\071\007\076" +
    "\012\104\015\066\043\073\070\101\071\103\072\077\076" +
    "\102\077\100\001\002\000\032\004\070\005\105\006\071" +
    "\007\076\012\104\015\066\043\073\070\101\071\103\072" +
    "\077\076\102\077\100\001\002\000\032\004\070\005\105" +
    "\006\071\007\076\012\104\015\066\043\073\070\101\071" +
    "\103\072\077\076\102\077\100\001\002\000\032\004\070" +
    "\005\105\006\071\007\076\012\104\015\066\043\073\070" +
    "\101\071\103\072\077\076\102\077\100\001\002\000\032" +
    "\004\070\005\105\006\071\007\076\012\104\015\066\043" +
    "\073\070\101\071\103\072\077\076\102\077\100\001\002" +
    "\000\032\004\070\005\105\006\071\007\076\012\104\015" +
    "\066\043\073\070\101\071\103\072\077\076\102\077\100" +
    "\001\002\000\032\004\070\005\105\006\071\007\076\012" +
    "\104\015\066\043\073\070\101\071\103\072\077\076\102" +
    "\077\100\001\002\000\032\004\070\005\105\006\071\007" +
    "\076\012\104\015\066\043\073\070\101\071\103\072\077" +
    "\076\102\077\100\001\002\000\032\004\070\005\105\006" +
    "\071\007\076\012\104\015\066\043\073\070\101\071\103" +
    "\072\077\076\102\077\100\001\002\000\032\004\070\005" +
    "\105\006\071\007\076\012\104\015\066\043\073\070\101" +
    "\071\103\072\077\076\102\077\100\001\002\000\032\004" +
    "\070\005\105\006\071\007\076\012\104\015\066\043\073" +
    "\070\101\071\103\072\077\076\102\077\100\001\002\000" +
    "\032\004\070\005\105\006\071\007\076\012\104\015\066" +
    "\043\073\070\101\071\103\072\077\076\102\077\100\001" +
    "\002\000\032\004\070\005\105\006\071\007\076\012\104" +
    "\015\066\043\073\070\101\071\103\072\077\076\102\077" +
    "\100\001\002\000\032\004\070\005\105\006\071\007\076" +
    "\012\104\015\066\043\073\070\101\071\103\072\077\076" +
    "\102\077\100\001\002\000\054\010\uff98\013\uff98\014\126" +
    "\015\120\017\124\020\130\021\123\022\121\023\uff98\030" +
    "\uff98\035\125\036\132\037\122\040\116\041\131\042\127" +
    "\044\117\045\uff98\046\115\057\uff98\060\uff98\001\002\000" +
    "\054\010\uffa0\013\uffa0\014\126\015\120\017\124\020\130" +
    "\021\123\022\121\023\uffa0\030\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\041\uffa0\042\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\057\uffa0\060\uffa0\001\002\000\054\010\uff9d\013\uff9d\014" +
    "\126\015\120\017\124\020\130\021\123\022\121\023\uff9d" +
    "\030\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\057\uff9d\060\uff9d\001\002" +
    "\000\054\010\uffa5\013\uffa5\014\uffa5\015\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\030\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\044\uffa5\045\uffa5\046" +
    "\uffa5\057\uffa5\060\uffa5\001\002\000\054\010\uff9c\013\uff9c" +
    "\014\126\015\120\017\124\020\130\021\123\022\121\023" +
    "\uff9c\030\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\044\uff9c\045\uff9c\046\uff9c\057\uff9c\060\uff9c\001" +
    "\002\000\054\010\uffa8\013\uffa8\014\uffa8\015\uffa8\017\124" +
    "\020\130\021\123\022\121\023\uffa8\030\uffa8\035\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\044\uffa8\045\uffa8" +
    "\046\uffa8\057\uffa8\060\uffa8\001\002\000\054\010\uffa1\013" +
    "\uffa1\014\126\015\120\017\124\020\130\021\123\022\121" +
    "\023\uffa1\030\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\044\uffa1\045\uffa1\046\uffa1\057\uffa1\060\uffa1" +
    "\001\002\000\054\010\uffa6\013\uffa6\014\uffa6\015\uffa6\017" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\030\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\057\uffa6\060\uffa6\001\002\000\054\010\uffa4" +
    "\013\uffa4\014\uffa4\015\uffa4\017\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\030\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\044\uffa4\045\uffa4\046\uffa4\057\uffa4\060" +
    "\uffa4\001\002\000\054\010\uff9f\013\uff9f\014\126\015\120" +
    "\017\124\020\130\021\123\022\121\023\uff9f\030\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\057\uff9f\060\uff9f\001\002\000\054\010" +
    "\uffa3\013\uffa3\014\uffa3\015\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\030\uffa3\035\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\041\uffa3\042\uffa3\044\uffa3\045\uffa3\046\uffa3\057\uffa3" +
    "\060\uffa3\001\002\000\054\010\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\017\124\020\130\021\123\022\121\023\uffa7\030\uffa7" +
    "\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\057\uffa7\060\uffa7\001\002\000\054" +
    "\010\uff9a\013\uff9a\014\126\015\120\017\124\020\130\021" +
    "\123\022\121\023\uff9a\030\uff9a\035\125\036\132\037\122" +
    "\040\116\041\131\042\127\044\uff9a\045\uff9a\046\uff9a\057" +
    "\uff9a\060\uff9a\001\002\000\054\010\uff9e\013\uff9e\014\126" +
    "\015\120\017\124\020\130\021\123\022\121\023\uff9e\030" +
    "\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\044\uff9e\045\uff9e\046\uff9e\057\uff9e\060\uff9e\001\002\000" +
    "\054\010\uff99\013\uff99\014\126\015\120\017\124\020\130" +
    "\021\123\022\121\023\uff99\030\uff99\035\125\036\132\037" +
    "\122\040\116\041\131\042\127\044\117\045\uff99\046\uff99" +
    "\057\uff99\060\uff99\001\002\000\054\010\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2" +
    "\030\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\057\uffa2\060\uffa2\001\002" +
    "\000\032\004\070\005\105\006\071\007\076\012\104\015" +
    "\066\043\073\070\101\071\103\072\077\076\102\077\100" +
    "\001\002\000\054\010\uff91\013\uff91\014\126\015\120\017" +
    "\124\020\130\021\123\022\121\023\uff91\030\uff91\035\uff91" +
    "\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\044\uff91\045" +
    "\uff91\046\uff91\057\uff91\060\uff91\001\002\000\032\004\070" +
    "\005\105\006\071\007\076\012\104\015\066\043\073\070" +
    "\101\071\103\072\077\076\102\077\100\001\002\000\054" +
    "\010\uff93\013\uff93\014\126\015\120\017\124\020\130\021" +
    "\123\022\121\023\uff93\030\uff93\035\uff93\036\uff93\037\uff93" +
    "\040\uff93\041\uff93\042\uff93\044\uff93\045\uff93\046\uff93\057" +
    "\uff93\060\uff93\001\002\000\032\004\070\005\105\006\071" +
    "\007\076\012\104\015\066\043\073\070\101\071\103\072" +
    "\077\076\102\077\100\001\002\000\042\013\162\014\126" +
    "\015\120\017\124\020\130\021\123\022\121\035\125\036" +
    "\132\037\122\040\116\041\131\042\127\044\117\045\133" +
    "\046\115\001\002\000\054\010\uff96\013\uff96\014\uff96\015" +
    "\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\030\uff96" +
    "\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\044" +
    "\uff96\045\uff96\046\uff96\057\uff96\060\uff96\001\002\000\032" +
    "\004\070\005\105\006\071\007\076\012\104\015\066\043" +
    "\073\070\101\071\103\072\077\076\102\077\100\001\002" +
    "\000\042\013\165\014\126\015\120\017\124\020\130\021" +
    "\123\022\121\035\125\036\132\037\122\040\116\041\131" +
    "\042\127\044\117\045\133\046\115\001\002\000\054\010" +
    "\uff97\013\uff97\014\uff97\015\uff97\017\uff97\020\uff97\021\uff97" +
    "\022\uff97\023\uff97\030\uff97\035\uff97\036\uff97\037\uff97\040" +
    "\uff97\041\uff97\042\uff97\044\uff97\045\uff97\046\uff97\057\uff97" +
    "\060\uff97\001\002\000\032\004\070\005\105\006\071\007" +
    "\076\012\104\015\066\043\073\070\101\071\103\072\077" +
    "\076\102\077\100\001\002\000\042\013\170\014\126\015" +
    "\120\017\124\020\130\021\123\022\121\035\125\036\132" +
    "\037\122\040\116\041\131\042\127\044\117\045\133\046" +
    "\115\001\002\000\054\010\uff95\013\uff95\014\uff95\015\uff95" +
    "\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\030\uff95\035" +
    "\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\044\uff95" +
    "\045\uff95\046\uff95\057\uff95\060\uff95\001\002\000\032\004" +
    "\070\005\105\006\071\007\076\012\104\015\066\043\073" +
    "\070\101\071\103\072\077\076\102\077\100\001\002\000" +
    "\006\067\174\073\173\001\002\000\004\012\200\001\002" +
    "\000\004\012\175\001\002\000\032\004\070\005\105\006" +
    "\071\007\076\012\104\015\066\043\073\070\101\071\103" +
    "\072\077\076\102\077\100\001\002\000\042\013\177\014" +
    "\126\015\120\017\124\020\130\021\123\022\121\035\125" +
    "\036\132\037\122\040\116\041\131\042\127\044\117\045" +
    "\133\046\115\001\002\000\054\010\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\030" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\057\uffaa\060\uffaa\001\002\000" +
    "\032\004\070\005\105\006\071\007\076\012\104\015\066" +
    "\043\073\070\101\071\103\072\077\076\102\077\100\001" +
    "\002\000\042\013\202\014\126\015\120\017\124\020\130" +
    "\021\123\022\121\035\125\036\132\037\122\040\116\041" +
    "\131\042\127\044\117\045\133\046\115\001\002\000\054" +
    "\010\uff94\013\uff94\014\uff94\015\uff94\017\uff94\020\uff94\021" +
    "\uff94\022\uff94\023\uff94\030\uff94\035\uff94\036\uff94\037\uff94" +
    "\040\uff94\041\uff94\042\uff94\044\uff94\045\uff94\046\uff94\057" +
    "\uff94\060\uff94\001\002\000\042\014\126\015\120\017\124" +
    "\020\130\021\123\022\121\035\125\036\132\037\122\040" +
    "\116\041\131\042\127\044\117\045\133\046\115\057\204" +
    "\001\002\000\056\010\uffac\013\uffac\014\uffac\015\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\030\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\044\uffac\045" +
    "\uffac\046\uffac\056\205\057\uffac\060\uffac\001\002\000\032" +
    "\004\070\005\105\006\071\007\076\012\104\015\066\043" +
    "\073\070\101\071\103\072\077\076\102\077\100\001\002" +
    "\000\042\014\126\015\120\017\124\020\130\021\123\022" +
    "\121\035\125\036\132\037\122\040\116\041\131\042\127" +
    "\044\117\045\133\046\115\057\207\001\002\000\054\010" +
    "\uffab\013\uffab\014\uffab\015\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\030\uffab\035\uffab\036\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\044\uffab\045\uffab\046\uffab\057\uffab" +
    "\060\uffab\001\002\000\054\010\uff9b\013\uff9b\014\126\015" +
    "\120\017\124\020\130\021\123\022\121\023\uff9b\030\uff9b" +
    "\035\125\036\132\037\122\040\116\041\131\042\127\044" +
    "\uff9b\045\uff9b\046\uff9b\057\uff9b\060\uff9b\001\002\000\004" +
    "\010\212\001\002\000\056\002\uffca\003\uffca\007\uffca\011" +
    "\uffca\024\uffca\025\uffca\027\uffca\032\uffca\033\uffca\034\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\061\uffca\062" +
    "\uffca\063\uffca\074\uffca\075\uffca\100\uffca\101\uffca\001\002" +
    "\000\054\010\uffa9\013\uffa9\014\uffa9\015\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\030\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\044\uffa9\045\uffa9\046" +
    "\uffa9\057\uffa9\060\uffa9\001\002\000\016\047\015\050\006" +
    "\051\013\052\053\053\023\075\040\001\002\000\004\041" +
    "\216\001\002\000\004\007\217\001\002\000\004\055\220" +
    "\001\002\000\004\064\221\001\002\000\004\063\222\001" +
    "\002\000\004\012\223\001\002\000\004\013\224\001\002" +
    "\000\004\010\225\001\002\000\056\002\uffda\003\uffda\007" +
    "\uffda\011\uffda\024\uffda\025\uffda\027\uffda\032\uffda\033\uffda" +
    "\034\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\061" +
    "\uffda\062\uffda\063\uffda\074\uffda\075\uffda\100\uffda\101\uffda" +
    "\001\002\000\032\004\070\005\105\006\071\007\076\012" +
    "\104\015\066\043\073\070\101\071\103\072\077\076\102" +
    "\077\100\001\002\000\042\013\230\014\126\015\120\017" +
    "\124\020\130\021\123\022\121\035\125\036\132\037\122" +
    "\040\116\041\131\042\127\044\117\045\133\046\115\001" +
    "\002\000\004\023\231\001\002\000\052\003\032\007\027" +
    "\011\007\025\026\027\017\032\016\033\046\034\056\047" +
    "\015\050\006\051\013\052\053\053\023\061\005\062\055" +
    "\063\050\074\031\075\040\100\037\101\014\001\002\000" +
    "\054\003\032\007\027\011\007\024\233\025\026\027\017" +
    "\032\016\033\046\034\056\047\015\050\006\051\013\052" +
    "\053\053\023\061\005\062\055\063\050\074\031\075\040" +
    "\100\037\101\014\001\002\000\056\002\uffcb\003\uffcb\007" +
    "\uffcb\011\uffcb\024\uffcb\025\uffcb\027\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\061" +
    "\uffcb\062\uffcb\063\uffcb\074\uffcb\075\uffcb\100\uffcb\101\uffcb" +
    "\001\002\000\004\054\235\001\002\000\016\047\015\050" +
    "\006\051\013\052\053\053\023\075\040\001\002\000\010" +
    "\010\240\055\241\056\237\001\002\000\004\057\245\001" +
    "\002\000\056\002\uffe6\003\uffe6\007\uffe6\011\uffe6\024\uffe6" +
    "\025\uffe6\027\uffe6\032\uffe6\033\uffe6\034\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\061\uffe6\062\uffe6\063\uffe6" +
    "\074\uffe6\075\uffe6\100\uffe6\101\uffe6\001\002\000\032\004" +
    "\070\005\105\006\071\007\076\012\104\015\066\043\073" +
    "\070\101\071\103\072\077\076\102\077\100\001\002\000" +
    "\056\002\uffe8\003\uffe8\007\uffe8\011\uffe8\024\uffe8\025\uffe8" +
    "\027\uffe8\032\uffe8\033\uffe8\034\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\052\uffe8\053\uffe8\061\uffe8\062\uffe8\063\uffe8\074\uffe8" +
    "\075\uffe8\100\uffe8\101\uffe8\001\002\000\042\010\244\014" +
    "\126\015\120\017\124\020\130\021\123\022\121\035\125" +
    "\036\132\037\122\040\116\041\131\042\127\044\117\045" +
    "\133\046\115\001\002\000\056\002\uffe7\003\uffe7\007\uffe7" +
    "\011\uffe7\024\uffe7\025\uffe7\027\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\061\uffe7" +
    "\062\uffe7\063\uffe7\074\uffe7\075\uffe7\100\uffe7\101\uffe7\001" +
    "\002\000\006\055\247\056\246\001\002\000\004\057\257" +
    "\001\002\000\004\056\250\001\002\000\032\004\070\005" +
    "\105\006\071\007\076\012\104\015\066\043\073\070\101" +
    "\071\103\072\077\076\102\077\100\001\002\000\006\057" +
    "\254\060\253\001\002\000\044\014\126\015\120\017\124" +
    "\020\130\021\123\022\121\035\125\036\132\037\122\040" +
    "\116\041\131\042\127\044\117\045\133\046\115\057\uffdf" +
    "\060\uffdf\001\002\000\032\004\070\005\105\006\071\007" +
    "\076\012\104\015\066\043\073\070\101\071\103\072\077" +
    "\076\102\077\100\001\002\000\004\010\255\001\002\000" +
    "\056\002\uffe2\003\uffe2\007\uffe2\011\uffe2\024\uffe2\025\uffe2" +
    "\027\uffe2\032\uffe2\033\uffe2\034\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\061\uffe2\062\uffe2\063\uffe2\074\uffe2" +
    "\075\uffe2\100\uffe2\101\uffe2\001\002\000\044\014\126\015" +
    "\120\017\124\020\130\021\123\022\121\035\125\036\132" +
    "\037\122\040\116\041\131\042\127\044\117\045\133\046" +
    "\115\057\uffe0\060\uffe0\001\002\000\004\055\260\001\002" +
    "\000\004\056\261\001\002\000\004\056\262\001\002\000" +
    "\032\004\070\005\105\006\071\007\076\012\104\015\066" +
    "\043\073\070\101\071\103\072\077\076\102\077\100\001" +
    "\002\000\006\057\264\060\265\001\002\000\004\010\271" +
    "\001\002\000\004\056\266\001\002\000\032\004\070\005" +
    "\105\006\071\007\076\012\104\015\066\043\073\070\101" +
    "\071\103\072\077\076\102\077\100\001\002\000\006\057" +
    "\270\060\253\001\002\000\006\057\uffde\060\uffde\001\002" +
    "\000\056\002\uffe1\003\uffe1\007\uffe1\011\uffe1\024\uffe1\025" +
    "\uffe1\027\uffe1\032\uffe1\033\uffe1\034\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\061\uffe1\062\uffe1\063\uffe1\074" +
    "\uffe1\075\uffe1\100\uffe1\101\uffe1\001\002\000\006\057\273" +
    "\060\253\001\002\000\006\057\uffdd\060\uffdd\001\002\000" +
    "\056\002\uffc9\003\uffc9\007\uffc9\011\uffc9\024\uffc9\025\uffc9" +
    "\027\uffc9\032\uffc9\033\uffc9\034\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\061\uffc9\062\uffc9\063\uffc9\074\uffc9" +
    "\075\uffc9\100\uffc9\101\uffc9\001\002\000\056\002\uffeb\003" +
    "\uffeb\007\uffeb\011\uffeb\024\uffeb\025\uffeb\027\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\061\uffeb\062\uffeb\063\uffeb\074\uffeb\075\uffeb\100\uffeb" +
    "\101\uffeb\001\002\000\004\012\277\001\002\000\034\004" +
    "\070\005\105\006\071\007\076\012\104\013\302\015\066" +
    "\043\073\070\101\071\103\072\077\076\102\077\100\001" +
    "\002\000\044\013\uffc0\014\126\015\120\017\124\020\130" +
    "\021\123\022\121\035\125\036\132\037\122\040\116\041" +
    "\131\042\127\044\117\045\133\046\115\060\uffc0\001\002" +
    "\000\006\013\305\060\304\001\002\000\004\010\303\001" +
    "\002\000\056\002\uffc2\003\uffc2\007\uffc2\011\uffc2\024\uffc2" +
    "\025\uffc2\027\uffc2\032\uffc2\033\uffc2\034\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\061\uffc2\062\uffc2\063\uffc2" +
    "\074\uffc2\075\uffc2\100\uffc2\101\uffc2\001\002\000\032\004" +
    "\070\005\105\006\071\007\076\012\104\015\066\043\073" +
    "\070\101\071\103\072\077\076\102\077\100\001\002\000" +
    "\004\010\306\001\002\000\056\002\uffc3\003\uffc3\007\uffc3" +
    "\011\uffc3\024\uffc3\025\uffc3\027\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\061\uffc3" +
    "\062\uffc3\063\uffc3\074\uffc3\075\uffc3\100\uffc3\101\uffc3\001" +
    "\002\000\044\013\uffc1\014\126\015\120\017\124\020\130" +
    "\021\123\022\121\035\125\036\132\037\122\040\116\041" +
    "\131\042\127\044\117\045\133\046\115\060\uffc1\001\002" +
    "\000\004\066\336\001\002\000\032\004\070\005\105\006" +
    "\071\007\076\012\104\015\066\043\073\070\101\071\103" +
    "\072\077\076\102\077\100\001\002\000\004\014\321\001" +
    "\002\000\032\004\070\005\105\006\071\007\076\012\104" +
    "\015\066\043\073\070\101\071\103\072\077\076\102\077" +
    "\100\001\002\000\004\015\315\001\002\000\004\010\316" +
    "\001\002\000\056\002\uffe3\003\uffe3\007\uffe3\011\uffe3\024" +
    "\uffe3\025\uffe3\027\uffe3\032\uffe3\033\uffe3\034\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\074\uffe3\075\uffe3\100\uffe3\101\uffe3\001\002\000\042" +
    "\010\320\014\126\015\120\017\124\020\130\021\123\022" +
    "\121\035\125\036\132\037\122\040\116\041\131\042\127" +
    "\044\117\045\133\046\115\001\002\000\104\002\uffe5\003" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5" +
    "\015\uffe5\024\uffe5\025\uffe5\027\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\043\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\070\uffe5\071\uffe5\072\uffe5\074" +
    "\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\001\002" +
    "\000\004\010\322\001\002\000\056\002\uffe4\003\uffe4\007" +
    "\uffe4\011\uffe4\024\uffe4\025\uffe4\027\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\061" +
    "\uffe4\062\uffe4\063\uffe4\074\uffe4\075\uffe4\100\uffe4\101\uffe4" +
    "\001\002\000\042\014\126\015\120\017\124\020\130\021" +
    "\123\022\121\035\125\036\132\037\122\040\116\041\131" +
    "\042\127\044\117\045\133\046\115\057\324\001\002\000" +
    "\006\055\326\056\325\001\002\000\032\004\070\005\105" +
    "\006\071\007\076\012\104\015\066\043\073\070\101\071" +
    "\103\072\077\076\102\077\100\001\002\000\032\004\070" +
    "\005\105\006\071\007\076\012\104\015\066\043\073\070" +
    "\101\071\103\072\077\076\102\077\100\001\002\000\042" +
    "\010\330\014\126\015\120\017\124\020\130\021\123\022" +
    "\121\035\125\036\132\037\122\040\116\041\131\042\127" +
    "\044\117\045\133\046\115\001\002\000\056\002\uffdc\003" +
    "\uffdc\007\uffdc\011\uffdc\024\uffdc\025\uffdc\027\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\074\uffdc\075\uffdc\100\uffdc" +
    "\101\uffdc\001\002\000\042\014\126\015\120\017\124\020" +
    "\130\021\123\022\121\035\125\036\132\037\122\040\116" +
    "\041\131\042\127\044\117\045\133\046\115\057\332\001" +
    "\002\000\004\055\333\001\002\000\032\004\070\005\105" +
    "\006\071\007\076\012\104\015\066\043\073\070\101\071" +
    "\103\072\077\076\102\077\100\001\002\000\042\010\335" +
    "\014\126\015\120\017\124\020\130\021\123\022\121\035" +
    "\125\036\132\037\122\040\116\041\131\042\127\044\117" +
    "\045\133\046\115\001\002\000\056\002\uffdb\003\uffdb\007" +
    "\uffdb\011\uffdb\024\uffdb\025\uffdb\027\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\061" +
    "\uffdb\062\uffdb\063\uffdb\074\uffdb\075\uffdb\100\uffdb\101\uffdb" +
    "\001\002\000\004\012\337\001\002\000\032\004\070\005" +
    "\105\006\071\007\076\012\104\015\066\043\073\070\101" +
    "\071\103\072\077\076\102\077\100\001\002\000\042\013" +
    "\341\014\126\015\120\017\124\020\130\021\123\022\121" +
    "\035\125\036\132\037\122\040\116\041\131\042\127\044" +
    "\117\045\133\046\115\001\002\000\004\010\342\001\002" +
    "\000\056\002\uffd9\003\uffd9\007\uffd9\011\uffd9\024\uffd9\025" +
    "\uffd9\027\uffd9\032\uffd9\033\uffd9\034\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\053\uffd9\061\uffd9\062\uffd9\063\uffd9\074" +
    "\uffd9\075\uffd9\100\uffd9\101\uffd9\001\002\000\032\004\070" +
    "\005\105\006\071\007\076\012\104\015\066\043\073\070" +
    "\101\071\103\072\077\076\102\077\100\001\002\000\042" +
    "\013\345\014\126\015\120\017\124\020\130\021\123\022" +
    "\121\035\125\036\132\037\122\040\116\041\131\042\127" +
    "\044\117\045\133\046\115\001\002\000\004\023\346\001" +
    "\002\000\052\003\032\007\027\011\007\025\026\027\017" +
    "\032\016\033\046\034\056\047\015\050\006\051\013\052" +
    "\053\053\023\061\005\062\055\063\050\074\031\075\040" +
    "\100\037\101\014\001\002\000\054\003\032\007\027\011" +
    "\007\024\350\025\026\027\017\032\016\033\046\034\056" +
    "\047\015\050\006\051\013\052\053\053\023\061\005\062" +
    "\055\063\050\074\031\075\040\100\037\101\014\001\002" +
    "\000\060\002\uffd8\003\uffd8\007\uffd8\011\uffd8\024\uffd8\025" +
    "\uffd8\026\351\027\uffd8\032\uffd8\033\uffd8\034\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\074\uffd8\075\uffd8\100\uffd8\101\uffd8\001\002\000\006" +
    "\023\353\025\026\001\002\000\056\002\uffd6\003\uffd6\007" +
    "\uffd6\011\uffd6\024\uffd6\025\uffd6\027\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\074\uffd6\075\uffd6\100\uffd6\101\uffd6" +
    "\001\002\000\052\003\032\007\027\011\007\025\026\027" +
    "\017\032\016\033\046\034\056\047\015\050\006\051\013" +
    "\052\053\053\023\061\005\062\055\063\050\074\031\075" +
    "\040\100\037\101\014\001\002\000\054\003\032\007\027" +
    "\011\007\024\355\025\026\027\017\032\016\033\046\034" +
    "\056\047\015\050\006\051\013\052\053\053\023\061\005" +
    "\062\055\063\050\074\031\075\040\100\037\101\014\001" +
    "\002\000\056\002\uffd7\003\uffd7\007\uffd7\011\uffd7\024\uffd7" +
    "\025\uffd7\027\uffd7\032\uffd7\033\uffd7\034\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\061\uffd7\062\uffd7\063\uffd7" +
    "\074\uffd7\075\uffd7\100\uffd7\101\uffd7\001\002\000\004\002" +
    "\001\001\002\000\042\014\126\015\120\017\124\020\130" +
    "\021\123\022\121\023\360\035\125\036\132\037\122\040" +
    "\116\041\131\042\127\044\117\045\133\046\115\001\002" +
    "\000\034\004\070\005\105\006\071\007\076\012\104\015" +
    "\066\031\364\043\073\070\101\071\103\072\077\076\102" +
    "\077\100\001\002\000\036\004\070\005\105\006\071\007" +
    "\076\012\104\015\066\024\377\031\u0100\043\073\070\101" +
    "\071\103\072\077\076\102\077\100\001\002\000\042\014" +
    "\126\015\120\017\124\020\130\021\123\022\121\030\372" +
    "\035\125\036\132\037\122\040\116\041\131\042\127\044" +
    "\117\045\133\046\115\001\002\000\036\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\012\uffd1\015\uffd1\024\uffd1\031\uffd1\043" +
    "\uffd1\070\uffd1\071\uffd1\072\uffd1\076\uffd1\077\uffd1\001\002" +
    "\000\004\030\365\001\002\000\004\023\366\001\002\000" +
    "\052\003\032\007\027\011\007\025\026\027\017\032\016" +
    "\033\046\034\056\047\015\050\006\051\013\052\053\053" +
    "\023\061\005\062\055\063\050\074\031\075\040\100\037" +
    "\101\014\001\002\000\054\003\032\007\027\011\007\024" +
    "\370\025\026\027\017\032\016\033\046\034\056\047\015" +
    "\050\006\051\013\052\053\053\023\061\005\062\055\063" +
    "\050\074\031\075\040\100\037\101\014\001\002\000\004" +
    "\024\371\001\002\000\056\002\uffd3\003\uffd3\007\uffd3\011" +
    "\uffd3\024\uffd3\025\uffd3\027\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\074\uffd3\075\uffd3\100\uffd3\101\uffd3\001\002" +
    "\000\004\023\373\001\002\000\052\003\032\007\027\011" +
    "\007\025\026\027\017\032\016\033\046\034\056\047\015" +
    "\050\006\051\013\052\053\053\023\061\005\062\055\063" +
    "\050\074\031\075\040\100\037\101\014\001\002\000\054" +
    "\003\032\007\027\011\007\024\375\025\026\027\017\032" +
    "\016\033\046\034\056\047\015\050\006\051\013\052\053" +
    "\053\023\061\005\062\055\063\050\074\031\075\040\100" +
    "\037\101\014\001\002\000\036\004\uffd0\005\uffd0\006\uffd0" +
    "\007\uffd0\012\uffd0\015\uffd0\024\uffd0\031\uffd0\043\uffd0\070" +
    "\uffd0\071\uffd0\072\uffd0\076\uffd0\077\uffd0\001\002\000\036" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\012\uffd2\015\uffd2\024" +
    "\uffd2\031\uffd2\043\uffd2\070\uffd2\071\uffd2\072\uffd2\076\uffd2" +
    "\077\uffd2\001\002\000\056\002\uffd4\003\uffd4\007\uffd4\011" +
    "\uffd4\024\uffd4\025\uffd4\027\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\074\uffd4\075\uffd4\100\uffd4\101\uffd4\001\002" +
    "\000\004\030\u0101\001\002\000\004\023\u0102\001\002\000" +
    "\052\003\032\007\027\011\007\025\026\027\017\032\016" +
    "\033\046\034\056\047\015\050\006\051\013\052\053\053" +
    "\023\061\005\062\055\063\050\074\031\075\040\100\037" +
    "\101\014\001\002\000\054\003\032\007\027\011\007\024" +
    "\u0104\025\026\027\017\032\016\033\046\034\056\047\015" +
    "\050\006\051\013\052\053\053\023\061\005\062\055\063" +
    "\050\074\031\075\040\100\037\101\014\001\002\000\004" +
    "\024\u0105\001\002\000\056\002\uffd5\003\uffd5\007\uffd5\011" +
    "\uffd5\024\uffd5\025\uffd5\027\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\061\uffd5\062" +
    "\uffd5\063\uffd5\074\uffd5\075\uffd5\100\uffd5\101\uffd5\001\002" +
    "\000\004\007\u0107\001\002\000\004\055\313\001\002\000" +
    "\032\004\070\005\105\006\071\007\076\012\104\015\066" +
    "\043\073\070\101\071\103\072\077\076\102\077\100\001" +
    "\002\000\042\010\u010a\014\126\015\120\017\124\020\130" +
    "\021\123\022\121\035\125\036\132\037\122\040\116\041" +
    "\131\042\127\044\117\045\133\046\115\001\002\000\004" +
    "\007\u010b\001\002\000\010\014\u0111\015\u0113\055\u0112\001" +
    "\002\000\004\013\u010d\001\002\000\004\023\u010e\001\002" +
    "\000\052\003\032\007\027\011\007\025\026\027\017\032" +
    "\016\033\046\034\056\047\015\050\006\051\013\052\053" +
    "\053\023\061\005\062\055\063\050\074\031\075\040\100" +
    "\037\101\014\001\002\000\054\003\032\007\027\011\007" +
    "\024\u0110\025\026\027\017\032\016\033\046\034\056\047" +
    "\015\050\006\051\013\052\053\053\023\061\005\062\055" +
    "\063\050\074\031\075\040\100\037\101\014\001\002\000" +
    "\056\002\uffcf\003\uffcf\007\uffcf\011\uffcf\024\uffcf\025\uffcf" +
    "\027\uffcf\032\uffcf\033\uffcf\034\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\052\uffcf\053\uffcf\061\uffcf\062\uffcf\063\uffcf\074\uffcf" +
    "\075\uffcf\100\uffcf\101\uffcf\001\002\000\004\014\u0116\001" +
    "\002\000\032\004\070\005\105\006\071\007\076\012\104" +
    "\015\066\043\073\070\101\071\103\072\077\076\102\077" +
    "\100\001\002\000\004\015\u0114\001\002\000\004\013\uffcc" +
    "\001\002\000\042\013\uffce\014\126\015\120\017\124\020" +
    "\130\021\123\022\121\035\125\036\132\037\122\040\116" +
    "\041\131\042\127\044\117\045\133\046\115\001\002\000" +
    "\004\013\uffcd\001\002\000\056\002\uffc8\003\uffc8\007\uffc8" +
    "\011\uffc8\024\uffc8\025\uffc8\027\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\061\uffc8" +
    "\062\uffc8\063\uffc8\074\uffc8\075\uffc8\100\uffc8\101\uffc8\001" +
    "\002\000\004\012\u0119\001\002\000\020\013\u011a\047\015" +
    "\050\006\051\013\052\053\053\023\075\040\001\002\000" +
    "\004\023\u0125\001\002\000\006\013\u011f\060\u011e\001\002" +
    "\000\004\007\u011d\001\002\000\006\013\uffc4\060\uffc4\001" +
    "\002\000\016\047\015\050\006\051\013\052\053\053\023" +
    "\075\040\001\002\000\004\023\u0120\001\002\000\052\003" +
    "\032\007\027\011\007\025\026\027\017\032\016\033\046" +
    "\034\056\047\015\050\006\051\013\052\053\053\023\061" +
    "\005\062\055\063\050\074\031\075\040\100\037\101\014" +
    "\001\002\000\054\003\032\007\027\011\007\024\u0122\025" +
    "\026\027\017\032\016\033\046\034\056\047\015\050\006" +
    "\051\013\052\053\053\023\061\005\062\055\063\050\074" +
    "\031\075\040\100\037\101\014\001\002\000\056\002\uffc7" +
    "\003\uffc7\007\uffc7\011\uffc7\024\uffc7\025\uffc7\027\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\061\uffc7\062\uffc7\063\uffc7\074\uffc7\075\uffc7\100" +
    "\uffc7\101\uffc7\001\002\000\004\007\u0124\001\002\000\006" +
    "\013\uffc5\060\uffc5\001\002\000\052\003\032\007\027\011" +
    "\007\025\026\027\017\032\016\033\046\034\056\047\015" +
    "\050\006\051\013\052\053\053\023\061\005\062\055\063" +
    "\050\074\031\075\040\100\037\101\014\001\002\000\054" +
    "\003\032\007\027\011\007\024\u0127\025\026\027\017\032" +
    "\016\033\046\034\056\047\015\050\006\051\013\052\053" +
    "\053\023\061\005\062\055\063\050\074\031\075\040\100" +
    "\037\101\014\001\002\000\056\002\uffc6\003\uffc6\007\uffc6" +
    "\011\uffc6\024\uffc6\025\uffc6\027\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\074\uffc6\075\uffc6\100\uffc6\101\uffc6\001" +
    "\002\000\032\004\070\005\105\006\071\007\076\012\104" +
    "\015\066\043\073\070\101\071\103\072\077\076\102\077" +
    "\100\001\002\000\042\013\u012a\014\126\015\120\017\124" +
    "\020\130\021\123\022\121\035\125\036\132\037\122\040" +
    "\116\041\131\042\127\044\117\045\133\046\115\001\002" +
    "\000\004\010\u012b\001\002\000\056\002\uffe9\003\uffe9\007" +
    "\uffe9\011\uffe9\024\uffe9\025\uffe9\027\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\061" +
    "\uffe9\062\uffe9\063\uffe9\074\uffe9\075\uffe9\100\uffe9\101\uffe9" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0129\000\060\002\020\003\011\004\027\012\043\013" +
    "\051\014\034\016\041\017\050\020\021\021\024\022\046" +
    "\023\042\024\032\026\003\027\017\030\007\031\053\032" +
    "\035\033\044\035\010\036\040\043\033\045\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\004\061\012\043\013\051\014\034\016\041\017\050\020" +
    "\021\021\024\022\046\023\042\024\032\026\003\027\017" +
    "\030\007\031\053\032\035\033\044\035\010\036\040\043" +
    "\033\045\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\356\006" +
    "\074\007\064\010\066\011\073\034\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\057\004\027\012\043" +
    "\013\051\014\034\016\041\017\050\020\021\021\024\022" +
    "\046\023\042\024\032\026\003\027\017\030\007\031\053" +
    "\032\035\033\044\035\010\036\040\043\033\045\023\001" +
    "\001\000\054\004\061\012\043\013\051\014\034\016\041" +
    "\017\050\020\021\021\024\022\046\023\042\024\032\026" +
    "\003\027\017\030\007\031\053\032\035\033\044\035\010" +
    "\036\040\043\033\045\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\071\006\074" +
    "\007\064\010\066\011\073\034\105\001\001\000\002\001" +
    "\001\000\016\005\212\006\074\007\064\010\066\011\073" +
    "\034\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\207\006\074" +
    "\007\064\010\066\011\073\034\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\110\006\074\007\064\010\066" +
    "\011\073\034\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\113\006\074\007\064\010" +
    "\066\011\073\034\105\001\001\000\002\001\001\000\016" +
    "\005\151\006\074\007\064\010\066\011\073\034\105\001" +
    "\001\000\016\005\150\006\074\007\064\010\066\011\073" +
    "\034\105\001\001\000\016\005\147\006\074\007\064\010" +
    "\066\011\073\034\105\001\001\000\016\005\146\006\074" +
    "\007\064\010\066\011\073\034\105\001\001\000\016\005" +
    "\145\006\074\007\064\010\066\011\073\034\105\001\001" +
    "\000\016\005\144\006\074\007\064\010\066\011\073\034" +
    "\105\001\001\000\016\005\143\006\074\007\064\010\066" +
    "\011\073\034\105\001\001\000\016\005\142\006\074\007" +
    "\064\010\066\011\073\034\105\001\001\000\016\005\141" +
    "\006\074\007\064\010\066\011\073\034\105\001\001\000" +
    "\016\005\140\006\074\007\064\010\066\011\073\034\105" +
    "\001\001\000\016\005\137\006\074\007\064\010\066\011" +
    "\073\034\105\001\001\000\016\005\136\006\074\007\064" +
    "\010\066\011\073\034\105\001\001\000\016\005\135\006" +
    "\074\007\064\010\066\011\073\034\105\001\001\000\016" +
    "\005\134\006\074\007\064\010\066\011\073\034\105\001" +
    "\001\000\016\005\133\006\074\007\064\010\066\011\073" +
    "\034\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\154\006\074\007\064\010\066" +
    "\011\073\034\105\001\001\000\002\001\001\000\016\005" +
    "\156\006\074\007\064\010\066\011\073\034\105\001\001" +
    "\000\002\001\001\000\016\005\160\006\074\007\064\010" +
    "\066\011\073\034\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\163\006\074\007\064\010\066\011" +
    "\073\034\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\166\006\074\007\064\010\066\011\073\034" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\202\006\074\007\064\010\066\011\073\034\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\175\006\074\007\064\010\066\011\073\034" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\200\006\074\007\064\010\066\011\073\034\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\205\006\074\007\064\010" +
    "\066\011\073\034\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\226\006" +
    "\074\007\064\010\066\011\073\034\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\231\004\027\012" +
    "\043\013\051\014\034\016\041\017\050\020\021\021\024" +
    "\022\046\023\042\024\032\026\003\027\017\030\007\031" +
    "\053\032\035\033\044\035\010\036\040\043\033\045\023" +
    "\001\001\000\054\004\061\012\043\013\051\014\034\016" +
    "\041\017\050\020\021\021\024\022\046\023\042\024\032" +
    "\026\003\027\017\030\007\031\053\032\035\033\044\035" +
    "\010\036\040\043\033\045\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\235\001\001\000\004\015" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\242\006\074\007\064\010\066\011\073\034\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\251\006\074\007\064\010\066\011\073\034\105" +
    "\041\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\255\006\074\007\064\010\066\011\073\034\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\262" +
    "\001\001\000\020\005\251\006\074\007\064\010\066\011" +
    "\073\034\105\041\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\251\006\074\007" +
    "\064\010\066\011\073\034\105\041\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\005\277\006\074\007\064\010" +
    "\066\011\073\034\105\046\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\306\006\074\007\064\010\066\011\073\034\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\322\006\074\007\064" +
    "\010\066\011\073\034\105\001\001\000\002\001\001\000" +
    "\016\005\316\006\074\007\064\010\066\011\073\034\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\330\006\074\007\064\010\066\011\073\034\105" +
    "\001\001\000\016\005\326\006\074\007\064\010\066\011" +
    "\073\034\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\333\006" +
    "\074\007\064\010\066\011\073\034\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\337\006\074\007\064\010\066\011\073\034\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\343\006\074\007\064\010\066\011\073\034\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\346\004\027\012\043\013\051\014\034\016\041\017\050" +
    "\020\021\021\024\022\046\023\042\024\032\026\003\027" +
    "\017\030\007\031\053\032\035\033\044\035\010\036\040" +
    "\043\033\045\023\001\001\000\054\004\061\012\043\013" +
    "\051\014\034\016\041\017\050\020\021\021\024\022\046" +
    "\023\042\024\032\026\003\027\017\030\007\031\053\032" +
    "\035\033\044\035\010\036\040\043\033\045\023\001\001" +
    "\000\002\001\001\000\004\020\351\001\001\000\002\001" +
    "\001\000\056\003\353\004\027\012\043\013\051\014\034" +
    "\016\041\017\050\020\021\021\024\022\046\023\042\024" +
    "\032\026\003\027\017\030\007\031\053\032\035\033\044" +
    "\035\010\036\040\043\033\045\023\001\001\000\054\004" +
    "\061\012\043\013\051\014\034\016\041\017\050\020\021" +
    "\021\024\022\046\023\042\024\032\026\003\027\017\030" +
    "\007\031\053\032\035\033\044\035\010\036\040\043\033" +
    "\045\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\361\006\074\007\064\010\066" +
    "\011\073\034\105\037\362\040\360\001\001\000\020\005" +
    "\361\006\074\007\064\010\066\011\073\034\105\037\375" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\366\004\027\012\043" +
    "\013\051\014\034\016\041\017\050\020\021\021\024\022" +
    "\046\023\042\024\032\026\003\027\017\030\007\031\053" +
    "\032\035\033\044\035\010\036\040\043\033\045\023\001" +
    "\001\000\054\004\061\012\043\013\051\014\034\016\041" +
    "\017\050\020\021\021\024\022\046\023\042\024\032\026" +
    "\003\027\017\030\007\031\053\032\035\033\044\035\010" +
    "\036\040\043\033\045\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\373\004\027" +
    "\012\043\013\051\014\034\016\041\017\050\020\021\021" +
    "\024\022\046\023\042\024\032\026\003\027\017\030\007" +
    "\031\053\032\035\033\044\035\010\036\040\043\033\045" +
    "\023\001\001\000\054\004\061\012\043\013\051\014\034" +
    "\016\041\017\050\020\021\021\024\022\046\023\042\024" +
    "\032\026\003\027\017\030\007\031\053\032\035\033\044" +
    "\035\010\036\040\043\033\045\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\003\u0102\004\027\012\043\013" +
    "\051\014\034\016\041\017\050\020\021\021\024\022\046" +
    "\023\042\024\032\026\003\027\017\030\007\031\053\032" +
    "\035\033\044\035\010\036\040\043\033\045\023\001\001" +
    "\000\054\004\061\012\043\013\051\014\034\016\041\017" +
    "\050\020\021\021\024\022\046\023\042\024\032\026\003" +
    "\027\017\030\007\031\053\032\035\033\044\035\010\036" +
    "\040\043\033\045\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u0107\001\001\000\002\001\001\000" +
    "\016\005\u0108\006\074\007\064\010\066\011\073\034\105" +
    "\001\001\000\002\001\001\000\004\025\u010b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\003\u010e\004\027\012\043\013\051\014\034\016\041\017" +
    "\050\020\021\021\024\022\046\023\042\024\032\026\003" +
    "\027\017\030\007\031\053\032\035\033\044\035\010\036" +
    "\040\043\033\045\023\001\001\000\054\004\061\012\043" +
    "\013\051\014\034\016\041\017\050\020\021\021\024\022" +
    "\046\023\042\024\032\026\003\027\017\030\007\031\053" +
    "\032\035\033\044\035\010\036\040\043\033\045\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\u0114" +
    "\006\074\007\064\010\066\011\073\034\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\u011b\044\u011a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u0122\001" +
    "\001\000\002\001\001\000\056\003\u0120\004\027\012\043" +
    "\013\051\014\034\016\041\017\050\020\021\021\024\022" +
    "\046\023\042\024\032\026\003\027\017\030\007\031\053" +
    "\032\035\033\044\035\010\036\040\043\033\045\023\001" +
    "\001\000\054\004\061\012\043\013\051\014\034\016\041" +
    "\017\050\020\021\021\024\022\046\023\042\024\032\026" +
    "\003\027\017\030\007\031\053\032\035\033\044\035\010" +
    "\036\040\043\033\045\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\u0125\004\027" +
    "\012\043\013\051\014\034\016\041\017\050\020\021\021" +
    "\024\022\046\023\042\024\032\026\003\027\017\030\007" +
    "\031\053\032\035\033\044\035\010\036\040\043\033\045" +
    "\023\001\001\000\054\004\061\012\043\013\051\014\034" +
    "\016\041\017\050\020\021\021\024\022\046\023\042\024" +
    "\032\026\003\027\017\030\007\031\053\032\035\033\044" +
    "\035\010\036\040\043\033\045\023\001\001\000\002\001" +
    "\001\000\016\005\u0128\006\074\007\064\010\066\011\073" +
    "\034\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= println 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= declaracion_vectores 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= declaracion_lista 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= append_lista 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= asignacion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= asignacion_vector 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= incremento_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= decremento_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= sentencia_match 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= ciclo_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= ciclo_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= ciclo_dowhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= transferencia_break 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= transferencia_continue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= metodo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= instruccion_start 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // println ::= IMPRIMIR PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Println(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("println",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_variable ::= mutabilidad ID DOSPUNTOS tipos_variable inicializar_variable 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionVariable(e, b, c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inicializar_variable ::= IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inicializar_variable ::= FINCADENA 
            {
              Instruccion RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignacion_variable ::= ID IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // incremento_variable ::= ID MAS MAS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incremento_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // decremento_variable ::= ID MENOS MENOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionResta(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decremento_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_vectores ::= mutabilidad ID DOSPUNTOS tipos_variable CORCHETE1 CORCHETE2 IGUAL CORCHETE1 lista_vector_u CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorUnaDimension(e,b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_vectores",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion_vectores ::= mutabilidad ID DOSPUNTOS tipos_variable CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 lista_vector_d CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> c = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorDosDimensiones(e,b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_vectores",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_vector_u ::= lista_vector_u COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_u",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_vector_u ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<> (); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_u",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_vector_d ::= lista_vector_d COMA CORCHETE1 lista_vector_u CORCHETE2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_d",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_vector_d ::= CORCHETE1 lista_vector_u CORCHETE2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<> (); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_d",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asignacion_vector ::= ID CORCHETE1 expresion CORCHETE2 IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVectorUnaDimension(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_vector",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacion_vector ::= ID CORCHETE1 expresion CORCHETE2 CORCHETE1 expresion CORCHETE2 IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVectorDosDimensiones(a, b, c, d, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_vector",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_lista ::= LIST MENOR tipos_variable MAYOR ID IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		RESULT = new DeclaracionLista(b,a, aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_lista",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // append_lista ::= ID PUNTO APPEND PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AppendLista(a, b, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("append_lista",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaIf(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 ELSE LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaIfElse(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 ELSE sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaElseIF(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia_match ::= MATCH expresion LLAVE1 casos_match DEFAULT FLECHA LLAVE1 instrucciones LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<CasoMatch> b = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new SentenciaMatch(a, b, c, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia_match ::= MATCH expresion LLAVE1 casos_match LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoMatch> b = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new SentenciaMatch(a, b, null, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia_match ::= MATCH expresion LLAVE1 DEFAULT FLECHA LLAVE1 instrucciones LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new SentenciaMatch(a, null, c, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // casos_match ::= casos_match caso_match 
            {
              LinkedList<CasoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoMatch> a = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoMatch b = (CasoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_match",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // casos_match ::= caso_match 
            {
              LinkedList<CasoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoMatch a = (CasoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_match",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // caso_match ::= expresion FLECHA LLAVE1 instrucciones LLAVE2 
            {
              CasoMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CasoMatch(a, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_match",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ciclo_for ::= FOR PAR1 asignacion_variable expresion FINCADENA actualizar_for PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaFor(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // actualizar_for ::= ID IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // actualizar_for ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // actualizar_for ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionResta(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ciclo_while ::= WHILE PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ciclo_dowhile ::= DO LLAVE1 instrucciones LLAVE2 WHILE PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaDoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_dowhile",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // transferencia_break ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaBreak(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_break",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // transferencia_continue ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaContinue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_continue",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // metodo ::= tipos_variable ID PAR1 parametros_metodo PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // metodo ::= tipos_variable ID PAR1 PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros_metodo ::= parametros_metodo COMA tipos_variable ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_metodo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros_metodo ::= tipos_variable ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_metodo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instruccion_start ::= STARTWITH ID PAR1 parametros_llamada PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new StartWith(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_start",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruccion_start ::= STARTWITH ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new StartWith(a, new LinkedList<Instruccion>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_start",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros_llamada ::= parametros_llamada COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros_llamada ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipos_variable ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipos_variable ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.DECIMAL);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipos_variable ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipos_variable ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipos_variable ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipos_variable ::= VOID 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.VOID);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // mutabilidad ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // mutabilidad ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresionAritmetica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresionRelacional 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresionLogica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= funciones_nativas 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= castearExpresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(TipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= ID CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVectorUnaDimension(a, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= ID CORCHETE1 expresion CORCHETE2 CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVectorDosDimensiones(a, b, c, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= ID PUNTO REMOVE PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new RemoveLista(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresionAritmetica ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionNegacionU(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresionAritmetica ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionSuma(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresionAritmetica ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionResta(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresionAritmetica ::= expresion MULT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresionAritmetica ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDivision (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresionAritmetica ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionModulo (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresionAritmetica ::= expresion POTENCIA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionPotencia (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresionAritmetica ::= PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresionRelacional ::= expresion DOBLEIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Igualacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresionRelacional ::= expresion DIFERENTE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Diferenciacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresionRelacional ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresionRelacional ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresionRelacional ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresionRelacional ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresionLogica ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorNot(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionLogica ::= expresion XOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorXor(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresionLogica ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAnd(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresionLogica ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOr(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // funciones_nativas ::= ROUND PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionRound(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // funciones_nativas ::= LENGTH PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionLength(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // funciones_nativas ::= TOSTRING PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionToString(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // funciones_nativas ::= ID PUNTO FIND PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionFind(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // castearExpresion ::= PAR1 INT PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.ENTERO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // castearExpresion ::= PAR1 DOUBLE PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.DECIMAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // castearExpresion ::= PAR1 CHAR PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.CARACTER, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
