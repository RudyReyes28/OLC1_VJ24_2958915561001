
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.rudyreyes.javacraft.controlador.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.javacraft.modelo.abstracto.Instruccion;
import com.rudyreyes.javacraft.modelo.simbolo.*;
import java.util.HashMap;
import com.rudyreyes.javacraft.modelo.instrucciones.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciaControl.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciasTransferencia.*;
import com.rudyreyes.javacraft.modelo.instrucciones.sentenciasCiclicas.*;
import com.rudyreyes.javacraft.modelo.instrucciones.vectores.*;
import com.rudyreyes.javacraft.modelo.instrucciones.listas.*;
import com.rudyreyes.javacraft.modelo.instrucciones.metodos.*;
import com.rudyreyes.javacraft.modelo.expresiones.Nativo;
import com.rudyreyes.javacraft.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.javacraft.modelo.expresiones.relacionales.*;
import com.rudyreyes.javacraft.modelo.expresiones.logicas.*;
import com.rudyreyes.javacraft.modelo.expresiones.casteos.*;
import com.rudyreyes.javacraft.modelo.expresiones.variables.*;
import com.rudyreyes.javacraft.modelo.expresiones.accesovector.*;
import com.rudyreyes.javacraft.modelo.expresiones.funcionesNativas.*;
import com.rudyreyes.javacraft.modelo.errores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\012\007\000\002\013\007\000\002\015" +
    "\005\000\002\015\003\000\002\014\006\000\002\016\006" +
    "\000\002\017\006\000\002\030\015\000\002\030\017\000" +
    "\002\041\005\000\002\041\003\000\002\042\007\000\002" +
    "\042\005\000\002\031\011\000\002\031\014\000\002\032" +
    "\015\000\002\033\011\000\002\020\011\000\002\020\015" +
    "\000\002\020\013\000\002\021\014\000\002\021\007\000" +
    "\002\021\013\000\002\040\004\000\002\040\003\000\002" +
    "\037\007\000\002\022\014\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\023\011\000\002\024\013" +
    "\000\002\026\004\000\002\027\004\000\002\043\012\000" +
    "\002\043\011\000\002\044\006\000\002\044\004\000\002" +
    "\045\010\000\002\045\007\000\002\047\007\000\002\047" +
    "\006\000\002\050\006\000\002\050\005\000\002\046\005" +
    "\000\002\046\003\000\002\051\005\000\002\051\004\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\036" +
    "\003\000\002\036\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\006\000\002\005\011\000\002\005\010" +
    "\000\002\006\004\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\010\004\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\034\006\000\002" +
    "\034\006\000\002\034\006\000\002\034\010\000\002\011" +
    "\006\000\002\011\006\000\002\011\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\054\003\034\007\027\011\007\025\026\027" +
    "\017\032\016\033\051\034\061\047\015\050\006\051\013" +
    "\052\056\053\023\061\005\062\060\063\053\074\033\075" +
    "\042\100\040\101\014\102\032\001\002\000\060\002\uffef" +
    "\003\uffef\007\uffef\011\uffef\024\uffef\025\uffef\027\uffef\032" +
    "\uffef\033\uffef\034\uffef\047\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\061\uffef\062\uffef\063\uffef\074\uffef\075\uffef\100" +
    "\uffef\101\uffef\102\uffef\001\002\000\004\007\uffb1\001\002" +
    "\000\014\007\uffb4\010\uffb4\041\uffb4\055\uffb4\056\uffb4\001" +
    "\002\000\004\012\u0139\001\002\000\060\002\ufffb\003\ufffb" +
    "\007\ufffb\011\ufffb\024\ufffb\025\ufffb\027\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\074\ufffb\075\ufffb\100\ufffb\101" +
    "\ufffb\102\ufffb\001\002\000\004\007\u0129\001\002\000\056" +
    "\002\000\003\034\007\027\011\007\025\026\027\017\032" +
    "\016\033\051\034\061\047\015\050\006\051\013\052\056" +
    "\053\023\061\005\062\060\063\053\074\033\075\042\100" +
    "\040\101\014\102\032\001\002\000\014\007\uffb6\010\uffb6" +
    "\041\uffb6\055\uffb6\056\uffb6\001\002\000\004\010\u0128\001" +
    "\002\000\014\007\uffb7\010\uffb7\041\uffb7\055\uffb7\056\uffb7" +
    "\001\002\000\004\012\u0117\001\002\000\032\004\073\005" +
    "\111\006\074\007\102\012\110\015\071\043\076\070\104" +
    "\071\107\072\101\076\105\077\103\001\002\000\060\002" +
    "\uffee\003\uffee\007\uffee\011\uffee\024\uffee\025\uffee\027\uffee" +
    "\032\uffee\033\uffee\034\uffee\047\uffee\050\uffee\051\uffee\052" +
    "\uffee\053\uffee\061\uffee\062\uffee\063\uffee\074\uffee\075\uffee" +
    "\100\uffee\101\uffee\102\uffee\001\002\000\004\002\377\001" +
    "\002\000\060\002\ufff4\003\ufff4\007\ufff4\011\ufff4\024\ufff4" +
    "\025\ufff4\027\ufff4\032\ufff4\033\ufff4\034\ufff4\047\ufff4\050" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\061\ufff4\062\ufff4\063\ufff4" +
    "\074\ufff4\075\ufff4\100\ufff4\101\ufff4\102\ufff4\001\002\000" +
    "\014\007\uffb3\010\uffb3\041\uffb3\055\uffb3\056\uffb3\001\002" +
    "\000\060\002\uffec\003\uffec\007\uffec\011\uffec\024\uffec\025" +
    "\uffec\027\uffec\032\uffec\033\uffec\034\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\061\uffec\062\uffec\063\uffec\074" +
    "\uffec\075\uffec\100\uffec\101\uffec\102\uffec\001\002\000\060" +
    "\002\ufff3\003\ufff3\007\ufff3\011\ufff3\024\ufff3\025\ufff3\027" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\052\ufff3\053\ufff3\061\ufff3\062\ufff3\063\ufff3\074\ufff3\075" +
    "\ufff3\100\ufff3\101\ufff3\102\ufff3\001\002\000\004\012\364" +
    "\001\002\000\016\012\330\014\325\015\327\055\326\056" +
    "\324\065\323\001\002\000\060\002\ufffe\003\ufffe\007\ufffe" +
    "\011\ufffe\024\ufffe\025\ufffe\027\ufffe\032\ufffe\033\ufffe\034" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\061\ufffe" +
    "\062\ufffe\063\ufffe\074\ufffe\075\ufffe\100\ufffe\101\ufffe\102" +
    "\ufffe\001\002\000\060\002\uffeb\003\uffeb\007\uffeb\011\uffeb" +
    "\024\uffeb\025\uffeb\027\uffeb\032\uffeb\033\uffeb\034\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\061\uffeb\062\uffeb" +
    "\063\uffeb\074\uffeb\075\uffeb\100\uffeb\101\uffeb\102\uffeb\001" +
    "\002\000\034\004\073\005\111\006\074\007\102\010\320" +
    "\012\110\015\071\043\076\070\104\071\107\072\101\076" +
    "\105\077\103\001\002\000\004\007\311\001\002\000\062" +
    "\002\uffe8\003\uffe8\007\uffe8\010\310\011\uffe8\024\uffe8\025" +
    "\uffe8\027\uffe8\032\uffe8\033\uffe8\034\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\061\uffe8\062\uffe8\063\uffe8\074" +
    "\uffe8\075\uffe8\100\uffe8\101\uffe8\102\uffe8\001\002\000\060" +
    "\002\ufff0\003\ufff0\007\ufff0\011\ufff0\024\ufff0\025\ufff0\027" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\047\ufff0\050\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\061\ufff0\062\ufff0\063\ufff0\074\ufff0\075" +
    "\ufff0\100\ufff0\101\ufff0\102\ufff0\001\002\000\060\002\uffed" +
    "\003\uffed\007\uffed\011\uffed\024\uffed\025\uffed\027\uffed\032" +
    "\uffed\033\uffed\034\uffed\047\uffed\050\uffed\051\uffed\052\uffed" +
    "\053\uffed\061\uffed\062\uffed\063\uffed\074\uffed\075\uffed\100" +
    "\uffed\101\uffed\102\uffed\001\002\000\060\002\ufff8\003\ufff8" +
    "\007\ufff8\011\ufff8\024\ufff8\025\ufff8\027\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\061\ufff8\062\ufff8\063\ufff8\074\ufff8\075\ufff8\100\ufff8\101" +
    "\ufff8\102\ufff8\001\002\000\004\010\307\001\002\000\060" +
    "\002\ufffa\003\ufffa\007\ufffa\011\ufffa\024\ufffa\025\ufffa\027" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\047\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\061\ufffa\062\ufffa\063\ufffa\074\ufffa\075" +
    "\ufffa\100\ufffa\101\ufffa\102\ufffa\001\002\000\014\007\uffb2" +
    "\010\uffb2\041\uffb2\055\uffb2\056\uffb2\001\002\000\004\007" +
    "\247\001\002\000\060\002\ufff6\003\ufff6\007\ufff6\011\ufff6" +
    "\024\ufff6\025\ufff6\027\ufff6\032\ufff6\033\ufff6\034\ufff6\047" +
    "\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\061\ufff6\062\ufff6" +
    "\063\ufff6\074\ufff6\075\ufff6\100\ufff6\101\ufff6\102\ufff6\001" +
    "\002\000\060\002\ufff1\003\ufff1\007\ufff1\011\ufff1\024\ufff1" +
    "\025\ufff1\027\ufff1\032\ufff1\033\ufff1\034\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\061\ufff1\062\ufff1\063\ufff1" +
    "\074\ufff1\075\ufff1\100\ufff1\101\ufff1\102\ufff1\001\002\000" +
    "\060\002\ufffd\003\ufffd\007\ufffd\011\ufffd\024\ufffd\025\ufffd" +
    "\027\ufffd\032\ufffd\033\ufffd\034\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\053\ufffd\061\ufffd\062\ufffd\063\ufffd\074\ufffd" +
    "\075\ufffd\100\ufffd\101\ufffd\102\ufffd\001\002\000\060\002" +
    "\ufff9\003\ufff9\007\ufff9\011\ufff9\024\ufff9\025\ufff9\027\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\047\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\061\ufff9\062\ufff9\063\ufff9\074\ufff9\075\ufff9" +
    "\100\ufff9\101\ufff9\102\ufff9\001\002\000\060\002\uffea\003" +
    "\uffea\007\uffea\011\uffea\024\uffea\025\uffea\027\uffea\032\uffea" +
    "\033\uffea\034\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053" +
    "\uffea\061\uffea\062\uffea\063\uffea\074\uffea\075\uffea\100\uffea" +
    "\101\uffea\102\uffea\001\002\000\004\012\241\001\002\000" +
    "\060\002\ufff2\003\ufff2\007\ufff2\011\ufff2\024\ufff2\025\ufff2" +
    "\027\ufff2\032\ufff2\033\ufff2\034\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\061\ufff2\062\ufff2\063\ufff2\074\ufff2" +
    "\075\ufff2\100\ufff2\101\ufff2\102\ufff2\001\002\000\004\037" +
    "\227\001\002\000\060\002\ufff5\003\ufff5\007\ufff5\011\ufff5" +
    "\024\ufff5\025\ufff5\027\ufff5\032\ufff5\033\ufff5\034\ufff5\047" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\061\ufff5\062\ufff5" +
    "\063\ufff5\074\ufff5\075\ufff5\100\ufff5\101\ufff5\102\ufff5\001" +
    "\002\000\060\002\ufffc\003\ufffc\007\ufffc\011\ufffc\024\ufffc" +
    "\025\ufffc\027\ufffc\032\ufffc\033\ufffc\034\ufffc\047\ufffc\050" +
    "\ufffc\051\ufffc\052\ufffc\053\ufffc\061\ufffc\062\ufffc\063\ufffc" +
    "\074\ufffc\075\ufffc\100\ufffc\101\ufffc\102\ufffc\001\002\000" +
    "\014\007\uffb5\010\uffb5\041\uffb5\055\uffb5\056\uffb5\001\002" +
    "\000\060\002\ufff7\003\ufff7\007\ufff7\011\ufff7\024\ufff7\025" +
    "\ufff7\027\ufff7\032\ufff7\033\ufff7\034\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\061\ufff7\062\ufff7\063\ufff7\074" +
    "\ufff7\075\ufff7\100\ufff7\101\ufff7\102\ufff7\001\002\000\004" +
    "\007\uffb0\001\002\000\004\023\062\001\002\000\054\003" +
    "\034\007\027\011\007\025\026\027\017\032\016\033\051" +
    "\034\061\047\015\050\006\051\013\052\056\053\023\061" +
    "\005\062\060\063\053\074\033\075\042\100\040\101\014" +
    "\102\032\001\002\000\056\003\034\007\027\011\007\024" +
    "\064\025\026\027\017\032\016\033\051\034\061\047\015" +
    "\050\006\051\013\052\056\053\023\061\005\062\060\063" +
    "\053\074\033\075\042\100\040\101\014\102\032\001\002" +
    "\000\004\033\066\001\002\000\060\002\uffff\003\uffff\007" +
    "\uffff\011\uffff\024\uffff\025\uffff\027\uffff\032\uffff\033\uffff" +
    "\034\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\061" +
    "\uffff\062\uffff\063\uffff\074\uffff\075\uffff\100\uffff\101\uffff" +
    "\102\uffff\001\002\000\004\012\067\001\002\000\032\004" +
    "\073\005\111\006\074\007\102\012\110\015\071\043\076" +
    "\070\104\071\107\072\101\076\105\077\103\001\002\000" +
    "\054\010\uffae\013\uffae\014\uffae\015\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\030\uffae\035\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\044\uffae\045\uffae\046\uffae" +
    "\057\uffae\060\uffae\001\002\000\032\004\073\005\111\006" +
    "\074\007\102\012\110\015\071\043\076\070\104\071\107" +
    "\072\101\076\105\077\103\001\002\000\054\010\uffad\013" +
    "\uffad\014\uffad\015\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\030\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041" +
    "\uffad\042\uffad\044\uffad\045\uffad\046\uffad\057\uffad\060\uffad" +
    "\001\002\000\054\010\uffa7\013\uffa7\014\uffa7\015\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\030\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\057\uffa7\060\uffa7\001\002\000\054\010\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\030\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\044\uffa8\045\uffa8\046\uffa8\057\uffa8\060" +
    "\uffa8\001\002\000\042\013\224\014\132\015\124\017\127" +
    "\020\134\021\130\022\125\035\131\036\136\037\126\040" +
    "\122\041\135\042\133\044\123\045\137\046\121\001\002" +
    "\000\032\004\073\005\111\006\074\007\102\012\110\015" +
    "\071\043\076\070\104\071\107\072\101\076\105\077\103" +
    "\001\002\000\054\010\uffab\013\uffab\014\uffab\015\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\030\uffab\035\uffab" +
    "\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\044\uffab\045" +
    "\uffab\046\uffab\057\uffab\060\uffab\001\002\000\054\010\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\017\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\023\uffaf\030\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\044\uffaf\045\uffaf\046\uffaf\057\uffaf\060" +
    "\uffaf\001\002\000\004\012\220\001\002\000\062\010\uffa4" +
    "\012\174\013\uffa4\014\uffa4\015\uffa4\017\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\030\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\042\uffa4\044\uffa4\045\uffa4\046\uffa4\056" +
    "\173\057\uffa4\060\uffa4\065\172\001\002\000\054\010\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\017\uffa6\020\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\030\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\041\uffa6\042\uffa6\044\uffa6\045\uffa6\046\uffa6\057\uffa6\060" +
    "\uffa6\001\002\000\004\012\167\001\002\000\054\010\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\030\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\044\uffa5\045\uffa5\046\uffa5\057\uffa5\060" +
    "\uffa5\001\002\000\054\010\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\030\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\057\uffaa\060\uffaa\001\002\000\004\012" +
    "\164\001\002\000\040\004\073\005\111\006\074\007\102" +
    "\012\110\015\071\043\076\047\113\050\114\051\116\070" +
    "\104\071\107\072\101\076\105\077\103\001\002\000\054" +
    "\010\uffa9\013\uffa9\014\uffa9\015\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\030\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\044\uffa9\045\uffa9\046\uffa9\057" +
    "\uffa9\060\uffa9\001\002\000\054\010\uffac\013\uffac\014\uffac" +
    "\015\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\030" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\044\uffac\045\uffac\046\uffac\057\uffac\060\uffac\001\002\000" +
    "\004\013\162\001\002\000\004\013\160\001\002\000\042" +
    "\013\157\014\132\015\124\017\127\020\134\021\130\022" +
    "\125\035\131\036\136\037\126\040\122\041\135\042\133" +
    "\044\123\045\137\046\121\001\002\000\004\013\117\001" +
    "\002\000\032\004\073\005\111\006\074\007\102\012\110" +
    "\015\071\043\076\070\104\071\107\072\101\076\105\077" +
    "\103\001\002\000\054\010\uff89\013\uff89\014\132\015\124" +
    "\017\127\020\134\021\130\022\125\023\uff89\030\uff89\035" +
    "\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\044\uff89" +
    "\045\uff89\046\uff89\057\uff89\060\uff89\001\002\000\032\004" +
    "\073\005\111\006\074\007\102\012\110\015\071\043\076" +
    "\070\104\071\107\072\101\076\105\077\103\001\002\000" +
    "\032\004\073\005\111\006\074\007\102\012\110\015\071" +
    "\043\076\070\104\071\107\072\101\076\105\077\103\001" +
    "\002\000\032\004\073\005\111\006\074\007\102\012\110" +
    "\015\071\043\076\070\104\071\107\072\101\076\105\077" +
    "\103\001\002\000\032\004\073\005\111\006\074\007\102" +
    "\012\110\015\071\043\076\070\104\071\107\072\101\076" +
    "\105\077\103\001\002\000\032\004\073\005\111\006\074" +
    "\007\102\012\110\015\071\043\076\070\104\071\107\072" +
    "\101\076\105\077\103\001\002\000\032\004\073\005\111" +
    "\006\074\007\102\012\110\015\071\043\076\070\104\071" +
    "\107\072\101\076\105\077\103\001\002\000\032\004\073" +
    "\005\111\006\074\007\102\012\110\015\071\043\076\070" +
    "\104\071\107\072\101\076\105\077\103\001\002\000\032" +
    "\004\073\005\111\006\074\007\102\012\110\015\071\043" +
    "\076\070\104\071\107\072\101\076\105\077\103\001\002" +
    "\000\032\004\073\005\111\006\074\007\102\012\110\015" +
    "\071\043\076\070\104\071\107\072\101\076\105\077\103" +
    "\001\002\000\032\004\073\005\111\006\074\007\102\012" +
    "\110\015\071\043\076\070\104\071\107\072\101\076\105" +
    "\077\103\001\002\000\032\004\073\005\111\006\074\007" +
    "\102\012\110\015\071\043\076\070\104\071\107\072\101" +
    "\076\105\077\103\001\002\000\032\004\073\005\111\006" +
    "\074\007\102\012\110\015\071\043\076\070\104\071\107" +
    "\072\101\076\105\077\103\001\002\000\032\004\073\005" +
    "\111\006\074\007\102\012\110\015\071\043\076\070\104" +
    "\071\107\072\101\076\105\077\103\001\002\000\032\004" +
    "\073\005\111\006\074\007\102\012\110\015\071\043\076" +
    "\070\104\071\107\072\101\076\105\077\103\001\002\000" +
    "\032\004\073\005\111\006\074\007\102\012\110\015\071" +
    "\043\076\070\104\071\107\072\101\076\105\077\103\001" +
    "\002\000\054\010\uff8f\013\uff8f\014\132\015\124\017\127" +
    "\020\134\021\130\022\125\023\uff8f\030\uff8f\035\131\036" +
    "\136\037\126\040\122\041\135\042\133\044\123\045\uff8f" +
    "\046\121\057\uff8f\060\uff8f\001\002\000\054\010\uff97\013" +
    "\uff97\014\132\015\124\017\127\020\134\021\130\022\125" +
    "\023\uff97\030\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041" +
    "\uff97\042\uff97\044\uff97\045\uff97\046\uff97\057\uff97\060\uff97" +
    "\001\002\000\054\010\uff94\013\uff94\014\132\015\124\017" +
    "\127\020\134\021\130\022\125\023\uff94\030\uff94\035\uff94" +
    "\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\044\uff94\045" +
    "\uff94\046\uff94\057\uff94\060\uff94\001\002\000\054\010\uff9c" +
    "\013\uff9c\014\uff9c\015\uff9c\017\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\030\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\042\uff9c\044\uff9c\045\uff9c\046\uff9c\057\uff9c\060" +
    "\uff9c\001\002\000\054\010\uff93\013\uff93\014\132\015\124" +
    "\017\127\020\134\021\130\022\125\023\uff93\030\uff93\035" +
    "\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\044\uff93" +
    "\045\uff93\046\uff93\057\uff93\060\uff93\001\002\000\054\010" +
    "\uff9f\013\uff9f\014\uff9f\015\uff9f\017\127\020\134\021\130" +
    "\022\125\023\uff9f\030\uff9f\035\uff9f\036\uff9f\037\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\044\uff9f\045\uff9f\046\uff9f\057\uff9f" +
    "\060\uff9f\001\002\000\054\010\uff98\013\uff98\014\132\015" +
    "\124\017\127\020\134\021\130\022\125\023\uff98\030\uff98" +
    "\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\044" +
    "\uff98\045\uff98\046\uff98\057\uff98\060\uff98\001\002\000\054" +
    "\010\uff9b\013\uff9b\014\uff9b\015\uff9b\017\uff9b\020\uff9b\021" +
    "\uff9b\022\uff9b\023\uff9b\030\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\041\uff9b\042\uff9b\044\uff9b\045\uff9b\046\uff9b\057" +
    "\uff9b\060\uff9b\001\002\000\054\010\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\030" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\057\uff9d\060\uff9d\001\002\000" +
    "\054\010\uff96\013\uff96\014\132\015\124\017\127\020\134" +
    "\021\130\022\125\023\uff96\030\uff96\035\uff96\036\uff96\037" +
    "\uff96\040\uff96\041\uff96\042\uff96\044\uff96\045\uff96\046\uff96" +
    "\057\uff96\060\uff96\001\002\000\054\010\uff9a\013\uff9a\014" +
    "\uff9a\015\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a" +
    "\030\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\057\uff9a\060\uff9a\001\002" +
    "\000\054\010\uff9e\013\uff9e\014\uff9e\015\uff9e\017\127\020" +
    "\134\021\130\022\125\023\uff9e\030\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\057\uff9e\060\uff9e\001\002\000\054\010\uff91\013\uff91" +
    "\014\132\015\124\017\127\020\134\021\130\022\125\023" +
    "\uff91\030\uff91\035\131\036\136\037\126\040\122\041\135" +
    "\042\133\044\uff91\045\uff91\046\uff91\057\uff91\060\uff91\001" +
    "\002\000\054\010\uff95\013\uff95\014\132\015\124\017\127" +
    "\020\134\021\130\022\125\023\uff95\030\uff95\035\uff95\036" +
    "\uff95\037\uff95\040\uff95\041\uff95\042\uff95\044\uff95\045\uff95" +
    "\046\uff95\057\uff95\060\uff95\001\002\000\054\010\uff90\013" +
    "\uff90\014\132\015\124\017\127\020\134\021\130\022\125" +
    "\023\uff90\030\uff90\035\131\036\136\037\126\040\122\041" +
    "\135\042\133\044\123\045\uff90\046\uff90\057\uff90\060\uff90" +
    "\001\002\000\054\010\uff99\013\uff99\014\uff99\015\uff99\017" +
    "\uff99\020\uff99\021\uff99\022\uff99\023\uff99\030\uff99\035\uff99" +
    "\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\044\uff99\045" +
    "\uff99\046\uff99\057\uff99\060\uff99\001\002\000\032\004\073" +
    "\005\111\006\074\007\102\012\110\015\071\043\076\070" +
    "\104\071\107\072\101\076\105\077\103\001\002\000\054" +
    "\010\uff88\013\uff88\014\132\015\124\017\127\020\134\021" +
    "\130\022\125\023\uff88\030\uff88\035\uff88\036\uff88\037\uff88" +
    "\040\uff88\041\uff88\042\uff88\044\uff88\045\uff88\046\uff88\057" +
    "\uff88\060\uff88\001\002\000\032\004\073\005\111\006\074" +
    "\007\102\012\110\015\071\043\076\070\104\071\107\072" +
    "\101\076\105\077\103\001\002\000\054\010\uff8a\013\uff8a" +
    "\014\132\015\124\017\127\020\134\021\130\022\125\023" +
    "\uff8a\030\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a" +
    "\042\uff8a\044\uff8a\045\uff8a\046\uff8a\057\uff8a\060\uff8a\001" +
    "\002\000\032\004\073\005\111\006\074\007\102\012\110" +
    "\015\071\043\076\070\104\071\107\072\101\076\105\077" +
    "\103\001\002\000\042\013\166\014\132\015\124\017\127" +
    "\020\134\021\130\022\125\035\131\036\136\037\126\040" +
    "\122\041\135\042\133\044\123\045\137\046\121\001\002" +
    "\000\054\010\uff8d\013\uff8d\014\uff8d\015\uff8d\017\uff8d\020" +
    "\uff8d\021\uff8d\022\uff8d\023\uff8d\030\uff8d\035\uff8d\036\uff8d" +
    "\037\uff8d\040\uff8d\041\uff8d\042\uff8d\044\uff8d\045\uff8d\046" +
    "\uff8d\057\uff8d\060\uff8d\001\002\000\032\004\073\005\111" +
    "\006\074\007\102\012\110\015\071\043\076\070\104\071" +
    "\107\072\101\076\105\077\103\001\002\000\042\013\171" +
    "\014\132\015\124\017\127\020\134\021\130\022\125\035" +
    "\131\036\136\037\126\040\122\041\135\042\133\044\123" +
    "\045\137\046\121\001\002\000\054\010\uff8e\013\uff8e\014" +
    "\uff8e\015\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e" +
    "\030\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042" +
    "\uff8e\044\uff8e\045\uff8e\046\uff8e\057\uff8e\060\uff8e\001\002" +
    "\000\006\067\211\073\210\001\002\000\032\004\073\005" +
    "\111\006\074\007\102\012\110\015\071\043\076\070\104" +
    "\071\107\072\101\076\105\077\103\001\002\000\034\004" +
    "\073\005\111\006\074\007\102\012\110\013\177\015\071" +
    "\043\076\070\104\071\107\072\101\076\105\077\103\001" +
    "\002\000\044\013\uffba\014\132\015\124\017\127\020\134" +
    "\021\130\022\125\035\131\036\136\037\126\040\122\041" +
    "\135\042\133\044\123\045\137\046\121\060\uffba\001\002" +
    "\000\006\013\201\060\200\001\002\000\054\010\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\030\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\044\uffbc\045\uffbc\046\uffbc\057\uffbc\060\uffbc" +
    "\001\002\000\032\004\073\005\111\006\074\007\102\012" +
    "\110\015\071\043\076\070\104\071\107\072\101\076\105" +
    "\077\103\001\002\000\054\010\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\030\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\057\uffbd\060\uffbd\001\002\000\044" +
    "\013\uffbb\014\132\015\124\017\127\020\134\021\130\022" +
    "\125\035\131\036\136\037\126\040\122\041\135\042\133" +
    "\044\123\045\137\046\121\060\uffbb\001\002\000\042\014" +
    "\132\015\124\017\127\020\134\021\130\022\125\035\131" +
    "\036\136\037\126\040\122\041\135\042\133\044\123\045" +
    "\137\046\121\057\204\001\002\000\056\010\uffa3\013\uffa3" +
    "\014\uffa3\015\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\030\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\044\uffa3\045\uffa3\046\uffa3\056\205\057\uffa3\060" +
    "\uffa3\001\002\000\032\004\073\005\111\006\074\007\102" +
    "\012\110\015\071\043\076\070\104\071\107\072\101\076" +
    "\105\077\103\001\002\000\042\014\132\015\124\017\127" +
    "\020\134\021\130\022\125\035\131\036\136\037\126\040" +
    "\122\041\135\042\133\044\123\045\137\046\121\057\207" +
    "\001\002\000\054\010\uffa2\013\uffa2\014\uffa2\015\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\030\uffa2\035\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\057\uffa2\060\uffa2\001\002\000\004\012\215" +
    "\001\002\000\004\012\212\001\002\000\032\004\073\005" +
    "\111\006\074\007\102\012\110\015\071\043\076\070\104" +
    "\071\107\072\101\076\105\077\103\001\002\000\042\013" +
    "\214\014\132\015\124\017\127\020\134\021\130\022\125" +
    "\035\131\036\136\037\126\040\122\041\135\042\133\044" +
    "\123\045\137\046\121\001\002\000\054\010\uffa1\013\uffa1" +
    "\014\uffa1\015\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\030\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\044\uffa1\045\uffa1\046\uffa1\057\uffa1\060\uffa1\001" +
    "\002\000\032\004\073\005\111\006\074\007\102\012\110" +
    "\015\071\043\076\070\104\071\107\072\101\076\105\077" +
    "\103\001\002\000\042\013\217\014\132\015\124\017\127" +
    "\020\134\021\130\022\125\035\131\036\136\037\126\040" +
    "\122\041\135\042\133\044\123\045\137\046\121\001\002" +
    "\000\054\010\uff8b\013\uff8b\014\uff8b\015\uff8b\017\uff8b\020" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\030\uff8b\035\uff8b\036\uff8b" +
    "\037\uff8b\040\uff8b\041\uff8b\042\uff8b\044\uff8b\045\uff8b\046" +
    "\uff8b\057\uff8b\060\uff8b\001\002\000\032\004\073\005\111" +
    "\006\074\007\102\012\110\015\071\043\076\070\104\071" +
    "\107\072\101\076\105\077\103\001\002\000\042\013\222" +
    "\014\132\015\124\017\127\020\134\021\130\022\125\035" +
    "\131\036\136\037\126\040\122\041\135\042\133\044\123" +
    "\045\137\046\121\001\002\000\054\010\uff8c\013\uff8c\014" +
    "\uff8c\015\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c" +
    "\030\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042" +
    "\uff8c\044\uff8c\045\uff8c\046\uff8c\057\uff8c\060\uff8c\001\002" +
    "\000\054\010\uff92\013\uff92\014\132\015\124\017\127\020" +
    "\134\021\130\022\125\023\uff92\030\uff92\035\131\036\136" +
    "\037\126\040\122\041\135\042\133\044\uff92\045\uff92\046" +
    "\uff92\057\uff92\060\uff92\001\002\000\004\010\225\001\002" +
    "\000\060\002\uffc8\003\uffc8\007\uffc8\011\uffc8\024\uffc8\025" +
    "\uffc8\027\uffc8\032\uffc8\033\uffc8\034\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\061\uffc8\062\uffc8\063\uffc8\074" +
    "\uffc8\075\uffc8\100\uffc8\101\uffc8\102\uffc8\001\002\000\054" +
    "\010\uffa0\013\uffa0\014\uffa0\015\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\030\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\042\uffa0\044\uffa0\045\uffa0\046\uffa0\057" +
    "\uffa0\060\uffa0\001\002\000\016\047\015\050\006\051\013" +
    "\052\056\053\023\075\042\001\002\000\004\041\231\001" +
    "\002\000\004\007\232\001\002\000\004\055\233\001\002" +
    "\000\004\064\234\001\002\000\004\063\235\001\002\000" +
    "\004\012\236\001\002\000\004\013\237\001\002\000\004" +
    "\010\240\001\002\000\060\002\uffd8\003\uffd8\007\uffd8\011" +
    "\uffd8\024\uffd8\025\uffd8\027\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\061\uffd8\062" +
    "\uffd8\063\uffd8\074\uffd8\075\uffd8\100\uffd8\101\uffd8\102\uffd8" +
    "\001\002\000\032\004\073\005\111\006\074\007\102\012" +
    "\110\015\071\043\076\070\104\071\107\072\101\076\105" +
    "\077\103\001\002\000\042\013\243\014\132\015\124\017" +
    "\127\020\134\021\130\022\125\035\131\036\136\037\126" +
    "\040\122\041\135\042\133\044\123\045\137\046\121\001" +
    "\002\000\004\023\244\001\002\000\054\003\034\007\027" +
    "\011\007\025\026\027\017\032\016\033\051\034\061\047" +
    "\015\050\006\051\013\052\056\053\023\061\005\062\060" +
    "\063\053\074\033\075\042\100\040\101\014\102\032\001" +
    "\002\000\056\003\034\007\027\011\007\024\246\025\026" +
    "\027\017\032\016\033\051\034\061\047\015\050\006\051" +
    "\013\052\056\053\023\061\005\062\060\063\053\074\033" +
    "\075\042\100\040\101\014\102\032\001\002\000\060\002" +
    "\uffc9\003\uffc9\007\uffc9\011\uffc9\024\uffc9\025\uffc9\027\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\061\uffc9\062\uffc9\063\uffc9\074\uffc9\075\uffc9" +
    "\100\uffc9\101\uffc9\102\uffc9\001\002\000\004\054\250\001" +
    "\002\000\016\047\015\050\006\051\013\052\056\053\023" +
    "\075\042\001\002\000\010\010\253\055\254\056\252\001" +
    "\002\000\004\057\260\001\002\000\060\002\uffe4\003\uffe4" +
    "\007\uffe4\011\uffe4\024\uffe4\025\uffe4\027\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\061\uffe4\062\uffe4\063\uffe4\074\uffe4\075\uffe4\100\uffe4\101" +
    "\uffe4\102\uffe4\001\002\000\032\004\073\005\111\006\074" +
    "\007\102\012\110\015\071\043\076\070\104\071\107\072" +
    "\101\076\105\077\103\001\002\000\060\002\uffe6\003\uffe6" +
    "\007\uffe6\011\uffe6\024\uffe6\025\uffe6\027\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\074\uffe6\075\uffe6\100\uffe6\101" +
    "\uffe6\102\uffe6\001\002\000\042\010\257\014\132\015\124" +
    "\017\127\020\134\021\130\022\125\035\131\036\136\037" +
    "\126\040\122\041\135\042\133\044\123\045\137\046\121" +
    "\001\002\000\060\002\uffe5\003\uffe5\007\uffe5\011\uffe5\024" +
    "\uffe5\025\uffe5\027\uffe5\032\uffe5\033\uffe5\034\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\061\uffe5\062\uffe5\063" +
    "\uffe5\074\uffe5\075\uffe5\100\uffe5\101\uffe5\102\uffe5\001\002" +
    "\000\006\055\262\056\261\001\002\000\004\057\272\001" +
    "\002\000\004\056\263\001\002\000\032\004\073\005\111" +
    "\006\074\007\102\012\110\015\071\043\076\070\104\071" +
    "\107\072\101\076\105\077\103\001\002\000\006\057\266" +
    "\060\267\001\002\000\044\014\132\015\124\017\127\020" +
    "\134\021\130\022\125\035\131\036\136\037\126\040\122" +
    "\041\135\042\133\044\123\045\137\046\121\057\uffdd\060" +
    "\uffdd\001\002\000\004\010\271\001\002\000\032\004\073" +
    "\005\111\006\074\007\102\012\110\015\071\043\076\070" +
    "\104\071\107\072\101\076\105\077\103\001\002\000\044" +
    "\014\132\015\124\017\127\020\134\021\130\022\125\035" +
    "\131\036\136\037\126\040\122\041\135\042\133\044\123" +
    "\045\137\046\121\057\uffde\060\uffde\001\002\000\060\002" +
    "\uffe0\003\uffe0\007\uffe0\011\uffe0\024\uffe0\025\uffe0\027\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\047\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\053\uffe0\061\uffe0\062\uffe0\063\uffe0\074\uffe0\075\uffe0" +
    "\100\uffe0\101\uffe0\102\uffe0\001\002\000\004\055\273\001" +
    "\002\000\004\056\274\001\002\000\004\056\275\001\002" +
    "\000\032\004\073\005\111\006\074\007\102\012\110\015" +
    "\071\043\076\070\104\071\107\072\101\076\105\077\103" +
    "\001\002\000\006\057\277\060\300\001\002\000\004\010" +
    "\304\001\002\000\004\056\301\001\002\000\032\004\073" +
    "\005\111\006\074\007\102\012\110\015\071\043\076\070" +
    "\104\071\107\072\101\076\105\077\103\001\002\000\006" +
    "\057\303\060\267\001\002\000\006\057\uffdc\060\uffdc\001" +
    "\002\000\060\002\uffdf\003\uffdf\007\uffdf\011\uffdf\024\uffdf" +
    "\025\uffdf\027\uffdf\032\uffdf\033\uffdf\034\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\061\uffdf\062\uffdf\063\uffdf" +
    "\074\uffdf\075\uffdf\100\uffdf\101\uffdf\102\uffdf\001\002\000" +
    "\006\057\306\060\267\001\002\000\006\057\uffdb\060\uffdb" +
    "\001\002\000\060\002\uffc7\003\uffc7\007\uffc7\011\uffc7\024" +
    "\uffc7\025\uffc7\027\uffc7\032\uffc7\033\uffc7\034\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\052\uffc7\053\uffc7\061\uffc7\062\uffc7\063" +
    "\uffc7\074\uffc7\075\uffc7\100\uffc7\101\uffc7\102\uffc7\001\002" +
    "\000\060\002\uffe9\003\uffe9\007\uffe9\011\uffe9\024\uffe9\025" +
    "\uffe9\027\uffe9\032\uffe9\033\uffe9\034\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\061\uffe9\062\uffe9\063\uffe9\074" +
    "\uffe9\075\uffe9\100\uffe9\101\uffe9\102\uffe9\001\002\000\004" +
    "\012\312\001\002\000\034\004\073\005\111\006\074\007" +
    "\102\012\110\013\314\015\071\043\076\070\104\071\107" +
    "\072\101\076\105\077\103\001\002\000\006\013\316\060" +
    "\200\001\002\000\004\010\315\001\002\000\060\002\uffc0" +
    "\003\uffc0\007\uffc0\011\uffc0\024\uffc0\025\uffc0\027\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\061\uffc0\062\uffc0\063\uffc0\074\uffc0\075\uffc0\100" +
    "\uffc0\101\uffc0\102\uffc0\001\002\000\004\010\317\001\002" +
    "\000\060\002\uffc1\003\uffc1\007\uffc1\011\uffc1\024\uffc1\025" +
    "\uffc1\027\uffc1\032\uffc1\033\uffc1\034\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\061\uffc1\062\uffc1\063\uffc1\074" +
    "\uffc1\075\uffc1\100\uffc1\101\uffc1\102\uffc1\001\002\000\060" +
    "\002\uffb8\003\uffb8\007\uffb8\011\uffb8\024\uffb8\025\uffb8\027" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\061\uffb8\062\uffb8\063\uffb8\074\uffb8\075" +
    "\uffb8\100\uffb8\101\uffb8\102\uffb8\001\002\000\042\010\322" +
    "\014\132\015\124\017\127\020\134\021\130\022\125\035" +
    "\131\036\136\037\126\040\122\041\135\042\133\044\123" +
    "\045\137\046\121\001\002\000\060\002\uffb9\003\uffb9\007" +
    "\uffb9\011\uffb9\024\uffb9\025\uffb9\027\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\061" +
    "\uffb9\062\uffb9\063\uffb9\074\uffb9\075\uffb9\100\uffb9\101\uffb9" +
    "\102\uffb9\001\002\000\004\066\357\001\002\000\032\004" +
    "\073\005\111\006\074\007\102\012\110\015\071\043\076" +
    "\070\104\071\107\072\101\076\105\077\103\001\002\000" +
    "\004\014\342\001\002\000\032\004\073\005\111\006\074" +
    "\007\102\012\110\015\071\043\076\070\104\071\107\072" +
    "\101\076\105\077\103\001\002\000\004\015\336\001\002" +
    "\000\034\004\073\005\111\006\074\007\102\012\110\013" +
    "\332\015\071\043\076\070\104\071\107\072\101\076\105" +
    "\077\103\001\002\000\006\013\334\060\200\001\002\000" +
    "\004\010\333\001\002\000\060\002\uffbe\003\uffbe\007\uffbe" +
    "\011\uffbe\024\uffbe\025\uffbe\027\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\074\uffbe\075\uffbe\100\uffbe\101\uffbe\102" +
    "\uffbe\001\002\000\004\010\335\001\002\000\060\002\uffbf" +
    "\003\uffbf\007\uffbf\011\uffbf\024\uffbf\025\uffbf\027\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\061\uffbf\062\uffbf\063\uffbf\074\uffbf\075\uffbf\100" +
    "\uffbf\101\uffbf\102\uffbf\001\002\000\004\010\337\001\002" +
    "\000\060\002\uffe1\003\uffe1\007\uffe1\011\uffe1\024\uffe1\025" +
    "\uffe1\027\uffe1\032\uffe1\033\uffe1\034\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\061\uffe1\062\uffe1\063\uffe1\074" +
    "\uffe1\075\uffe1\100\uffe1\101\uffe1\102\uffe1\001\002\000\042" +
    "\010\341\014\132\015\124\017\127\020\134\021\130\022" +
    "\125\035\131\036\136\037\126\040\122\041\135\042\133" +
    "\044\123\045\137\046\121\001\002\000\106\002\uffe3\003" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3" +
    "\015\uffe3\024\uffe3\025\uffe3\027\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\043\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3" +
    "\061\uffe3\062\uffe3\063\uffe3\070\uffe3\071\uffe3\072\uffe3\074" +
    "\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3" +
    "\001\002\000\004\010\343\001\002\000\060\002\uffe2\003" +
    "\uffe2\007\uffe2\011\uffe2\024\uffe2\025\uffe2\027\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\074\uffe2\075\uffe2\100\uffe2" +
    "\101\uffe2\102\uffe2\001\002\000\042\014\132\015\124\017" +
    "\127\020\134\021\130\022\125\035\131\036\136\037\126" +
    "\040\122\041\135\042\133\044\123\045\137\046\121\057" +
    "\345\001\002\000\006\055\347\056\346\001\002\000\032" +
    "\004\073\005\111\006\074\007\102\012\110\015\071\043" +
    "\076\070\104\071\107\072\101\076\105\077\103\001\002" +
    "\000\032\004\073\005\111\006\074\007\102\012\110\015" +
    "\071\043\076\070\104\071\107\072\101\076\105\077\103" +
    "\001\002\000\042\010\351\014\132\015\124\017\127\020" +
    "\134\021\130\022\125\035\131\036\136\037\126\040\122" +
    "\041\135\042\133\044\123\045\137\046\121\001\002\000" +
    "\060\002\uffda\003\uffda\007\uffda\011\uffda\024\uffda\025\uffda" +
    "\027\uffda\032\uffda\033\uffda\034\uffda\047\uffda\050\uffda\051" +
    "\uffda\052\uffda\053\uffda\061\uffda\062\uffda\063\uffda\074\uffda" +
    "\075\uffda\100\uffda\101\uffda\102\uffda\001\002\000\042\014" +
    "\132\015\124\017\127\020\134\021\130\022\125\035\131" +
    "\036\136\037\126\040\122\041\135\042\133\044\123\045" +
    "\137\046\121\057\353\001\002\000\004\055\354\001\002" +
    "\000\032\004\073\005\111\006\074\007\102\012\110\015" +
    "\071\043\076\070\104\071\107\072\101\076\105\077\103" +
    "\001\002\000\042\010\356\014\132\015\124\017\127\020" +
    "\134\021\130\022\125\035\131\036\136\037\126\040\122" +
    "\041\135\042\133\044\123\045\137\046\121\001\002\000" +
    "\060\002\uffd9\003\uffd9\007\uffd9\011\uffd9\024\uffd9\025\uffd9" +
    "\027\uffd9\032\uffd9\033\uffd9\034\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\053\uffd9\061\uffd9\062\uffd9\063\uffd9\074\uffd9" +
    "\075\uffd9\100\uffd9\101\uffd9\102\uffd9\001\002\000\004\012" +
    "\360\001\002\000\032\004\073\005\111\006\074\007\102" +
    "\012\110\015\071\043\076\070\104\071\107\072\101\076" +
    "\105\077\103\001\002\000\042\013\362\014\132\015\124" +
    "\017\127\020\134\021\130\022\125\035\131\036\136\037" +
    "\126\040\122\041\135\042\133\044\123\045\137\046\121" +
    "\001\002\000\004\010\363\001\002\000\060\002\uffd7\003" +
    "\uffd7\007\uffd7\011\uffd7\024\uffd7\025\uffd7\027\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\074\uffd7\075\uffd7\100\uffd7" +
    "\101\uffd7\102\uffd7\001\002\000\032\004\073\005\111\006" +
    "\074\007\102\012\110\015\071\043\076\070\104\071\107" +
    "\072\101\076\105\077\103\001\002\000\042\013\366\014" +
    "\132\015\124\017\127\020\134\021\130\022\125\035\131" +
    "\036\136\037\126\040\122\041\135\042\133\044\123\045" +
    "\137\046\121\001\002\000\004\023\367\001\002\000\054" +
    "\003\034\007\027\011\007\025\026\027\017\032\016\033" +
    "\051\034\061\047\015\050\006\051\013\052\056\053\023" +
    "\061\005\062\060\063\053\074\033\075\042\100\040\101" +
    "\014\102\032\001\002\000\056\003\034\007\027\011\007" +
    "\024\371\025\026\027\017\032\016\033\051\034\061\047" +
    "\015\050\006\051\013\052\056\053\023\061\005\062\060" +
    "\063\053\074\033\075\042\100\040\101\014\102\032\001" +
    "\002\000\062\002\uffd6\003\uffd6\007\uffd6\011\uffd6\024\uffd6" +
    "\025\uffd6\026\372\027\uffd6\032\uffd6\033\uffd6\034\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\061\uffd6\062\uffd6" +
    "\063\uffd6\074\uffd6\075\uffd6\100\uffd6\101\uffd6\102\uffd6\001" +
    "\002\000\006\023\374\025\026\001\002\000\060\002\uffd4" +
    "\003\uffd4\007\uffd4\011\uffd4\024\uffd4\025\uffd4\027\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\061\uffd4\062\uffd4\063\uffd4\074\uffd4\075\uffd4\100" +
    "\uffd4\101\uffd4\102\uffd4\001\002\000\054\003\034\007\027" +
    "\011\007\025\026\027\017\032\016\033\051\034\061\047" +
    "\015\050\006\051\013\052\056\053\023\061\005\062\060" +
    "\063\053\074\033\075\042\100\040\101\014\102\032\001" +
    "\002\000\056\003\034\007\027\011\007\024\376\025\026" +
    "\027\017\032\016\033\051\034\061\047\015\050\006\051" +
    "\013\052\056\053\023\061\005\062\060\063\053\074\033" +
    "\075\042\100\040\101\014\102\032\001\002\000\060\002" +
    "\uffd5\003\uffd5\007\uffd5\011\uffd5\024\uffd5\025\uffd5\027\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\061\uffd5\062\uffd5\063\uffd5\074\uffd5\075\uffd5" +
    "\100\uffd5\101\uffd5\102\uffd5\001\002\000\004\002\001\001" +
    "\002\000\042\014\132\015\124\017\127\020\134\021\130" +
    "\022\125\023\u0101\035\131\036\136\037\126\040\122\041" +
    "\135\042\133\044\123\045\137\046\121\001\002\000\034" +
    "\004\073\005\111\006\074\007\102\012\110\015\071\031" +
    "\u0105\043\076\070\104\071\107\072\101\076\105\077\103" +
    "\001\002\000\036\004\073\005\111\006\074\007\102\012" +
    "\110\015\071\024\u0110\031\u0111\043\076\070\104\071\107" +
    "\072\101\076\105\077\103\001\002\000\042\014\132\015" +
    "\124\017\127\020\134\021\130\022\125\030\u010b\035\131" +
    "\036\136\037\126\040\122\041\135\042\133\044\123\045" +
    "\137\046\121\001\002\000\036\004\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\012\uffcf\015\uffcf\024\uffcf\031\uffcf\043\uffcf\070" +
    "\uffcf\071\uffcf\072\uffcf\076\uffcf\077\uffcf\001\002\000\004" +
    "\030\u0106\001\002\000\004\023\u0107\001\002\000\054\003" +
    "\034\007\027\011\007\025\026\027\017\032\016\033\051" +
    "\034\061\047\015\050\006\051\013\052\056\053\023\061" +
    "\005\062\060\063\053\074\033\075\042\100\040\101\014" +
    "\102\032\001\002\000\056\003\034\007\027\011\007\024" +
    "\u0109\025\026\027\017\032\016\033\051\034\061\047\015" +
    "\050\006\051\013\052\056\053\023\061\005\062\060\063" +
    "\053\074\033\075\042\100\040\101\014\102\032\001\002" +
    "\000\004\024\u010a\001\002\000\060\002\uffd1\003\uffd1\007" +
    "\uffd1\011\uffd1\024\uffd1\025\uffd1\027\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\061" +
    "\uffd1\062\uffd1\063\uffd1\074\uffd1\075\uffd1\100\uffd1\101\uffd1" +
    "\102\uffd1\001\002\000\004\023\u010c\001\002\000\054\003" +
    "\034\007\027\011\007\025\026\027\017\032\016\033\051" +
    "\034\061\047\015\050\006\051\013\052\056\053\023\061" +
    "\005\062\060\063\053\074\033\075\042\100\040\101\014" +
    "\102\032\001\002\000\056\003\034\007\027\011\007\024" +
    "\u010e\025\026\027\017\032\016\033\051\034\061\047\015" +
    "\050\006\051\013\052\056\053\023\061\005\062\060\063" +
    "\053\074\033\075\042\100\040\101\014\102\032\001\002" +
    "\000\036\004\uffce\005\uffce\006\uffce\007\uffce\012\uffce\015" +
    "\uffce\024\uffce\031\uffce\043\uffce\070\uffce\071\uffce\072\uffce" +
    "\076\uffce\077\uffce\001\002\000\036\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\012\uffd0\015\uffd0\024\uffd0\031\uffd0\043\uffd0" +
    "\070\uffd0\071\uffd0\072\uffd0\076\uffd0\077\uffd0\001\002\000" +
    "\060\002\uffd2\003\uffd2\007\uffd2\011\uffd2\024\uffd2\025\uffd2" +
    "\027\uffd2\032\uffd2\033\uffd2\034\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\061\uffd2\062\uffd2\063\uffd2\074\uffd2" +
    "\075\uffd2\100\uffd2\101\uffd2\102\uffd2\001\002\000\004\030" +
    "\u0112\001\002\000\004\023\u0113\001\002\000\054\003\034" +
    "\007\027\011\007\025\026\027\017\032\016\033\051\034" +
    "\061\047\015\050\006\051\013\052\056\053\023\061\005" +
    "\062\060\063\053\074\033\075\042\100\040\101\014\102" +
    "\032\001\002\000\056\003\034\007\027\011\007\024\u0115" +
    "\025\026\027\017\032\016\033\051\034\061\047\015\050" +
    "\006\051\013\052\056\053\023\061\005\062\060\063\053" +
    "\074\033\075\042\100\040\101\014\102\032\001\002\000" +
    "\004\024\u0116\001\002\000\060\002\uffd3\003\uffd3\007\uffd3" +
    "\011\uffd3\024\uffd3\025\uffd3\027\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\061\uffd3" +
    "\062\uffd3\063\uffd3\074\uffd3\075\uffd3\100\uffd3\101\uffd3\102" +
    "\uffd3\001\002\000\004\007\u0118\001\002\000\004\055\326" +
    "\001\002\000\032\004\073\005\111\006\074\007\102\012" +
    "\110\015\071\043\076\070\104\071\107\072\101\076\105" +
    "\077\103\001\002\000\042\010\u011b\014\132\015\124\017" +
    "\127\020\134\021\130\022\125\035\131\036\136\037\126" +
    "\040\122\041\135\042\133\044\123\045\137\046\121\001" +
    "\002\000\004\007\u011c\001\002\000\010\014\u0122\015\u0124" +
    "\055\u0123\001\002\000\004\013\u011e\001\002\000\004\023" +
    "\u011f\001\002\000\054\003\034\007\027\011\007\025\026" +
    "\027\017\032\016\033\051\034\061\047\015\050\006\051" +
    "\013\052\056\053\023\061\005\062\060\063\053\074\033" +
    "\075\042\100\040\101\014\102\032\001\002\000\056\003" +
    "\034\007\027\011\007\024\u0121\025\026\027\017\032\016" +
    "\033\051\034\061\047\015\050\006\051\013\052\056\053" +
    "\023\061\005\062\060\063\053\074\033\075\042\100\040" +
    "\101\014\102\032\001\002\000\060\002\uffcd\003\uffcd\007" +
    "\uffcd\011\uffcd\024\uffcd\025\uffcd\027\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\061" +
    "\uffcd\062\uffcd\063\uffcd\074\uffcd\075\uffcd\100\uffcd\101\uffcd" +
    "\102\uffcd\001\002\000\004\014\u0127\001\002\000\032\004" +
    "\073\005\111\006\074\007\102\012\110\015\071\043\076" +
    "\070\104\071\107\072\101\076\105\077\103\001\002\000" +
    "\004\015\u0125\001\002\000\004\013\uffca\001\002\000\042" +
    "\013\uffcc\014\132\015\124\017\127\020\134\021\130\022" +
    "\125\035\131\036\136\037\126\040\122\041\135\042\133" +
    "\044\123\045\137\046\121\001\002\000\004\013\uffcb\001" +
    "\002\000\060\002\uffc6\003\uffc6\007\uffc6\011\uffc6\024\uffc6" +
    "\025\uffc6\027\uffc6\032\uffc6\033\uffc6\034\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\074\uffc6\075\uffc6\100\uffc6\101\uffc6\102\uffc6\001\002\000" +
    "\004\012\u012a\001\002\000\020\013\u012b\047\015\050\006" +
    "\051\013\052\056\053\023\075\042\001\002\000\004\023" +
    "\u0136\001\002\000\006\013\u0130\060\u012f\001\002\000\004" +
    "\007\u012e\001\002\000\006\013\uffc2\060\uffc2\001\002\000" +
    "\016\047\015\050\006\051\013\052\056\053\023\075\042" +
    "\001\002\000\004\023\u0131\001\002\000\054\003\034\007" +
    "\027\011\007\025\026\027\017\032\016\033\051\034\061" +
    "\047\015\050\006\051\013\052\056\053\023\061\005\062" +
    "\060\063\053\074\033\075\042\100\040\101\014\102\032" +
    "\001\002\000\056\003\034\007\027\011\007\024\u0133\025" +
    "\026\027\017\032\016\033\051\034\061\047\015\050\006" +
    "\051\013\052\056\053\023\061\005\062\060\063\053\074" +
    "\033\075\042\100\040\101\014\102\032\001\002\000\060" +
    "\002\uffc5\003\uffc5\007\uffc5\011\uffc5\024\uffc5\025\uffc5\027" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\061\uffc5\062\uffc5\063\uffc5\074\uffc5\075" +
    "\uffc5\100\uffc5\101\uffc5\102\uffc5\001\002\000\004\007\u0135" +
    "\001\002\000\006\013\uffc3\060\uffc3\001\002\000\054\003" +
    "\034\007\027\011\007\025\026\027\017\032\016\033\051" +
    "\034\061\047\015\050\006\051\013\052\056\053\023\061" +
    "\005\062\060\063\053\074\033\075\042\100\040\101\014" +
    "\102\032\001\002\000\056\003\034\007\027\011\007\024" +
    "\u0138\025\026\027\017\032\016\033\051\034\061\047\015" +
    "\050\006\051\013\052\056\053\023\061\005\062\060\063" +
    "\053\074\033\075\042\100\040\101\014\102\032\001\002" +
    "\000\060\002\uffc4\003\uffc4\007\uffc4\011\uffc4\024\uffc4\025" +
    "\uffc4\027\uffc4\032\uffc4\033\uffc4\034\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\061\uffc4\062\uffc4\063\uffc4\074" +
    "\uffc4\075\uffc4\100\uffc4\101\uffc4\102\uffc4\001\002\000\032" +
    "\004\073\005\111\006\074\007\102\012\110\015\071\043" +
    "\076\070\104\071\107\072\101\076\105\077\103\001\002" +
    "\000\042\013\u013b\014\132\015\124\017\127\020\134\021" +
    "\130\022\125\035\131\036\136\037\126\040\122\041\135" +
    "\042\133\044\123\045\137\046\121\001\002\000\004\010" +
    "\u013c\001\002\000\060\002\uffe7\003\uffe7\007\uffe7\011\uffe7" +
    "\024\uffe7\025\uffe7\027\uffe7\032\uffe7\033\uffe7\034\uffe7\047" +
    "\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\061\uffe7\062\uffe7" +
    "\063\uffe7\074\uffe7\075\uffe7\100\uffe7\101\uffe7\102\uffe7\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\064\002\020\003\011\004\027\012\045\013" +
    "\054\014\036\016\043\017\053\020\021\021\024\022\051" +
    "\023\044\024\034\026\003\027\017\030\007\031\056\032" +
    "\040\033\046\035\010\036\042\043\035\045\023\047\030" +
    "\051\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\004\064\012\045\013\054\014\036\016" +
    "\043\017\053\020\021\021\024\022\051\023\044\024\034" +
    "\026\003\027\017\030\007\031\056\032\040\033\046\035" +
    "\010\036\042\043\035\045\023\047\030\051\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\377\006\077\007\067\010\071" +
    "\011\076\034\111\050\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\320" +
    "\006\077\007\067\010\071\011\076\034\111\050\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\062\004\027\012\045\013\054\014" +
    "\036\016\043\017\053\020\021\021\024\022\051\023\044" +
    "\024\034\026\003\027\017\030\007\031\056\032\040\033" +
    "\046\035\010\036\042\043\035\045\023\047\030\051\047" +
    "\001\001\000\060\004\064\012\045\013\054\014\036\016" +
    "\043\017\053\020\021\021\024\022\051\023\044\024\034" +
    "\026\003\027\017\030\007\031\056\032\040\033\046\035" +
    "\010\036\042\043\035\045\023\047\030\051\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\074\006\077\007\067\010\071\011\076\034\111" +
    "\050\105\001\001\000\002\001\001\000\020\005\225\006" +
    "\077\007\067\010\071\011\076\034\111\050\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\222\006\077\007\067\010\071" +
    "\011\076\034\111\050\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\114\006\077\007\067" +
    "\010\071\011\076\034\111\050\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\117\006" +
    "\077\007\067\010\071\011\076\034\111\050\105\001\001" +
    "\000\002\001\001\000\020\005\155\006\077\007\067\010" +
    "\071\011\076\034\111\050\105\001\001\000\020\005\154" +
    "\006\077\007\067\010\071\011\076\034\111\050\105\001" +
    "\001\000\020\005\153\006\077\007\067\010\071\011\076" +
    "\034\111\050\105\001\001\000\020\005\152\006\077\007" +
    "\067\010\071\011\076\034\111\050\105\001\001\000\020" +
    "\005\151\006\077\007\067\010\071\011\076\034\111\050" +
    "\105\001\001\000\020\005\150\006\077\007\067\010\071" +
    "\011\076\034\111\050\105\001\001\000\020\005\147\006" +
    "\077\007\067\010\071\011\076\034\111\050\105\001\001" +
    "\000\020\005\146\006\077\007\067\010\071\011\076\034" +
    "\111\050\105\001\001\000\020\005\145\006\077\007\067" +
    "\010\071\011\076\034\111\050\105\001\001\000\020\005" +
    "\144\006\077\007\067\010\071\011\076\034\111\050\105" +
    "\001\001\000\020\005\143\006\077\007\067\010\071\011" +
    "\076\034\111\050\105\001\001\000\020\005\142\006\077" +
    "\007\067\010\071\011\076\034\111\050\105\001\001\000" +
    "\020\005\141\006\077\007\067\010\071\011\076\034\111" +
    "\050\105\001\001\000\020\005\140\006\077\007\067\010" +
    "\071\011\076\034\111\050\105\001\001\000\020\005\137" +
    "\006\077\007\067\010\071\011\076\034\111\050\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\160\006\077\007\067\010\071\011\076\034" +
    "\111\050\105\001\001\000\002\001\001\000\020\005\162" +
    "\006\077\007\067\010\071\011\076\034\111\050\105\001" +
    "\001\000\002\001\001\000\020\005\164\006\077\007\067" +
    "\010\071\011\076\034\111\050\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\167\006\077\007\067" +
    "\010\071\011\076\034\111\050\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\202" +
    "\006\077\007\067\010\071\011\076\034\111\050\105\001" +
    "\001\000\022\005\174\006\077\007\067\010\071\011\076" +
    "\034\111\046\175\050\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\201\006\077" +
    "\007\067\010\071\011\076\034\111\050\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\205\006\077\007\067\010\071\011" +
    "\076\034\111\050\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\212\006\077\007\067\010\071\011\076\034\111\050\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\215\006\077\007\067\010\071\011\076\034\111\050\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\220\006\077\007\067\010\071\011\076\034\111\050\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\241\006\077\007\067\010\071" +
    "\011\076\034\111\050\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\244\004\027\012\045\013\054" +
    "\014\036\016\043\017\053\020\021\021\024\022\051\023" +
    "\044\024\034\026\003\027\017\030\007\031\056\032\040" +
    "\033\046\035\010\036\042\043\035\045\023\047\030\051" +
    "\047\001\001\000\060\004\064\012\045\013\054\014\036" +
    "\016\043\017\053\020\021\021\024\022\051\023\044\024" +
    "\034\026\003\027\017\030\007\031\056\032\040\033\046" +
    "\035\010\036\042\043\035\045\023\047\030\051\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\250" +
    "\001\001\000\004\015\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\255\006\077\007\067\010\071" +
    "\011\076\034\111\050\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\264\006\077\007" +
    "\067\010\071\011\076\034\111\041\263\050\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\267\006\077\007\067\010\071\011\076\034\111" +
    "\050\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\275\001\001" +
    "\000\022\005\264\006\077\007\067\010\071\011\076\034" +
    "\111\041\304\050\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\264\006\077\007" +
    "\067\010\071\011\076\034\111\041\301\050\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\174\006\077\007" +
    "\067\010\071\011\076\034\111\046\312\050\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\343\006\077\007\067\010\071\011\076\034\111\050\105" +
    "\001\001\000\002\001\001\000\020\005\337\006\077\007" +
    "\067\010\071\011\076\034\111\050\105\001\001\000\002" +
    "\001\001\000\022\005\174\006\077\007\067\010\071\011" +
    "\076\034\111\046\330\050\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\351" +
    "\006\077\007\067\010\071\011\076\034\111\050\105\001" +
    "\001\000\020\005\347\006\077\007\067\010\071\011\076" +
    "\034\111\050\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\354" +
    "\006\077\007\067\010\071\011\076\034\111\050\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\360\006\077\007\067\010\071\011\076\034" +
    "\111\050\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\005\364\006\077\007\067\010" +
    "\071\011\076\034\111\050\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\367\004\027\012\045\013" +
    "\054\014\036\016\043\017\053\020\021\021\024\022\051" +
    "\023\044\024\034\026\003\027\017\030\007\031\056\032" +
    "\040\033\046\035\010\036\042\043\035\045\023\047\030" +
    "\051\047\001\001\000\060\004\064\012\045\013\054\014" +
    "\036\016\043\017\053\020\021\021\024\022\051\023\044" +
    "\024\034\026\003\027\017\030\007\031\056\032\040\033" +
    "\046\035\010\036\042\043\035\045\023\047\030\051\047" +
    "\001\001\000\002\001\001\000\004\020\372\001\001\000" +
    "\002\001\001\000\062\003\374\004\027\012\045\013\054" +
    "\014\036\016\043\017\053\020\021\021\024\022\051\023" +
    "\044\024\034\026\003\027\017\030\007\031\056\032\040" +
    "\033\046\035\010\036\042\043\035\045\023\047\030\051" +
    "\047\001\001\000\060\004\064\012\045\013\054\014\036" +
    "\016\043\017\053\020\021\021\024\022\051\023\044\024" +
    "\034\026\003\027\017\030\007\031\056\032\040\033\046" +
    "\035\010\036\042\043\035\045\023\047\030\051\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\005\u0102\006\077\007\067\010\071\011\076\034" +
    "\111\037\u0103\040\u0101\050\105\001\001\000\022\005\u0102" +
    "\006\077\007\067\010\071\011\076\034\111\037\u010e\050" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u0107\004\027\012" +
    "\045\013\054\014\036\016\043\017\053\020\021\021\024" +
    "\022\051\023\044\024\034\026\003\027\017\030\007\031" +
    "\056\032\040\033\046\035\010\036\042\043\035\045\023" +
    "\047\030\051\047\001\001\000\060\004\064\012\045\013" +
    "\054\014\036\016\043\017\053\020\021\021\024\022\051" +
    "\023\044\024\034\026\003\027\017\030\007\031\056\032" +
    "\040\033\046\035\010\036\042\043\035\045\023\047\030" +
    "\051\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u010c\004\027\012\045\013\054" +
    "\014\036\016\043\017\053\020\021\021\024\022\051\023" +
    "\044\024\034\026\003\027\017\030\007\031\056\032\040" +
    "\033\046\035\010\036\042\043\035\045\023\047\030\051" +
    "\047\001\001\000\060\004\064\012\045\013\054\014\036" +
    "\016\043\017\053\020\021\021\024\022\051\023\044\024" +
    "\034\026\003\027\017\030\007\031\056\032\040\033\046" +
    "\035\010\036\042\043\035\045\023\047\030\051\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\u0113\004" +
    "\027\012\045\013\054\014\036\016\043\017\053\020\021" +
    "\021\024\022\051\023\044\024\034\026\003\027\017\030" +
    "\007\031\056\032\040\033\046\035\010\036\042\043\035" +
    "\045\023\047\030\051\047\001\001\000\060\004\064\012" +
    "\045\013\054\014\036\016\043\017\053\020\021\021\024" +
    "\022\051\023\044\024\034\026\003\027\017\030\007\031" +
    "\056\032\040\033\046\035\010\036\042\043\035\045\023" +
    "\047\030\051\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u0118\001\001\000\002\001\001\000\020" +
    "\005\u0119\006\077\007\067\010\071\011\076\034\111\050" +
    "\105\001\001\000\002\001\001\000\004\025\u011c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u011f\004\027\012\045\013\054\014\036\016\043" +
    "\017\053\020\021\021\024\022\051\023\044\024\034\026" +
    "\003\027\017\030\007\031\056\032\040\033\046\035\010" +
    "\036\042\043\035\045\023\047\030\051\047\001\001\000" +
    "\060\004\064\012\045\013\054\014\036\016\043\017\053" +
    "\020\021\021\024\022\051\023\044\024\034\026\003\027" +
    "\017\030\007\031\056\032\040\033\046\035\010\036\042" +
    "\043\035\045\023\047\030\051\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\u0125\006\077\007\067" +
    "\010\071\011\076\034\111\050\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\035\u012c\044" +
    "\u012b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u0133\001\001\000" +
    "\002\001\001\000\062\003\u0131\004\027\012\045\013\054" +
    "\014\036\016\043\017\053\020\021\021\024\022\051\023" +
    "\044\024\034\026\003\027\017\030\007\031\056\032\040" +
    "\033\046\035\010\036\042\043\035\045\023\047\030\051" +
    "\047\001\001\000\060\004\064\012\045\013\054\014\036" +
    "\016\043\017\053\020\021\021\024\022\051\023\044\024" +
    "\034\026\003\027\017\030\007\031\056\032\040\033\046" +
    "\035\010\036\042\043\035\045\023\047\030\051\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\u0136\004\027\012\045\013\054\014\036\016" +
    "\043\017\053\020\021\021\024\022\051\023\044\024\034" +
    "\026\003\027\017\030\007\031\056\032\040\033\046\035" +
    "\010\036\042\043\035\045\023\047\030\051\047\001\001" +
    "\000\060\004\064\012\045\013\054\014\036\016\043\017" +
    "\053\020\021\021\024\022\051\023\044\024\034\026\003" +
    "\027\017\030\007\031\056\032\040\033\046\035\010\036" +
    "\042\043\035\045\023\047\030\051\047\001\001\000\002" +
    "\001\001\000\020\005\u0139\006\077\007\067\010\071\011" +
    "\076\034\111\050\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= println 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= declaracion_vectores 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= declaracion_lista 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= append_lista 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= asignacion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= asignacion_vector 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= incremento_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= decremento_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= sentencia_match 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= ciclo_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= ciclo_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= ciclo_dowhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= transferencia_break 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= transferencia_continue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= metodo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= instruccion_start 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= llamada_metodo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= funcion_return 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // println ::= IMPRIMIR PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Println(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("println",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_variable ::= mutabilidad ID DOSPUNTOS tipos_variable inicializar_variable 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionVariable(e, b, c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inicializar_variable ::= IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inicializar_variable ::= FINCADENA 
            {
              Instruccion RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignacion_variable ::= ID IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // incremento_variable ::= ID MAS MAS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incremento_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decremento_variable ::= ID MENOS MENOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionResta(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decremento_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_vectores ::= mutabilidad ID DOSPUNTOS tipos_variable CORCHETE1 CORCHETE2 IGUAL CORCHETE1 lista_vector_u CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorUnaDimension(e,b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_vectores",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_vectores ::= mutabilidad ID DOSPUNTOS tipos_variable CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 lista_vector_d CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> c = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VectorDosDimensiones(e,b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_vectores",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_vector_u ::= lista_vector_u COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_u",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_vector_u ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<> (); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_u",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_vector_d ::= lista_vector_d COMA CORCHETE1 lista_vector_u CORCHETE2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_d",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_vector_d ::= CORCHETE1 lista_vector_u CORCHETE2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<> (); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_vector_d",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion_vector ::= ID CORCHETE1 expresion CORCHETE2 IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVectorUnaDimension(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_vector",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion_vector ::= ID CORCHETE1 expresion CORCHETE2 CORCHETE1 expresion CORCHETE2 IGUAL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVectorDosDimensiones(a, b, c, d, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_vector",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion_lista ::= LIST MENOR tipos_variable MAYOR ID IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		RESULT = new DeclaracionLista(b,a, aleft, aright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_lista",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // append_lista ::= ID PUNTO APPEND PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AppendLista(a, b, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("append_lista",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaIf(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 ELSE LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaIfElse(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia_if ::= IF PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 ELSE sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaElseIF(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia_match ::= MATCH expresion LLAVE1 casos_match DEFAULT FLECHA LLAVE1 instrucciones LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<CasoMatch> b = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new SentenciaMatch(a, b, c, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia_match ::= MATCH expresion LLAVE1 casos_match LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoMatch> b = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new SentenciaMatch(a, b, null, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia_match ::= MATCH expresion LLAVE1 DEFAULT FLECHA LLAVE1 instrucciones LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new SentenciaMatch(a, null, c, aleft, aright);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_match",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // casos_match ::= casos_match caso_match 
            {
              LinkedList<CasoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoMatch> a = (LinkedList<CasoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoMatch b = (CasoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_match",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // casos_match ::= caso_match 
            {
              LinkedList<CasoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoMatch a = (CasoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_match",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // caso_match ::= expresion FLECHA LLAVE1 instrucciones LLAVE2 
            {
              CasoMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CasoMatch(a, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_match",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ciclo_for ::= FOR PAR1 asignacion_variable expresion FINCADENA actualizar_for PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaFor(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // actualizar_for ::= ID IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // actualizar_for ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // actualizar_for ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new IncrementoDecreVariable(a, new OperacionResta(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo(TipoDato.ENTERO), aleft, aright ),aleft, aright) , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizar_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ciclo_while ::= WHILE PAR1 expresion PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ciclo_dowhile ::= DO LLAVE1 instrucciones LLAVE2 WHILE PAR1 expresion PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaDoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_dowhile",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // transferencia_break ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaBreak(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_break",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // transferencia_continue ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaContinue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_continue",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // metodo ::= tipos_variable ID PAR1 parametros_metodo PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // metodo ::= tipos_variable ID PAR1 PAR2 LLAVE1 instrucciones LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametros_metodo ::= parametros_metodo COMA tipos_variable ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_metodo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametros_metodo ::= tipos_variable ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_metodo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instruccion_start ::= STARTWITH ID PAR1 parametros_llamada PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new StartWith(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_start",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instruccion_start ::= STARTWITH ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new StartWith(a, new LinkedList<Instruccion>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_start",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // llamada_metodo ::= ID PAR1 parametros_llamada PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new LlamadaMetodo(a,b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metodo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // llamada_metodo ::= ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT= new LlamadaMetodo(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metodo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // llamada_funcion ::= ID PAR1 parametros_llamada PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new LlamadaMetodo(a,b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // llamada_funcion ::= ID PAR1 PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT= new LlamadaMetodo(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros_llamada ::= parametros_llamada COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametros_llamada ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // funcion_return ::= RETURN expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FuncionReturn(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_return",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // funcion_return ::= RETURN FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FuncionReturn(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_return",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipos_variable ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipos_variable ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.DECIMAL);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipos_variable ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipos_variable ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipos_variable ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipos_variable ::= VOID 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.VOID);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // mutabilidad ::= CONST 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // mutabilidad ::= VAR 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresionAritmetica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expresionRelacional 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= expresionLogica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= funciones_nativas 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= castearExpresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= llamada_funcion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(TipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(TipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= ID CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVectorUnaDimension(a, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= ID CORCHETE1 expresion CORCHETE2 CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVectorDosDimensiones(a, b, c, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= ID PUNTO REMOVE PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new RemoveLista(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresionAritmetica ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionNegacionU(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresionAritmetica ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionSuma(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresionAritmetica ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionResta(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresionAritmetica ::= expresion MULT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresionAritmetica ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDivision (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresionAritmetica ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionModulo (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionAritmetica ::= expresion POTENCIA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionPotencia (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresionAritmetica ::= PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresionRelacional ::= expresion DOBLEIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Igualacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresionRelacional ::= expresion DIFERENTE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Diferenciacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresionRelacional ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresionRelacional ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresionRelacional ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresionRelacional ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresionLogica ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorNot(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresionLogica ::= expresion XOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorXor(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresionLogica ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAnd(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresionLogica ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOr(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // funciones_nativas ::= ROUND PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionRound(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // funciones_nativas ::= LENGTH PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionLength(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // funciones_nativas ::= TOSTRING PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionToString(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // funciones_nativas ::= ID PUNTO FIND PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new FuncionFind(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones_nativas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // castearExpresion ::= PAR1 INT PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.ENTERO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // castearExpresion ::= PAR1 DOUBLE PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.DECIMAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // castearExpresion ::= PAR1 CHAR PAR2 expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, TipoCasteo.CARACTER, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castearExpresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
